{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1476508827128},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1476508827148},{"_id":"themes/next/.gitignore","hash":"80710b94ff2f6c013859ebffffe90f9295fc94ed","modified":1476508827163},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1476508827183},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1476508827197},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1476508827208},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1476508827231},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1476508827266},{"_id":"themes/next/_config.yml","hash":"dce5019621cbaf8c98499101f324b7b9786950a4","modified":1476508827330},{"_id":"themes/next/bower.json","hash":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1476508827384},{"_id":"themes/next/gulpfile.coffee","hash":"4e8c1082fa82e383494ff5b5963b7936d9c7bb2e","modified":1476508827398},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1476508829702},{"_id":"source/_posts/58City-House-Crawler-JS.md","hash":"f86659f784f9a6d94120a7f5174136006ad5947c","modified":1476508824470},{"_id":"source/_posts/58City-House-Crawler.md","hash":"34814ad9d60cc02470ac528d02d30ac5100fd7a3","modified":1476508824496},{"_id":"source/_posts/58CityHouseSearch_move_to_aspnetcore.md","hash":"14e15e203fd4845e0b745d0f234c43d238ec28d2","modified":1476508824513},{"_id":"source/_posts/ASP.NET-Core-Middleware.md","hash":"db771b7e2158d290cdcbf3ae44a8c43fbe7360ea","modified":1476508824550},{"_id":"source/_posts/Bytes-To-String.md","hash":"0d4981ce8858e1957e014dc1fa9a617a0203dec9","modified":1476508824596},{"_id":"source/_posts/CodeSmith-connect-MySQL-throw“can‘t find .Net Framework Data Provider”.md","hash":"e12ede68bc77b26f71dad25e35e61209958bab0c","modified":1476508824627},{"_id":"source/_posts/CodeSmith-to-MySQL.md","hash":"f6ec627a1da8e316fe9b624def249954aafc3589","modified":1476508824644},{"_id":"source/_posts/GC-1.md","hash":"300d0a9c2ade16b10469628eb10f8c09fed0e509","modified":1476508824657},{"_id":"source/_posts/GC-2.md","hash":"d84cad9bc885870c9e9df24cb32106b7eb22f55c","modified":1476508824678},{"_id":"source/_posts/Jexus-support-HTTPS.md","hash":"ff7037855caf386407c19c4686eafef98376b4b8","modified":1476508824707},{"_id":"source/_posts/Join.md","hash":"0faf2b1865c78bc461eeb1b24cff4f17d08fc15b","modified":1476508824763},{"_id":"source/_posts/LINQ-advantage.md","hash":"924ce2c1459d1f520c1e5b8fe0610138779789cf","modified":1476508824794},{"_id":"source/_posts/asp.net-core-startup.md","hash":"4010d4dbe86ee200474655dce4bb4958718010e3","modified":1476508824829},{"_id":"source/_posts/can't-modify-linq-object.md","hash":"6990a0031d1c5b4b0ae019d5a4c1beb6fb1927ba","modified":1476508824851},{"_id":"source/_posts/classfield-property.md","hash":"83f30661d10eef4680ab908dcf97365a735d3a9e","modified":1476508824876},{"_id":"source/_posts/don’t-throw-exception-in-foreach.md","hash":"310a1d28fd50bdb0eed740c4106181f231931faa","modified":1476508824907},{"_id":"source/_posts/hexo_memorandum.md","hash":"932d81131c4635a3ae1c336d4b3647e327549b48","modified":1483971846395},{"_id":"source/_posts/how_to_make_crawler_base_netcore.md","hash":"12b988be0e9d0da72af4b1849ef59429d4e4bccd","modified":1480786281389},{"_id":"source/_posts/install_Preview2_on_fresh_VS2015_Update3_Installation.md","hash":"210176a8e5a1ff3ab9b7a7811c28c88ec915c22c","modified":1476516714363},{"_id":"source/_posts/javascript_requirejs_rf_code.md","hash":"9c462e0c5a9b34b4121171e96ba753346f3e964b","modified":1477146429575},{"_id":"source/_posts/mibook_touchpap_gesture.md","hash":"7c88212ca1c9a894d6517c1f1cff6666812a3cb3","modified":1476624635031},{"_id":"source/_posts/mono-webreques-https-exception.md","hash":"21efacfc926209b5d167b1713cc117f097871c77","modified":1476508824932},{"_id":"source/_posts/the_first_aspnetcore.md","hash":"483990e66e99b5bee965dee572b0c933168cb156","modified":1476515678318},{"_id":"source/_posts/ubuntu-jexus-mywebsql.md","hash":"15da010bdf7788c0efe8a9fad92e6fc093de84a7","modified":1476508825009},{"_id":"source/_posts/visualstudio_shortcut_key.md","hash":"bdecea293c7eba2013a0001036a8173a32bc95c8","modified":1476516223214},{"_id":"source/_posts/visualstudiocode_for_php_debug.md","hash":"8c78a0d2bfd458e6ed54db15983c383c93708edc","modified":1489763772408},{"_id":"source/_posts/webchat_JS_SDK.md","hash":"727cf89de84be8a306dd88f00c5caa307e083e68","modified":1478533619941},{"_id":"source/categories/index.md","hash":"0d84e3962d8c7d558e0061a5d1642a56cc10d14c","modified":1476508825031},{"_id":"source/about/index.md","hash":"4a7e37de6b03f4a914f3d81ab8f717ddf0eab374","modified":1476508825023},{"_id":"source/tags/index.md","hash":"0237a232cfd838cb1cae7f0e4e80709ccbe27fbc","modified":1476508825039},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1476508827449},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1476508827466},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1476508827483},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1476508827546},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1476508827578},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1476508827619},{"_id":"themes/next/languages/ko.yml","hash":"feed5fdb677f87fbb9ba2b6e4413e7011180708e","modified":1476508827645},{"_id":"themes/next/languages/pt-BR.yml","hash":"81498b783372f11b2149bd2b1731e78432760a0e","modified":1476508827650},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1476508827696},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1476508827657},{"_id":"themes/next/languages/zh-Hans.yml","hash":"23b45e77c1846c9457b98c745a60a9461678c389","modified":1476508827738},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1476508827797},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1476508827819},{"_id":"themes/next/layout/_layout.swig","hash":"1138b849e1240249480849cc2b6c6d09b28207a5","modified":1476508827844},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1476508829602},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1476508829612},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1476508829620},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1476508829636},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1476508829655},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1476508829679},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1476508829727},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1476508835368},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1476508835406},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1476508835493},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476508831935},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1476508827875},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1476508827935},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"8aa5212d803670179222dbc80e73eadd7328d8e5","modified":1476508828030},{"_id":"themes/next/layout/_macro/post.swig","hash":"f0862e443e1c7b9ef4a6b619b51ba6038a99a567","modified":1476508827908},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1476508828116},{"_id":"themes/next/layout/_partials/comments.swig","hash":"d04a53cb1bb8a5f462b05107e9c566c2dfbf4c7d","modified":1476508828164},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1476508828175},{"_id":"themes/next/layout/_partials/footer.swig","hash":"d749b5b6b48dac6ddf5084e470122b09ce0a215a","modified":1476508828313},{"_id":"themes/next/layout/_partials/head.swig","hash":"881abebed3a7fa71827365b0ba0e84ec525eeb7f","modified":1476508828364},{"_id":"themes/next/layout/_partials/header.swig","hash":"c0697644817f1570093de9f17ea096295da8c5f1","modified":1476508828421},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1476508828440},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1476508828454},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1476508828776},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1476508828798},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1476508828836},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1476508829567},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1476508829767},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1476508829806},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1476508829908},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1476508831922},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1476508831940},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1476508831975},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1476508832002},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1476508832031},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1476508832039},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1476508832106},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1476508832052},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1476508832122},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1476508832152},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1476508832156},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1476508832196},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1476508832223},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1476508832235},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476508828865},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476508828865},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476508831313},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476508831314},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476508831362},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476508831833},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476508831902},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1476508828393},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1476508828480},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1476508828509},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1476508828531},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1476508828549},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1476508828665},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1476508828701},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1476508828730},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1476508828864},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1476508828878},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1476508828900},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1476508829178},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1476508829337},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f6b46096208512b4d8680c024fcb68f03ceab008","modified":1476508829385},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1476508829442},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1476508829518},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1476508831312},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1476508831334},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1476508831361},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1476508831833},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b8e3663996b39590509d843f674360872b0242ac","modified":1476508831847},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a7ae72e846393493385275d934eaa78534d9834c","modified":1476508831899},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1476508832354},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1476508832397},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1476508832449},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1476508832531},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1476508832586},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1476508832687},{"_id":"themes/next/source/js/src/utils.js","hash":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1476508832769},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1476508833380},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1476508833401},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1476508833457},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1476508833487},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1476508833723},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1476508833766},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1476508833840},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1476508833862},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1476508833909},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1476508834313},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1476508834909},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1476508834921},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1476508835214},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1476508835269},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1476508835336},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1476508834492},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1476508834513},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1476508834538},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1476508834574},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1476508834624},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1476508834672},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1476508834469},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1476508828936},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1476508828944},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a576c23d426ab236eb3dcd0bfe1b3f0b0c54ad1a","modified":1476508828975},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1476508829025},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1476508829082},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1476508829152},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"f8b6a3017ab79057ce99f1ccb512193d67f4a35f","modified":1476508829190},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"0a2f48971d86ea72e1a8fd1d8bbf2b7d423666b2","modified":1476508829224},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1476508829927},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1476508829967},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1476508829995},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1476508830046},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1476508830398},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1476508830854},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1476508831158},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1476508831187},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1476508831210},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1476508831221},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1476508831242},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1476508831302},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1476508831396},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1476508831419},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1476508831423},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1476508831469},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1476508831477},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1476508831490},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1476508831506},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1476508831571},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1476508831606},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1476508831621},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1476508831637},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1476508831644},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1476508831657},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1476508831680},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1476508831723},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1476508831740},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1476508831756},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1476508831785},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2182a6da3434a6fd4d03ab1592c645d3d3c88500","modified":1476508831699},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1476508832606},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1476508832782},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1476508832788},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1476508832790},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1476508832803},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1476508832812},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1476508832807},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1476508833056},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1476508833136},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1476508833354},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1476508833681},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1476508833567},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1476508833936},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1476508833951},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1476508833974},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1476508834305},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1476508834748},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1476508834837},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1476508834000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1476508834135},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1476508834246},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1476508835093},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1476508830057},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1476508830130},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1476508830148},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1476508830168},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1476508830176},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1476508830202},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"70ec8d38d2b3ee1906793d1dcb68032adfa65f03","modified":1476508830248},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1476508830283},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1476508830306},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1476508830322},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1476508830348},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1476508830368},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1476508830421},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1476508830487},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1476508830464},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1476508830503},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1476508830512},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1476508830534},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1476508830549},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1476508830569},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1476508830605},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1476508830632},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1476508830648},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1476508830666},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1476508830686},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1476508830705},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1476508830717},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1476508830723},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1476508830789},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1476508830802},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1476508830816},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1476508830834},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1476508830846},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1476508830877},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1476508830909},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1476508830929},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1476508830939},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1476508830986},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1476508831001},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1476508831021},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1476508831055},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"dcb4548d07cbb38b645b1753cf3ee7157e16921a","modified":1476508831083},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1476508831146},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1476508831554},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1476508831523},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1476508831647},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1476508832813},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1476508832849},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1476508832815},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1476508832891},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1476508832901},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1476508832966},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1476508834212},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1476508834179},{"_id":"public/atom.xml","hash":"f31d2430ca06048ba4c8ce8bd326ee0b84989465","modified":1489763721003},{"_id":"public/sitemap.xml","hash":"ed79fe9beed74fdcd93dc531169dd22a761dd281","modified":1489763721024},{"_id":"public/categories/index.html","hash":"aed208afed0e1fdeb2f066761a993f4bc03eaf61","modified":1489763721055},{"_id":"public/about/index.html","hash":"d262d3c361c3ed020f6ded60a6f118d25c3bacb7","modified":1489763721055},{"_id":"public/tags/index.html","hash":"632bb1721ef074386d57cdcf836e8ad52d645358","modified":1489763721055},{"_id":"public/archives/2016/page/3/index.html","hash":"1c63145ebacce01623e633109b561974a91c4997","modified":1489763721055},{"_id":"public/archives/2016/01/index.html","hash":"7a91ec7d31d6deef58d56bbac07c79ce0c3d403f","modified":1489763721055},{"_id":"public/archives/2016/02/index.html","hash":"dc95f9f9a007298071dad0606e395eb994384d3a","modified":1489763721055},{"_id":"public/archives/2016/03/index.html","hash":"479d566894f462e551f40124bbbf4883f9797e24","modified":1489763721055},{"_id":"public/archives/2016/04/index.html","hash":"711f0f758170ad3c36c781c7e7c1d739ba4cd6b6","modified":1489763721055},{"_id":"public/archives/2016/05/index.html","hash":"015ec737ca66bf5f89a3159fa6db011c8664ef41","modified":1489763721055},{"_id":"public/archives/2016/06/index.html","hash":"e212f28348d209ef68e33a4f988626ead5151cf6","modified":1489763721055},{"_id":"public/archives/2016/07/index.html","hash":"f83e9d0c903b2a6ca7973c86c43f0f5ee5aabc4a","modified":1489763721056},{"_id":"public/archives/2016/08/index.html","hash":"5b1971dc9df07fb0145e1b7a3768fbddc409506c","modified":1489763721056},{"_id":"public/archives/2016/10/index.html","hash":"24451d0bc5663660db19cd7730803e02381bd2a5","modified":1489763721056},{"_id":"public/archives/2016/11/index.html","hash":"d8c0a067b113c0ac099915b5b058f8174759f514","modified":1489763721056},{"_id":"public/archives/2016/12/index.html","hash":"1592d4320c5689b3590b229412837520c8201bd7","modified":1489763721056},{"_id":"public/archives/2017/index.html","hash":"5c15c2f9780c2eba8985b3db4a295c7fa6ddb4d2","modified":1489763721056},{"_id":"public/archives/2017/03/index.html","hash":"8a52fbc3bc48e36e02bf544cc3ba7940dc34b9d8","modified":1489763721056},{"_id":"public/categories/JavaScript/index.html","hash":"75a36cb6212ba3b9d3883e047d8eda199cfb1460","modified":1489763721056},{"_id":"public/categories/asp-net-core/index.html","hash":"478175e9b7cba64cf0438c853f68e95173e6e2bc","modified":1489763721056},{"_id":"public/categories/net-core/index.html","hash":"a8eddb797b8824cb7ecd02a88cb58b23d0c0fcce","modified":1489763721056},{"_id":"public/categories/CodeSmith/index.html","hash":"ecce9dc9f3179bae08d4a687402963a198d29125","modified":1489763721056},{"_id":"public/categories/GC/index.html","hash":"1af951008471f8b0e45f1de37e545ab1580a6d92","modified":1489763721056},{"_id":"public/categories/jexus/index.html","hash":"bdfe7dddd4a0c46bc828607b0befe90c3143dd86","modified":1489763721056},{"_id":"public/categories/memorandum/index.html","hash":"a5572bee4317bd7cf813e2d840d5e641e332c065","modified":1489763721056},{"_id":"public/categories/javascript/index.html","hash":"34e14de462ed51878d837b717e27e3b5e17de50f","modified":1489763721056},{"_id":"public/categories/ubuntu/index.html","hash":"b4461a7ebdb9adad709ee162051e990d409e02bb","modified":1489763721056},{"_id":"public/categories/Visual-Studio/index.html","hash":"8687516d6ae9b52e4572cfda791f0cf896186a3e","modified":1489763721056},{"_id":"public/tags/58City/index.html","hash":"7eb4e3e222596b993f095150e909d96a634f50a5","modified":1489763721056},{"_id":"public/tags/Crawler/index.html","hash":"11eee4e25ee0f870752ed636bcd019c5bffc03b5","modified":1489763721057},{"_id":"public/tags/asp-net-core/index.html","hash":"ca83fc226d07de29901b2bfe3a604f235c859b3c","modified":1489763721057},{"_id":"public/tags/加密编码/index.html","hash":"df54939beacbf39e499c3b0433fd32d6f0132c15","modified":1489763721057},{"_id":"public/tags/codesmith/index.html","hash":"63d1e3b287bd60927ebff8c68e25b59c24a0eac9","modified":1489763721057},{"_id":"public/tags/hexo/index.html","hash":"35c9b6144074779d2945d733880bcd1d10b6267d","modified":1489763721057},{"_id":"public/tags/crawler/index.html","hash":"ee278c18d49a04f4596741d0f8ddf6692c56e45c","modified":1489763721057},{"_id":"public/tags/javascript/index.html","hash":"7466b66b7ef6e76807eb4a1016c0f3cd14dfb51b","modified":1489763721057},{"_id":"public/tags/requirejs/index.html","hash":"e1f71f1998b5093ae8708219f01847f67f16e37a","modified":1489763721057},{"_id":"public/tags/memorandum/index.html","hash":"566a3c1ec0939e4c5f53ec0bec658b1d11d5787f","modified":1489763721057},{"_id":"public/tags/mono/index.html","hash":"429878770404a92be844ccec199639cf29419271","modified":1489763721057},{"_id":"public/tags/webreques-exception/index.html","hash":"08a864e4db486d870e79800f24ec5c032ab4d4ad","modified":1489763721057},{"_id":"public/tags/Visual-Studio/index.html","hash":"4a9b7375943e4ced17d7b36ea4edc4629123ac94","modified":1489763721057},{"_id":"public/tags/VisualStudio/index.html","hash":"1d85568073c2a89747a9cf212db8bc4608070f6a","modified":1489763721057},{"_id":"public/tags/PHP/index.html","hash":"aca3db3ff7022756d374ab7fa979a01122ab6ee5","modified":1489763721057},{"_id":"public/tags/Debug/index.html","hash":"54a69029044749b2e3c7f66a50bb75e74462c52f","modified":1489763721057},{"_id":"public/tags/net/index.html","hash":"a84a5dfbf4961d2b6d4dd66d62f93b044ae21f63","modified":1489763721057},{"_id":"public/2017/03/17/visualstudiocode_for_php_debug/index.html","hash":"1b634cbe73823ddc8af9c200a896ed8819401842","modified":1489763721057},{"_id":"public/2016/12/04/how_to_make_crawler_base_netcore/index.html","hash":"d2358ad0f9e2528a223839966fd83d890e2369f1","modified":1489763721057},{"_id":"public/2016/11/01/webchat_JS_SDK/index.html","hash":"50223cf33ea8a4bb973527173e735e685d721044","modified":1489763721057},{"_id":"public/2016/10/22/javascript_requirejs_rf_code/index.html","hash":"1555c07f44968d6a75524a5ca8e5cb4ddf760884","modified":1489763721058},{"_id":"public/2016/10/15/install_Preview2_on_fresh_VS2015_Update3_Installation/index.html","hash":"023ce78f633573e5c1574f4137e593e59930d41a","modified":1489763721058},{"_id":"public/2016/10/14/visualstudio_shortcut_key/index.html","hash":"613a488dc5163967dbc0f2826ba488661e28cc8e","modified":1489763721058},{"_id":"public/2016/10/04/58CityHouseSearch_move_to_aspnetcore/index.html","hash":"68d1e44d3edf3bdedc311b605703831366d92c2f","modified":1489763721058},{"_id":"public/2016/08/13/58City-House-Crawler-JS/index.html","hash":"08f1619f929dcc563ae87113501c1ae240428b06","modified":1489763721058},{"_id":"public/2016/08/08/58City-House-Crawler/index.html","hash":"76338ab37071b364dfda29428677fa8e5e8f0b4e","modified":1489763721058},{"_id":"public/2016/08/01/ASP.NET-Core-Middleware/index.html","hash":"0443e210a8b005d725abdc5e817b3978b4c3f588","modified":1489763721058},{"_id":"public/2016/07/28/asp.net-core-startup/index.html","hash":"c4733c5d826be63c01537476061b0bf344956706","modified":1489763721058},{"_id":"public/2016/06/20/don’t-throw-exception-in-foreach/index.html","hash":"b93791ed234a4f99c2cb6ff92902fc14f5e9fb11","modified":1489763721058},{"_id":"public/2016/05/30/the_first_aspnetcore/index.html","hash":"85c2b1ed31983c51cdbbf5d9ac7e99c15249c041","modified":1489763721058},{"_id":"public/2016/04/20/CodeSmith-connect-MySQL-throw“can‘t find .Net Framework Data Provider”/index.html","hash":"73dff38d6417b0ad30f69d3fbb98b9367e66d88f","modified":1489763721058},{"_id":"public/2016/04/20/Jexus-support-HTTPS/index.html","hash":"cc15a21006409690991678cf1cb4579c721c199d","modified":1489763721059},{"_id":"public/2016/04/10/mono-webreques-https-exception/index.html","hash":"f07a6e1dd5c1f912ee7ac9abe0a9920b4b606805","modified":1489763721059},{"_id":"public/2016/04/07/ubuntu-jexus-mywebsql/index.html","hash":"93dfccd187649790c673c098c9cb98c33c69cc43","modified":1489763721059},{"_id":"public/2016/03/28/CodeSmith-to-MySQL/index.html","hash":"25d1c7f62b18c4e8a5f8bd0e83b4a66c133e8f90","modified":1489763721059},{"_id":"public/2016/03/25/GC-1/index.html","hash":"2a507232e5331b92e57403c1ddd322c55ed293d2","modified":1489763721059},{"_id":"public/2016/03/20/GC-2/index.html","hash":"c40969706625fe308760a1c84fadb9ebb3a2ca8a","modified":1489763721059},{"_id":"public/2016/03/15/LINQ-advantage/index.html","hash":"4243628799b1e3ee304248290795d657cb8deb5f","modified":1489763721059},{"_id":"public/2016/03/03/Join/index.html","hash":"7135f6a02c452bb50fa33a4e8b0d1eb66270ca09","modified":1489763721059},{"_id":"public/2016/02/15/can't-modify-linq-object/index.html","hash":"b58f86158dbf5bcfc7cc301fce7a0bc9a6201b56","modified":1489763721059},{"_id":"public/2016/02/10/classfield-property/index.html","hash":"977cf6dc25b2f2803eeaebb4718178675cf36da4","modified":1489763721060},{"_id":"public/2016/01/20/Bytes-To-String/index.html","hash":"7d7d7f8487e08164ea5efaa110419c5d19f0caed","modified":1489763721060},{"_id":"public/2016/01/01/mibook_touchpap_gesture/index.html","hash":"623a4735015e94c8b32c5aa7359dfb419d644580","modified":1489763721060},{"_id":"public/2016/01/01/hexo_memorandum/index.html","hash":"b8e5edbbad9334421fbe6c4c74d13f8fa1df033a","modified":1489763721060},{"_id":"public/archives/index.html","hash":"bd216da2d4726fae4a5413b793d75d7bf741c982","modified":1489763721060},{"_id":"public/archives/page/2/index.html","hash":"6de1ab8dcb98d702341ba70ae39b0f1d4d89e7e6","modified":1489763721060},{"_id":"public/archives/page/3/index.html","hash":"ff23fcd574edbb2b3e9c33f0d2025292bfd32b53","modified":1489763721060},{"_id":"public/archives/2016/index.html","hash":"f03e18779ae64ba36e04db79576cea13ecd15047","modified":1489763721060},{"_id":"public/archives/2016/page/2/index.html","hash":"0f957090c82faae61c8f9bf19856f92138fa2cb8","modified":1489763721060},{"_id":"public/categories/net/index.html","hash":"588273f362d9538d4c7706601ea40a80c498a956","modified":1489763721060},{"_id":"public/index.html","hash":"b17d19bc8a7d5149f3c3260a1bc24f16ad43eb84","modified":1489763721060},{"_id":"public/page/2/index.html","hash":"3d9bf9800feb294dba15a6ee0955a7c22d09137c","modified":1489763721060},{"_id":"public/page/3/index.html","hash":"334c94fd5e8b1f74fb09a63032250618eda8e79d","modified":1489763721061},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1489763721085},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1489763721086},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1489763721086},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1489763721086},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1489763721086},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1489763721086},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1489763721086},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1489763721086},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1489763721086},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1489763721086},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1489763721086},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1489763721086},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1489763721086},{"_id":"public/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1489763721086},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1489763721086},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1489763721086},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1489763721086},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1489763721086},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1489763721086},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1489763721086},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1489763721086},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1489763721087},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1489763721087},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1489763721087},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1489763721698},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1489763721702},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1489763721703},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1489763721712},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1489763721712},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1489763721712},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1489763721712},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1489763721712},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1489763721712},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1489763721712},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1489763721712},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1489763721712},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1489763721712},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1489763721713},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1489763721713},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1489763721713},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1489763721713},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1489763721713},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1489763721713},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1489763721713},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1489763721713},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1489763721714},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1489763721714},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1489763721714},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1489763721714},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1489763721714},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1489763721714},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1489763721714},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1489763721714},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1489763721714},{"_id":"public/css/main.css","hash":"9c33a63bc7f96fb6ada3c2b2e3d993ceeb17e240","modified":1489763721714},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1489763721714},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1489763721714},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1489763721714},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1489763721714},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1489763721714},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1489763721714},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1489763721714},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1489763721714},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1489763721714},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1489763721714},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1489763721775}],"Category":[{"name":"JavaScript","_id":"cj0dyumv600046kunx5pqzkei"},{"name":".net","_id":"cj0dyumvq000a6kunofgopruy"},{"name":"asp.net core","_id":"cj0dyumvz000f6kunpphmt68c"},{"name":".net core","_id":"cj0dyumw5000l6kunqqj9ox6b"},{"name":"CodeSmith","_id":"cj0dyumwk000x6kun7u74moqt"},{"name":"GC","_id":"cj0dyumwv001c6kunvbhw2qzi"},{"name":"jexus","_id":"cj0dyumxb001p6kun96acbawx"},{"name":"memorandum","_id":"cj0dyumxf001w6kunb3exurin"},{"name":"javascript","_id":"cj0dyumxj00246kungjl6tuae"},{"name":"ubuntu","_id":"cj0dyumxt002g6kunoboyea6n"},{"name":"Visual Studio","_id":"cj0dyumxu002k6kunug62l8a5"}],"Data":[],"Page":[{"title":"categories","date":"2016-09-13T15:24:18.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"title: categories\ndate: 2016-09-13 23:24:18\ntype: \"categories\"\n---\n","updated":"2016-10-15T05:20:25.031Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj0dyumv000016kunjl0022d2","content":"","excerpt":"","more":""},{"title":"about","date":"2016-09-13T15:52:17.000Z","_content":"\n一只走在吃软饭路上的非单身软狗。\n\n经常出没于知乎，Github，欢迎学习交流。\n\n知乎主页：[https://www.zhihu.com/people/codelover](https://www.zhihu.com/people/codelover)\n\n知乎专栏：[http://zhuanlan.zhihu.com/codelover](http://zhuanlan.zhihu.com/codelover)\n\nGithub主页：[https://github.com/liguobao](https://github.com/liguobao)\n\n\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-09-13 23:52:17\n---\n\n一只走在吃软饭路上的非单身软狗。\n\n经常出没于知乎，Github，欢迎学习交流。\n\n知乎主页：[https://www.zhihu.com/people/codelover](https://www.zhihu.com/people/codelover)\n\n知乎专栏：[http://zhuanlan.zhihu.com/codelover](http://zhuanlan.zhihu.com/codelover)\n\nGithub主页：[https://github.com/liguobao](https://github.com/liguobao)\n\n\n\n","updated":"2016-10-15T05:20:25.023Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj0dyumv400036kuno2ocuhgq","content":"<p>一只走在吃软饭路上的非单身软狗。</p>\n<p>经常出没于知乎，Github，欢迎学习交流。</p>\n<p>知乎主页：<a href=\"https://www.zhihu.com/people/codelover\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/people/codelover</a></p>\n<p>知乎专栏：<a href=\"http://zhuanlan.zhihu.com/codelover\" target=\"_blank\" rel=\"external\">http://zhuanlan.zhihu.com/codelover</a></p>\n<p>Github主页：<a href=\"https://github.com/liguobao\" target=\"_blank\" rel=\"external\">https://github.com/liguobao</a></p>\n","excerpt":"","more":"<p>一只走在吃软饭路上的非单身软狗。</p>\n<p>经常出没于知乎，Github，欢迎学习交流。</p>\n<p>知乎主页：<a href=\"https://www.zhihu.com/people/codelover\">https://www.zhihu.com/people/codelover</a></p>\n<p>知乎专栏：<a href=\"http://zhuanlan.zhihu.com/codelover\">http://zhuanlan.zhihu.com/codelover</a></p>\n<p>Github主页：<a href=\"https://github.com/liguobao\">https://github.com/liguobao</a></p>\n"},{"title":"tags","date":"2016-09-13T15:49:07.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"title: tags\ndate: 2016-09-13 23:49:07\ntype: \"tags\"\n---\n","updated":"2016-10-15T05:20:25.039Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj0dyumvg00066kun3pz0xmq6","content":"","excerpt":"","more":""}],"Post":[{"layout":"post","title":"58同城高德搜房项目JS相关知识","date":"2016-08-12T16:00:00.000Z","_content":"\n在线地址：[58同城品牌公寓高德搜房](http://codelover.link:8080/)\n\nGithub地址：[https://github.com/liguobao/58HouseSearch](https://github.com/liguobao/58HouseSearch)\n\n知乎专栏(点赞用的)：[高德API+Python解决租房问题(.NET版)](https://zhuanlan.zhihu.com/p/21960329)\n\n经过了一个星期的修补补，以及小伙伴奉献的代码，整个项目基本处于基本稳定运行的状态。\n\n同时加入了一下新功能：\n\n1. IP定位：调用高德地图IP定位功能实现\n2. 移动地图中心定位：调用高德地图移动地图定位实现\n3. 定位城市名转58同城城市名以获得准确58同城城市域名：抓取58同城城市分类信息\n4. 优化数据源、去除广告数据：小伙伴奉献代码\n\n今天主要简单讲解一下其中使用的一些高德地图API接口。\n\n高德地图JavaScript API 主体为map对象，基本所有的操作都是通过map对象来实现的。\nmap对象实例化是通过 Amap类来做的。如以下代码：\n```javascript\nmap = new AMap.Map(\"container\", {\n        resizeEnable: true,\n        zoomEnable: true,\n        center: [121.297428, 31.1345],//经纬度，此处为上海\n        zoom: 11\n    });\n\n```\n\n\n\n\n\n#### IP定位\n调用Map.CitySearch()获得当前IP所在城市，直接将地图显示成当前城市。代码如下：\n```JavaScript\nfunction showCityInfo(map) {\n    //实例化城市查询类\n    var citysearch = new AMap.CitySearch();\n    //自动获取用户IP，返回当前城市\n    citysearch.getLocalCity(function (status, result) {\n        if (status === 'complete' && result.info === 'OK') {\n            if (result && result.city && result.bounds) {\n                var cityinfo = result.city;//获得XX市\n                var citybounds = result.bounds;//用于设置地图显示位置的实例\n                cityName = cityinfo.substring(0, cityinfo.length - 1);//去掉市这个字\n                ConvertCityCNNameToShortCut();//城市名转换成58同城城市域名字母，如上海->sh,苏州->su,\n                                              //下面会有实现代码\n\n                document.getElementById('IPLocation').innerHTML = '您当前所在城市：' + cityName;\n                //地图显示当前城市\n                map.setBounds(citybounds);\n            }\n        } else {\n            document.getElementById('IPLocation').innerHTML = result.info;\n        }\n    });\n}\n\n```\n\n\n#### 移动地图自动中心定位\n\n之前有一版是让用户输入城市名，然后直接定位到输入的城市的。\n这个功能卡在了设置地图显示位置上，如果是使用高德地图提供的搜索控件的话，又存在输入结果之后搜索结果可能是多个的问题。而且这点我只是要取到用户想要定位的城市而已，感觉没必要做得太复杂。\n昨晚在看高德地图API的时候发现，有一个移动地图获得地图中心所在位置的样例，马上眼前一亮了。这个功能比我想要的还要好...果断上。\n\n```JavaScript\nfunction MapMoveToLocationCity()\n{\n    map.on('moveend', getCity);\n    function getCity() {\n        map.getCity(function (data) {\n            if (data['province'] && typeof data['province'] === 'string') {\n\n                var cityinfo = (data['city'] || data['province']);\n                cityName = cityinfo.substring(0, cityinfo.length - 1);\n                ConvertCityCNNameToShortCut();//城市名转58同城地区域名\n\n                document.getElementById('IPLocation').innerHTML = '地图中心所在城市：' + cityName;\n\n            }\n        });\n    }\n}\n```\n\n整个代码的意思是，给map绑定一下移动时间，移动完了之后，调用getCity的方法获取当前地图中心所在城市信息。\n\n这个时候要注意，城市名可能在city对象里面，也可能在province里面。\n\n原因很简单：普通城市等级就是城市，我国还存在一个和省份一个等级的城市：直辖市。因此直辖市的城市名是在province里面的。\n\n\n#### 城市名匹配58同城地区域名\n\n这个是上个版本(两三天前)的一个bug引出来的新功能。\n\n上个版本是让用户输入城市名，然后提取城市名的中文拼音首字母作为58同城地区域名。如上海 =sh，广州=gz，北京=bj，成都=cd。\n\n这个功能使用的是网上别人写的一个JS库，通过汉字匹配实现的。转换出来的数据没什么问题，不过我国汉字实在奥妙。\n\n广州=gz，赣州=gz；\n遂宁=sn；绥宁=sn；\n惠州=hz，杭州=hz。\n\n这样一来，上面这个做法就没法玩了。\n\n想了下怎么解决这个问题，灵机一动。反正是在爬58的数据，这个城市名和城市域名数据58同城肯定有啊，然后找到了这个。\n[58同城城市分类导航](http://www.58.com/changecity.aspx?PGTID=0d100000-0007-a77b-4c4b-a28f725b8f5a&ClickID=1)\n\n![](http://7xread.com1.z0.glb.clouddn.com/c01c293a-d5cc-4f58-80dc-13aa05d47b01)\n\n很明显，我要的所有城市名和城市域名都是里面了。\n\n晚上和衣衣说了下，衣衣一大早就把处理好的json数据给我了。\n\n于是来了下面一段代码：\n```JavaScript\n\n//加载json文件\n$.getJSON(\"DomainJS/city.json\", function (data)\n{\n      allCityInfo = data;\n});\n\n\nfunction ConvertCityCNNameToShortCut()\n{\n    var filterarray = $.grep(allCityInfo, function (obj) {\n        return obj.cityName == cityName;\n    });//找到当前城市名对应的json对象\n    //获取json对象的地区域名\n    cityNameCNPY = filterarray instanceof Array ? \n    filterarray[0].shortCut : filterarray != null ? filterarray.shortCut : \"\";\n}\n\n```\n\n\n#### 高德地图自动补全功能\n\n```html\n  <div class=\"control-input\">\n       <input id=\"work-location\" type=\"text\" style=\"width:60%\">\n  </div>\n```\n\n```JavaScript\n var auto = new AMap.Autocomplete({\n        input: \"work-location\"\n    });\n\n    AMap.event.addListener(auto, \"select\", workLocationSelected);\n    \n```\n看方法前面也知道，其实这就是把ID为work-location的input初始化为地图插件，然后给Amap增加了一个监听事件。\n当其中选中某一个数据的时候，触发workLocationSelected函数。效果如下：\n\n![](http://7xread.com1.z0.glb.clouddn.com/fe425992-e7c4-4cae-800e-319eff3b17e8)\n\n\n在这里locationSelected是定位到所选位置，代码如下：\n```\nfunction workLocationSelected(e) {\n    workAddress = e.poi.name;\n    loadWorkLocation();\n}\n\nfunction loadWorkLocation() {\n    delWorkLocation();\n    var geocoder = new AMap.Geocoder({\n        city: cityName,\n        radius: 1000\n    });\n\n    geocoder.getLocation(workAddress, function (status, result) {\n        if (status === \"complete\" && result.info === 'OK') {\n            var geocode = result.geocodes[0];\n            x = geocode.location.getLng();\n            y = geocode.location.getLat();\n            loadWorkMarker(x, y);\n            loadWorkRange(x, y, 60, \"#3f67a5\", vehicle);\n            map.setZoomAndCenter(12, [x, y]);\n        }\n    })\n}\n\n```\n\n至于导航功能代码我没怎么动，没去研究就不献丑了...\n\n\n最后来个效果图。\n\n#### 北京\n![](http://7xread.com1.z0.glb.clouddn.com/e7900aba-5a56-417c-9dd9-63527583e84b)\n\n#### 成都\n![](http://7xread.com1.z0.glb.clouddn.com/c9947d97-1b76-42bf-82b3-aca817e84e13)\n\n#### 苏州\n![](http://7xread.com1.z0.glb.clouddn.com/941809ae-aa37-4a3b-89c7-10646cc7e3e7)\n\n#### 深圳\n![](http://7xread.com1.z0.glb.clouddn.com/86712397-27ec-4b37-bbf8-81191e530ef6)\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/58City-House-Crawler-JS.md","raw":"---\nlayout: post\ntitle: 58同城高德搜房项目JS相关知识\ncategory: JavaScript\ndate: 2016-08-13 00:00:00\n---\n\n在线地址：[58同城品牌公寓高德搜房](http://codelover.link:8080/)\n\nGithub地址：[https://github.com/liguobao/58HouseSearch](https://github.com/liguobao/58HouseSearch)\n\n知乎专栏(点赞用的)：[高德API+Python解决租房问题(.NET版)](https://zhuanlan.zhihu.com/p/21960329)\n\n经过了一个星期的修补补，以及小伙伴奉献的代码，整个项目基本处于基本稳定运行的状态。\n\n同时加入了一下新功能：\n\n1. IP定位：调用高德地图IP定位功能实现\n2. 移动地图中心定位：调用高德地图移动地图定位实现\n3. 定位城市名转58同城城市名以获得准确58同城城市域名：抓取58同城城市分类信息\n4. 优化数据源、去除广告数据：小伙伴奉献代码\n\n今天主要简单讲解一下其中使用的一些高德地图API接口。\n\n高德地图JavaScript API 主体为map对象，基本所有的操作都是通过map对象来实现的。\nmap对象实例化是通过 Amap类来做的。如以下代码：\n```javascript\nmap = new AMap.Map(\"container\", {\n        resizeEnable: true,\n        zoomEnable: true,\n        center: [121.297428, 31.1345],//经纬度，此处为上海\n        zoom: 11\n    });\n\n```\n\n\n\n\n\n#### IP定位\n调用Map.CitySearch()获得当前IP所在城市，直接将地图显示成当前城市。代码如下：\n```JavaScript\nfunction showCityInfo(map) {\n    //实例化城市查询类\n    var citysearch = new AMap.CitySearch();\n    //自动获取用户IP，返回当前城市\n    citysearch.getLocalCity(function (status, result) {\n        if (status === 'complete' && result.info === 'OK') {\n            if (result && result.city && result.bounds) {\n                var cityinfo = result.city;//获得XX市\n                var citybounds = result.bounds;//用于设置地图显示位置的实例\n                cityName = cityinfo.substring(0, cityinfo.length - 1);//去掉市这个字\n                ConvertCityCNNameToShortCut();//城市名转换成58同城城市域名字母，如上海->sh,苏州->su,\n                                              //下面会有实现代码\n\n                document.getElementById('IPLocation').innerHTML = '您当前所在城市：' + cityName;\n                //地图显示当前城市\n                map.setBounds(citybounds);\n            }\n        } else {\n            document.getElementById('IPLocation').innerHTML = result.info;\n        }\n    });\n}\n\n```\n\n\n#### 移动地图自动中心定位\n\n之前有一版是让用户输入城市名，然后直接定位到输入的城市的。\n这个功能卡在了设置地图显示位置上，如果是使用高德地图提供的搜索控件的话，又存在输入结果之后搜索结果可能是多个的问题。而且这点我只是要取到用户想要定位的城市而已，感觉没必要做得太复杂。\n昨晚在看高德地图API的时候发现，有一个移动地图获得地图中心所在位置的样例，马上眼前一亮了。这个功能比我想要的还要好...果断上。\n\n```JavaScript\nfunction MapMoveToLocationCity()\n{\n    map.on('moveend', getCity);\n    function getCity() {\n        map.getCity(function (data) {\n            if (data['province'] && typeof data['province'] === 'string') {\n\n                var cityinfo = (data['city'] || data['province']);\n                cityName = cityinfo.substring(0, cityinfo.length - 1);\n                ConvertCityCNNameToShortCut();//城市名转58同城地区域名\n\n                document.getElementById('IPLocation').innerHTML = '地图中心所在城市：' + cityName;\n\n            }\n        });\n    }\n}\n```\n\n整个代码的意思是，给map绑定一下移动时间，移动完了之后，调用getCity的方法获取当前地图中心所在城市信息。\n\n这个时候要注意，城市名可能在city对象里面，也可能在province里面。\n\n原因很简单：普通城市等级就是城市，我国还存在一个和省份一个等级的城市：直辖市。因此直辖市的城市名是在province里面的。\n\n\n#### 城市名匹配58同城地区域名\n\n这个是上个版本(两三天前)的一个bug引出来的新功能。\n\n上个版本是让用户输入城市名，然后提取城市名的中文拼音首字母作为58同城地区域名。如上海 =sh，广州=gz，北京=bj，成都=cd。\n\n这个功能使用的是网上别人写的一个JS库，通过汉字匹配实现的。转换出来的数据没什么问题，不过我国汉字实在奥妙。\n\n广州=gz，赣州=gz；\n遂宁=sn；绥宁=sn；\n惠州=hz，杭州=hz。\n\n这样一来，上面这个做法就没法玩了。\n\n想了下怎么解决这个问题，灵机一动。反正是在爬58的数据，这个城市名和城市域名数据58同城肯定有啊，然后找到了这个。\n[58同城城市分类导航](http://www.58.com/changecity.aspx?PGTID=0d100000-0007-a77b-4c4b-a28f725b8f5a&ClickID=1)\n\n![](http://7xread.com1.z0.glb.clouddn.com/c01c293a-d5cc-4f58-80dc-13aa05d47b01)\n\n很明显，我要的所有城市名和城市域名都是里面了。\n\n晚上和衣衣说了下，衣衣一大早就把处理好的json数据给我了。\n\n于是来了下面一段代码：\n```JavaScript\n\n//加载json文件\n$.getJSON(\"DomainJS/city.json\", function (data)\n{\n      allCityInfo = data;\n});\n\n\nfunction ConvertCityCNNameToShortCut()\n{\n    var filterarray = $.grep(allCityInfo, function (obj) {\n        return obj.cityName == cityName;\n    });//找到当前城市名对应的json对象\n    //获取json对象的地区域名\n    cityNameCNPY = filterarray instanceof Array ? \n    filterarray[0].shortCut : filterarray != null ? filterarray.shortCut : \"\";\n}\n\n```\n\n\n#### 高德地图自动补全功能\n\n```html\n  <div class=\"control-input\">\n       <input id=\"work-location\" type=\"text\" style=\"width:60%\">\n  </div>\n```\n\n```JavaScript\n var auto = new AMap.Autocomplete({\n        input: \"work-location\"\n    });\n\n    AMap.event.addListener(auto, \"select\", workLocationSelected);\n    \n```\n看方法前面也知道，其实这就是把ID为work-location的input初始化为地图插件，然后给Amap增加了一个监听事件。\n当其中选中某一个数据的时候，触发workLocationSelected函数。效果如下：\n\n![](http://7xread.com1.z0.glb.clouddn.com/fe425992-e7c4-4cae-800e-319eff3b17e8)\n\n\n在这里locationSelected是定位到所选位置，代码如下：\n```\nfunction workLocationSelected(e) {\n    workAddress = e.poi.name;\n    loadWorkLocation();\n}\n\nfunction loadWorkLocation() {\n    delWorkLocation();\n    var geocoder = new AMap.Geocoder({\n        city: cityName,\n        radius: 1000\n    });\n\n    geocoder.getLocation(workAddress, function (status, result) {\n        if (status === \"complete\" && result.info === 'OK') {\n            var geocode = result.geocodes[0];\n            x = geocode.location.getLng();\n            y = geocode.location.getLat();\n            loadWorkMarker(x, y);\n            loadWorkRange(x, y, 60, \"#3f67a5\", vehicle);\n            map.setZoomAndCenter(12, [x, y]);\n        }\n    })\n}\n\n```\n\n至于导航功能代码我没怎么动，没去研究就不献丑了...\n\n\n最后来个效果图。\n\n#### 北京\n![](http://7xread.com1.z0.glb.clouddn.com/e7900aba-5a56-417c-9dd9-63527583e84b)\n\n#### 成都\n![](http://7xread.com1.z0.glb.clouddn.com/c9947d97-1b76-42bf-82b3-aca817e84e13)\n\n#### 苏州\n![](http://7xread.com1.z0.glb.clouddn.com/941809ae-aa37-4a3b-89c7-10646cc7e3e7)\n\n#### 深圳\n![](http://7xread.com1.z0.glb.clouddn.com/86712397-27ec-4b37-bbf8-81191e530ef6)\n\n\n\n\n\n\n\n\n\n\n\n","slug":"58City-House-Crawler-JS","published":1,"updated":"2016-10-15T05:20:24.470Z","comments":1,"photos":[],"link":"","_id":"cj0dyumuu00006kune5kir3zq","content":"<p>在线地址：<a href=\"http://codelover.link:8080/\">58同城品牌公寓高德搜房</a></p>\n<p>Github地址：<a href=\"https://github.com/liguobao/58HouseSearch\" target=\"_blank\" rel=\"external\">https://github.com/liguobao/58HouseSearch</a></p>\n<p>知乎专栏(点赞用的)：<a href=\"https://zhuanlan.zhihu.com/p/21960329\" target=\"_blank\" rel=\"external\">高德API+Python解决租房问题(.NET版)</a></p>\n<p>经过了一个星期的修补补，以及小伙伴奉献的代码，整个项目基本处于基本稳定运行的状态。</p>\n<p>同时加入了一下新功能：</p>\n<ol>\n<li>IP定位：调用高德地图IP定位功能实现</li>\n<li>移动地图中心定位：调用高德地图移动地图定位实现</li>\n<li>定位城市名转58同城城市名以获得准确58同城城市域名：抓取58同城城市分类信息</li>\n<li>优化数据源、去除广告数据：小伙伴奉献代码</li>\n</ol>\n<p>今天主要简单讲解一下其中使用的一些高德地图API接口。</p>\n<p>高德地图JavaScript API 主体为map对象，基本所有的操作都是通过map对象来实现的。<br>map对象实例化是通过 Amap类来做的。如以下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">map = <span class=\"keyword\">new</span> AMap.Map(<span class=\"string\">\"container\"</span>, &#123;</div><div class=\"line\">        resizeEnable: <span class=\"literal\">true</span>,</div><div class=\"line\">        zoomEnable: <span class=\"literal\">true</span>,</div><div class=\"line\">        center: [<span class=\"number\">121.297428</span>, <span class=\"number\">31.1345</span>],<span class=\"comment\">//经纬度，此处为上海</span></div><div class=\"line\">        zoom: <span class=\"number\">11</span></div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure></p>\n<h4 id=\"IP定位\"><a href=\"#IP定位\" class=\"headerlink\" title=\"IP定位\"></a>IP定位</h4><p>调用Map.CitySearch()获得当前IP所在城市，直接将地图显示成当前城市。代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showCityInfo</span>(<span class=\"params\">map</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//实例化城市查询类</span></div><div class=\"line\">    <span class=\"keyword\">var</span> citysearch = <span class=\"keyword\">new</span> AMap.CitySearch();</div><div class=\"line\">    <span class=\"comment\">//自动获取用户IP，返回当前城市</span></div><div class=\"line\">    citysearch.getLocalCity(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status, result</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (status === <span class=\"string\">'complete'</span> &amp;&amp; result.info === <span class=\"string\">'OK'</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (result &amp;&amp; result.city &amp;&amp; result.bounds) &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> cityinfo = result.city;<span class=\"comment\">//获得XX市</span></div><div class=\"line\">                <span class=\"keyword\">var</span> citybounds = result.bounds;<span class=\"comment\">//用于设置地图显示位置的实例</span></div><div class=\"line\">                cityName = cityinfo.substring(<span class=\"number\">0</span>, cityinfo.length - <span class=\"number\">1</span>);<span class=\"comment\">//去掉市这个字</span></div><div class=\"line\">                ConvertCityCNNameToShortCut();<span class=\"comment\">//城市名转换成58同城城市域名字母，如上海-&gt;sh,苏州-&gt;su,</span></div><div class=\"line\">                                              <span class=\"comment\">//下面会有实现代码</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'IPLocation'</span>).innerHTML = <span class=\"string\">'您当前所在城市：'</span> + cityName;</div><div class=\"line\">                <span class=\"comment\">//地图显示当前城市</span></div><div class=\"line\">                map.setBounds(citybounds);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'IPLocation'</span>).innerHTML = result.info;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"移动地图自动中心定位\"><a href=\"#移动地图自动中心定位\" class=\"headerlink\" title=\"移动地图自动中心定位\"></a>移动地图自动中心定位</h4><p>之前有一版是让用户输入城市名，然后直接定位到输入的城市的。<br>这个功能卡在了设置地图显示位置上，如果是使用高德地图提供的搜索控件的话，又存在输入结果之后搜索结果可能是多个的问题。而且这点我只是要取到用户想要定位的城市而已，感觉没必要做得太复杂。<br>昨晚在看高德地图API的时候发现，有一个移动地图获得地图中心所在位置的样例，马上眼前一亮了。这个功能比我想要的还要好…果断上。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MapMoveToLocationCity</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    map.on(<span class=\"string\">'moveend'</span>, getCity);</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCity</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        map.getCity(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (data[<span class=\"string\">'province'</span>] &amp;&amp; <span class=\"keyword\">typeof</span> data[<span class=\"string\">'province'</span>] === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">var</span> cityinfo = (data[<span class=\"string\">'city'</span>] || data[<span class=\"string\">'province'</span>]);</div><div class=\"line\">                cityName = cityinfo.substring(<span class=\"number\">0</span>, cityinfo.length - <span class=\"number\">1</span>);</div><div class=\"line\">                ConvertCityCNNameToShortCut();<span class=\"comment\">//城市名转58同城地区域名</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'IPLocation'</span>).innerHTML = <span class=\"string\">'地图中心所在城市：'</span> + cityName;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>整个代码的意思是，给map绑定一下移动时间，移动完了之后，调用getCity的方法获取当前地图中心所在城市信息。</p>\n<p>这个时候要注意，城市名可能在city对象里面，也可能在province里面。</p>\n<p>原因很简单：普通城市等级就是城市，我国还存在一个和省份一个等级的城市：直辖市。因此直辖市的城市名是在province里面的。</p>\n<h4 id=\"城市名匹配58同城地区域名\"><a href=\"#城市名匹配58同城地区域名\" class=\"headerlink\" title=\"城市名匹配58同城地区域名\"></a>城市名匹配58同城地区域名</h4><p>这个是上个版本(两三天前)的一个bug引出来的新功能。</p>\n<p>上个版本是让用户输入城市名，然后提取城市名的中文拼音首字母作为58同城地区域名。如上海 =sh，广州=gz，北京=bj，成都=cd。</p>\n<p>这个功能使用的是网上别人写的一个JS库，通过汉字匹配实现的。转换出来的数据没什么问题，不过我国汉字实在奥妙。</p>\n<p>广州=gz，赣州=gz；<br>遂宁=sn；绥宁=sn；<br>惠州=hz，杭州=hz。</p>\n<p>这样一来，上面这个做法就没法玩了。</p>\n<p>想了下怎么解决这个问题，灵机一动。反正是在爬58的数据，这个城市名和城市域名数据58同城肯定有啊，然后找到了这个。<br><a href=\"http://www.58.com/changecity.aspx?PGTID=0d100000-0007-a77b-4c4b-a28f725b8f5a&amp;ClickID=1\" target=\"_blank\" rel=\"external\">58同城城市分类导航</a></p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/c01c293a-d5cc-4f58-80dc-13aa05d47b01\" alt=\"\"></p>\n<p>很明显，我要的所有城市名和城市域名都是里面了。</p>\n<p>晚上和衣衣说了下，衣衣一大早就把处理好的json数据给我了。</p>\n<p>于是来了下面一段代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//加载json文件</span></div><div class=\"line\">$.getJSON(<span class=\"string\">\"DomainJS/city.json\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">      allCityInfo = data;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ConvertCityCNNameToShortCut</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> filterarray = $.grep(allCityInfo, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> obj.cityName == cityName;</div><div class=\"line\">    &#125;);<span class=\"comment\">//找到当前城市名对应的json对象</span></div><div class=\"line\">    <span class=\"comment\">//获取json对象的地区域名</span></div><div class=\"line\">    cityNameCNPY = filterarray <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> ? </div><div class=\"line\">    filterarray[<span class=\"number\">0</span>].shortCut : filterarray != <span class=\"literal\">null</span> ? filterarray.shortCut : <span class=\"string\">\"\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"高德地图自动补全功能\"><a href=\"#高德地图自动补全功能\" class=\"headerlink\" title=\"高德地图自动补全功能\"></a>高德地图自动补全功能</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"control-input\"</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"work-location\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:60%\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> auto = <span class=\"keyword\">new</span> AMap.Autocomplete(&#123;</div><div class=\"line\">       input: <span class=\"string\">\"work-location\"</span></div><div class=\"line\">   &#125;);</div><div class=\"line\"></div><div class=\"line\">   AMap.event.addListener(auto, <span class=\"string\">\"select\"</span>, workLocationSelected);</div></pre></td></tr></table></figure>\n<p>看方法前面也知道，其实这就是把ID为work-location的input初始化为地图插件，然后给Amap增加了一个监听事件。<br>当其中选中某一个数据的时候，触发workLocationSelected函数。效果如下：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/fe425992-e7c4-4cae-800e-319eff3b17e8\" alt=\"\"></p>\n<p>在这里locationSelected是定位到所选位置，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">workLocationSelected</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    workAddress = e.poi.name;</div><div class=\"line\">    loadWorkLocation();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadWorkLocation</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    delWorkLocation();</div><div class=\"line\">    <span class=\"keyword\">var</span> geocoder = <span class=\"keyword\">new</span> AMap.Geocoder(&#123;</div><div class=\"line\">        city: cityName,</div><div class=\"line\">        radius: <span class=\"number\">1000</span></div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    geocoder.getLocation(workAddress, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status, result</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (status === <span class=\"string\">\"complete\"</span> &amp;&amp; result.info === <span class=\"string\">'OK'</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> geocode = result.geocodes[<span class=\"number\">0</span>];</div><div class=\"line\">            x = geocode.location.getLng();</div><div class=\"line\">            y = geocode.location.getLat();</div><div class=\"line\">            loadWorkMarker(x, y);</div><div class=\"line\">            loadWorkRange(x, y, <span class=\"number\">60</span>, <span class=\"string\">\"#3f67a5\"</span>, vehicle);</div><div class=\"line\">            map.setZoomAndCenter(<span class=\"number\">12</span>, [x, y]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>至于导航功能代码我没怎么动，没去研究就不献丑了…</p>\n<p>最后来个效果图。</p>\n<h4 id=\"北京\"><a href=\"#北京\" class=\"headerlink\" title=\"北京\"></a>北京</h4><p><img src=\"http://7xread.com1.z0.glb.clouddn.com/e7900aba-5a56-417c-9dd9-63527583e84b\" alt=\"\"></p>\n<h4 id=\"成都\"><a href=\"#成都\" class=\"headerlink\" title=\"成都\"></a>成都</h4><p><img src=\"http://7xread.com1.z0.glb.clouddn.com/c9947d97-1b76-42bf-82b3-aca817e84e13\" alt=\"\"></p>\n<h4 id=\"苏州\"><a href=\"#苏州\" class=\"headerlink\" title=\"苏州\"></a>苏州</h4><p><img src=\"http://7xread.com1.z0.glb.clouddn.com/941809ae-aa37-4a3b-89c7-10646cc7e3e7\" alt=\"\"></p>\n<h4 id=\"深圳\"><a href=\"#深圳\" class=\"headerlink\" title=\"深圳\"></a>深圳</h4><p><img src=\"http://7xread.com1.z0.glb.clouddn.com/86712397-27ec-4b37-bbf8-81191e530ef6\" alt=\"\"></p>\n","excerpt":"","more":"<p>在线地址：<a href=\"http://codelover.link:8080/\">58同城品牌公寓高德搜房</a></p>\n<p>Github地址：<a href=\"https://github.com/liguobao/58HouseSearch\">https://github.com/liguobao/58HouseSearch</a></p>\n<p>知乎专栏(点赞用的)：<a href=\"https://zhuanlan.zhihu.com/p/21960329\">高德API+Python解决租房问题(.NET版)</a></p>\n<p>经过了一个星期的修补补，以及小伙伴奉献的代码，整个项目基本处于基本稳定运行的状态。</p>\n<p>同时加入了一下新功能：</p>\n<ol>\n<li>IP定位：调用高德地图IP定位功能实现</li>\n<li>移动地图中心定位：调用高德地图移动地图定位实现</li>\n<li>定位城市名转58同城城市名以获得准确58同城城市域名：抓取58同城城市分类信息</li>\n<li>优化数据源、去除广告数据：小伙伴奉献代码</li>\n</ol>\n<p>今天主要简单讲解一下其中使用的一些高德地图API接口。</p>\n<p>高德地图JavaScript API 主体为map对象，基本所有的操作都是通过map对象来实现的。<br>map对象实例化是通过 Amap类来做的。如以下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">map = <span class=\"keyword\">new</span> AMap.Map(<span class=\"string\">\"container\"</span>, &#123;</div><div class=\"line\">        resizeEnable: <span class=\"literal\">true</span>,</div><div class=\"line\">        zoomEnable: <span class=\"literal\">true</span>,</div><div class=\"line\">        center: [<span class=\"number\">121.297428</span>, <span class=\"number\">31.1345</span>],<span class=\"comment\">//经纬度，此处为上海</span></div><div class=\"line\">        zoom: <span class=\"number\">11</span></div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure></p>\n<h4 id=\"IP定位\"><a href=\"#IP定位\" class=\"headerlink\" title=\"IP定位\"></a>IP定位</h4><p>调用Map.CitySearch()获得当前IP所在城市，直接将地图显示成当前城市。代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showCityInfo</span>(<span class=\"params\">map</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//实例化城市查询类</span></div><div class=\"line\">    <span class=\"keyword\">var</span> citysearch = <span class=\"keyword\">new</span> AMap.CitySearch();</div><div class=\"line\">    <span class=\"comment\">//自动获取用户IP，返回当前城市</span></div><div class=\"line\">    citysearch.getLocalCity(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status, result</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (status === <span class=\"string\">'complete'</span> &amp;&amp; result.info === <span class=\"string\">'OK'</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (result &amp;&amp; result.city &amp;&amp; result.bounds) &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> cityinfo = result.city;<span class=\"comment\">//获得XX市</span></div><div class=\"line\">                <span class=\"keyword\">var</span> citybounds = result.bounds;<span class=\"comment\">//用于设置地图显示位置的实例</span></div><div class=\"line\">                cityName = cityinfo.substring(<span class=\"number\">0</span>, cityinfo.length - <span class=\"number\">1</span>);<span class=\"comment\">//去掉市这个字</span></div><div class=\"line\">                ConvertCityCNNameToShortCut();<span class=\"comment\">//城市名转换成58同城城市域名字母，如上海-&gt;sh,苏州-&gt;su,</span></div><div class=\"line\">                                              <span class=\"comment\">//下面会有实现代码</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'IPLocation'</span>).innerHTML = <span class=\"string\">'您当前所在城市：'</span> + cityName;</div><div class=\"line\">                <span class=\"comment\">//地图显示当前城市</span></div><div class=\"line\">                map.setBounds(citybounds);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'IPLocation'</span>).innerHTML = result.info;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"移动地图自动中心定位\"><a href=\"#移动地图自动中心定位\" class=\"headerlink\" title=\"移动地图自动中心定位\"></a>移动地图自动中心定位</h4><p>之前有一版是让用户输入城市名，然后直接定位到输入的城市的。<br>这个功能卡在了设置地图显示位置上，如果是使用高德地图提供的搜索控件的话，又存在输入结果之后搜索结果可能是多个的问题。而且这点我只是要取到用户想要定位的城市而已，感觉没必要做得太复杂。<br>昨晚在看高德地图API的时候发现，有一个移动地图获得地图中心所在位置的样例，马上眼前一亮了。这个功能比我想要的还要好…果断上。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MapMoveToLocationCity</span>(<span class=\"params\"></span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    map.on(<span class=\"string\">'moveend'</span>, getCity);</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCity</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        map.getCity(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (data[<span class=\"string\">'province'</span>] &amp;&amp; <span class=\"keyword\">typeof</span> data[<span class=\"string\">'province'</span>] === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">var</span> cityinfo = (data[<span class=\"string\">'city'</span>] || data[<span class=\"string\">'province'</span>]);</div><div class=\"line\">                cityName = cityinfo.substring(<span class=\"number\">0</span>, cityinfo.length - <span class=\"number\">1</span>);</div><div class=\"line\">                ConvertCityCNNameToShortCut();<span class=\"comment\">//城市名转58同城地区域名</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'IPLocation'</span>).innerHTML = <span class=\"string\">'地图中心所在城市：'</span> + cityName;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>整个代码的意思是，给map绑定一下移动时间，移动完了之后，调用getCity的方法获取当前地图中心所在城市信息。</p>\n<p>这个时候要注意，城市名可能在city对象里面，也可能在province里面。</p>\n<p>原因很简单：普通城市等级就是城市，我国还存在一个和省份一个等级的城市：直辖市。因此直辖市的城市名是在province里面的。</p>\n<h4 id=\"城市名匹配58同城地区域名\"><a href=\"#城市名匹配58同城地区域名\" class=\"headerlink\" title=\"城市名匹配58同城地区域名\"></a>城市名匹配58同城地区域名</h4><p>这个是上个版本(两三天前)的一个bug引出来的新功能。</p>\n<p>上个版本是让用户输入城市名，然后提取城市名的中文拼音首字母作为58同城地区域名。如上海 =sh，广州=gz，北京=bj，成都=cd。</p>\n<p>这个功能使用的是网上别人写的一个JS库，通过汉字匹配实现的。转换出来的数据没什么问题，不过我国汉字实在奥妙。</p>\n<p>广州=gz，赣州=gz；<br>遂宁=sn；绥宁=sn；<br>惠州=hz，杭州=hz。</p>\n<p>这样一来，上面这个做法就没法玩了。</p>\n<p>想了下怎么解决这个问题，灵机一动。反正是在爬58的数据，这个城市名和城市域名数据58同城肯定有啊，然后找到了这个。<br><a href=\"http://www.58.com/changecity.aspx?PGTID=0d100000-0007-a77b-4c4b-a28f725b8f5a&amp;ClickID=1\">58同城城市分类导航</a></p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/c01c293a-d5cc-4f58-80dc-13aa05d47b01\" alt=\"\"></p>\n<p>很明显，我要的所有城市名和城市域名都是里面了。</p>\n<p>晚上和衣衣说了下，衣衣一大早就把处理好的json数据给我了。</p>\n<p>于是来了下面一段代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//加载json文件</span></div><div class=\"line\">$.getJSON(<span class=\"string\">\"DomainJS/city.json\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">      allCityInfo = data;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ConvertCityCNNameToShortCut</span>(<span class=\"params\"></span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> filterarray = $.grep(allCityInfo, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> obj.cityName == cityName;</div><div class=\"line\">    &#125;);<span class=\"comment\">//找到当前城市名对应的json对象</span></div><div class=\"line\">    <span class=\"comment\">//获取json对象的地区域名</span></div><div class=\"line\">    cityNameCNPY = filterarray <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> ? </div><div class=\"line\">    filterarray[<span class=\"number\">0</span>].shortCut : filterarray != <span class=\"literal\">null</span> ? filterarray.shortCut : <span class=\"string\">\"\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"高德地图自动补全功能\"><a href=\"#高德地图自动补全功能\" class=\"headerlink\" title=\"高德地图自动补全功能\"></a>高德地图自动补全功能</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"control-input\"</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"work-location\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:60%\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> auto = <span class=\"keyword\">new</span> AMap.Autocomplete(&#123;</div><div class=\"line\">       input: <span class=\"string\">\"work-location\"</span></div><div class=\"line\">   &#125;);</div><div class=\"line\"></div><div class=\"line\">   AMap.event.addListener(auto, <span class=\"string\">\"select\"</span>, workLocationSelected);</div></pre></td></tr></table></figure>\n<p>看方法前面也知道，其实这就是把ID为work-location的input初始化为地图插件，然后给Amap增加了一个监听事件。<br>当其中选中某一个数据的时候，触发workLocationSelected函数。效果如下：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/fe425992-e7c4-4cae-800e-319eff3b17e8\" alt=\"\"></p>\n<p>在这里locationSelected是定位到所选位置，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">workLocationSelected</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    workAddress = e.poi.name;</div><div class=\"line\">    loadWorkLocation();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadWorkLocation</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    delWorkLocation();</div><div class=\"line\">    <span class=\"keyword\">var</span> geocoder = <span class=\"keyword\">new</span> AMap.Geocoder(&#123;</div><div class=\"line\">        city: cityName,</div><div class=\"line\">        radius: <span class=\"number\">1000</span></div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    geocoder.getLocation(workAddress, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status, result</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (status === <span class=\"string\">\"complete\"</span> &amp;&amp; result.info === <span class=\"string\">'OK'</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> geocode = result.geocodes[<span class=\"number\">0</span>];</div><div class=\"line\">            x = geocode.location.getLng();</div><div class=\"line\">            y = geocode.location.getLat();</div><div class=\"line\">            loadWorkMarker(x, y);</div><div class=\"line\">            loadWorkRange(x, y, <span class=\"number\">60</span>, <span class=\"string\">\"#3f67a5\"</span>, vehicle);</div><div class=\"line\">            map.setZoomAndCenter(<span class=\"number\">12</span>, [x, y]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>至于导航功能代码我没怎么动，没去研究就不献丑了…</p>\n<p>最后来个效果图。</p>\n<h4 id=\"北京\"><a href=\"#北京\" class=\"headerlink\" title=\"北京\"></a>北京</h4><p><img src=\"http://7xread.com1.z0.glb.clouddn.com/e7900aba-5a56-417c-9dd9-63527583e84b\" alt=\"\"></p>\n<h4 id=\"成都\"><a href=\"#成都\" class=\"headerlink\" title=\"成都\"></a>成都</h4><p><img src=\"http://7xread.com1.z0.glb.clouddn.com/c9947d97-1b76-42bf-82b3-aca817e84e13\" alt=\"\"></p>\n<h4 id=\"苏州\"><a href=\"#苏州\" class=\"headerlink\" title=\"苏州\"></a>苏州</h4><p><img src=\"http://7xread.com1.z0.glb.clouddn.com/941809ae-aa37-4a3b-89c7-10646cc7e3e7\" alt=\"\"></p>\n<h4 id=\"深圳\"><a href=\"#深圳\" class=\"headerlink\" title=\"深圳\"></a>深圳</h4><p><img src=\"http://7xread.com1.z0.glb.clouddn.com/86712397-27ec-4b37-bbf8-81191e530ef6\" alt=\"\"></p>\n"},{"layout":"post","title":".NET_58同城品牌公寓爬虫","date":"2016-08-07T16:00:00.000Z","_content":"\n源码地址：[https://github.com/liguobao/58HouseSearch](https://github.com/liguobao/58HouseSearch)\n\n在线地址：[58公寓高德搜房(全国版)：http://codelover.link:8080/](http://codelover.link:8080/)\n\n周末闲着无事刷知乎发现一个爬虫教程（[高德API+Python解决租房问题](https://zhuanlan.zhihu.com/p/21883516)\n），正中最近想要换地方住的痛点。然后大早上懒觉都没睡就屁颠屁颠开始研究这个教程了。这样教程在实验楼网站里面有手把手步骤，有兴趣自取（[实验楼：高德API+Python解决租房问题](https://www.shiyanlou.com/courses/599)）。\n\n整体项目主要分成两步：\n\n第一步:python爬取数据，生成数据文件;\n\n第二步：导入数据文件，在地图上显示房源，设定上班地点后自动计算出行路线和路程时间。\n\n研究了一下这个教程之后发现这货做得实在有点粗糙，只能当教程用，完全没有通用实际价值。\n\n而且这里面还有个更大的问题：教程是基于北京的数据来做的，而我在上海...\n\n虽然说改改python数据源，改改导航页面JS完事。不过是在难用...\n\n于是，开始自己动手了。先看原有的python代码。\n\n\n```python\n\n#-*- coding:utf-8 -*-\nfrom bs4 import BeautifulSoup\nfrom urlparse import urljoin\nimport requests\nimport csv\n\nurl = \"http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000\"\n\n#已完成的页数序号，初时为0\npage = 0\n\ncsv_file = open(\"rent.csv\",\"wb\") \ncsv_writer = csv.writer(csv_file, delimiter=',')\n\nwhile True:\n    page += 1\n    print \"fetch: \", url.format(page=page)\n    response = requests.get(url.format(page=page))\n    html = BeautifulSoup(response.text)\n    house_list = html.select(\".list > li\")\n\n    # 循环在读不到新的房源时结束\n    if not house_list:\n        break\n\n    for house in house_list:\n        house_title = house.select(\"h2\")[0].string.encode(\"utf8\")\n        house_url = urljoin(url, house.select(\"a\")[0][\"href\"])\n        house_info_list = house_title.split()\n\n        # 如果第二列是公寓名则取第一列作为地址\n        if \"公寓\" in house_info_list[1] or \"青年社区\" in house_info_list[1]:\n            house_location = house_info_list[0]\n        else:\n            house_location = house_info_list[1]\n\n        house_money = house.select(\".money\")[0].select(\"b\")[0].string.encode(\"utf8\")\n        csv_writer.writerow([house_title, house_location, house_money, house_url])\n\ncsv_file.close()\n\n```\n整个代码基本思路就是，爬取http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000页面数据，然后扔到创建的csv文件里面作为下一步的数据源。\n通过研究http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000这个页面的数据，我们可以很容易发现，在页面中，每条数据都是一个li标签。\n\n\n如下图：\n\n![](http://7xread.com1.z0.glb.clouddn.com/685849af-2ccc-4454-a26e-e2a1c3001378)\n\n![](http://7xread.com1.z0.glb.clouddn.com/909df442-b1d9-4073-84d0-99a5b3cc9022)\n\n#### li结构如下：\n\n```html\n<li logr=\"\" class=\"\">\n  <a href=\"/pinpaigongyu/26851774057013x.shtml\"\n  target=\"_blank\" onclick=\"clickLog('from=fcpc_list_gy_sh_tupian')\" \n  tongji_label=\"listclick\">\n    <div class=\"img\">\n     <img lazy_src=\"\" alt=\"\" src=\"\">\n    </div>\n        <div class=\"des\">\n            <h2>【合租】菊园新区 柳湖景庭 3室次卧</h2>\n            <p class=\"room\">\n            3室1厅1卫&nbsp; &nbsp; 13m²&nbsp;&nbsp; 3/6层&nbsp; </p>\n            <p class=\"dist\"></p>\n            <p class=\"spec\">\n            <span class=\"spec1\">公共阳台</span>\n            <span class=\"spec2\">公共卫生间</span>\n            <span class=\"spec3\">离地铁近</span>\n            <span class=\"spec4\">厨房</span>\n            </p>\n        </div>\n        <div class=\"money\">\n            <span><b>1100</b>元/月 </span>\n         <p>租房月付</p>\n        </div>\n  </a>\n</li>\n```\n照着python的思路，是把所有的li标签的数据提取出来的。\n\n我自己研究的时候又看了下，其实数据都在一个属性为tongji_label=\"listclick\"的a标签里面。\n\n一般来说，字符匹配用正则表达式完事，奈何正则水平实在不佳。我还是选择直接上HtmlAgilityPack算了。\n关于HtmlAgilityPack的介绍还是看官网算了。[HtmlAgilityPack](http://htmlagilitypack.codeplex.com/)\n\nHtmlAgilityPack是.NET一个比较强大的HTML处理类库了，基本可以让你像JS来操作HTML标签。\n安装这货很简单，直接在Nuget PM包管理工具里面输入下面命令就完事了。\n\n```csharp\nInstall-Package HtmlAgilityPack\n\n```\n有需要使用教程可以看这个：[Html Agility Pack基础类介绍及运用](http://www.cnblogs.com/ITmuse/archive/2010/05/29/1747199.html)\n\n\n下面直接贴control源码算了。\n\n```csharp\n /// </summary>\n /// <param name=\"costFrom\">价格区间起始值</param>\n /// <param name=\"costTo\">价格区间终止值</param>\n /// <param name=\"cnName\">城市拼音首字母</param>\n /// <returns></returns>\n public ActionResult Get58CityRoomData(int costFrom, int costTo, string cnName)\n        {\n            if (costTo<=0 || costTo < costFrom)\n            {\n                return Json(new { IsSuccess = false, Error = \"输入数据有误，请重新输入。\" });\n            }\n\n            if (string.IsNullOrEmpty(cnName))\n            {\n                return Json(new { IsSuccess = false, \n                Error = \"城市定位失败，建议清除浏览器缓存后重新进入。\" });\n            }\n\n            try\n            {\n                var lstHouse = new List<HouseInfo>();\n\n                string tempURL = \"http://\" + \n                cnName + \".58.com/pinpaigongyu//pn/{0}/?minprice=\"\n                + costFrom + \"_\" + costTo;\n\n                Uri uri = new Uri(tempURL);\n\n                var htmlResult = HTTPHelper.GetHTMLByURL(string.Format(tempURL, 1));\n\n                HtmlDocument htmlDoc = new HtmlDocument();\n                htmlDoc.LoadHtml(htmlResult);\n\n                var countNodes = htmlDoc.DocumentNode.\n                SelectSingleNode(\".//span[contains(@class,'list')]\");\n                int pageCount = 10;\n\n                if (countNodes != null && countNodes.HasChildNodes)\n                {\n                    pageCount = Convert.ToInt32(countNodes.ChildNodes[0].InnerText) / 20;\n\n                    if(pageCount==0)\n                    {\n                        return Json(new { IsSuccess = false, \n                        Error =string.Format(\"没有找到价格区间为{0} - {1}的房子。\",\n                        costFrom,costTo)});\n                    }\n                    \n                }\n                for (int pageIndex = 1; pageIndex <= pageCount; pageIndex++)\n                {\n                    htmlResult = HTTPHelper.GetHTMLByURL(string.Format(tempURL, pageIndex));\n                    htmlDoc.LoadHtml(htmlResult);\n                    var roomList = htmlDoc.DocumentNode\n                    .SelectNodes(\".//a[contains(@tongji_label,'listclick')]\");\n                    foreach (var room in roomList)\n                    {\n                        var houseTitle = room.SelectSingleNode(\".//h2\").InnerHtml;\n                        var houseURL = uri.Host + room.Attributes[\"href\"].Value;\n                        var house_info_list = houseTitle.Split(' ');\n                        var house_location = string.Empty;\n                        if (house_info_list[1].Contains(\"公寓\") \n                        || house_info_list[1].Contains(\"青年社区\"))\n                        {\n                            house_location = house_info_list[0];\n                        }\n                        else\n                        {\n                            house_location = house_info_list[1];\n                        }\n                        var momey = room.SelectSingleNode(\".//b\").InnerHtml;\n\n                        lstHouse.Add(new HouseInfo()\n                        {\n                            HouseTitle = houseTitle,\n                            HouseLocation = house_location,\n                            HouseURL = houseURL,\n                            Money = momey,\n                        });\n                    }\n                }\n\n                return Json(new { IsSuccess = true, HouseInfos = lstHouse });\n            }\n            catch (Exception ex)\n            {\n                return Json(new { IsSuccess = false,\n                Error = \"获取数据异常。\" + ex.ToString() });\n            }\n        }\n```\n\n下面解释一下核心代码。\n\n片段一：获取总数。\n\n在观察58同城页面的时候，无意发现其实第一个加载的页面中有一个数据总条数，隐藏在页面里面的。\n```html\n <span class=\"listsum\"><em>1813</em>条结果</span>\n```\n这样一来，总页面就很清晰了。页面=总数/每页20条。然后我们根据已知的数据规则去循环请求页面，也就能拿到所有的搜索数据了。\n\n核心代码，获取总条数。\n```\nvar countNodes = htmlDoc.DocumentNode.\nSelectSingleNode(\".//span[contains(@class,'list')]\");\nint pageCount = 10;\n\nif (countNodes != null && countNodes.HasChildNodes)\n{\n    pageCount = Convert.ToInt32(countNodes.ChildNodes[0].InnerText) / 20;\n\n    if(pageCount==0)\n    {\n        return Json(new { IsSuccess = false, \n        Error =string.Format(\"没有找到价格区间为{0} - {1}的房子。\",\n        costFrom,costTo)});\n    }\n                    \n}\n\n```\n\n在HTMLDoc里面找到一个span的class包含list的节点，获取它子节点（即em）的内容，强制转换成数字，也就是我们要找的总条数了。总条数除以20就得到了页数，下面就是开始循环请求页面了。\n\n在最上面我们分析过公寓数据分布，数据是li里面套a标签，我们需要的地理位置、房间名称、价格都在a标签里面。\n\n这样一来，我们这要获得到页面所有带有属性为tongji_label=\"listclick\"的a标签数据，也就得到了我们所有需要的数据。\n\n看一下a标签的数据组成：\n```html\n\n <a href=\"/pinpaigongyu/26851774057013x.shtml\"\n  target=\"_blank\" onclick=\"clickLog('from=fcpc_list_gy_sh_tupian')\" \n  tongji_label=\"listclick\">\n    <div class=\"img\">\n     <img lazy_src=\"\" alt=\"\" src=\"\">\n    </div>\n        <div class=\"des\">\n            <h2>【合租】菊园新区 柳湖景庭 3室次卧</h2>\n            <p class=\"room\">\n            3室1厅1卫&nbsp; &nbsp; 13m²&nbsp;&nbsp; 3/6层&nbsp; </p>\n            <p class=\"dist\"></p>\n            <p class=\"spec\">\n            <span class=\"spec1\">公共阳台</span>\n            <span class=\"spec2\">公共卫生间</span>\n            <span class=\"spec3\">离地铁近</span>\n            <span class=\"spec4\">厨房</span>\n            </p>\n        </div>\n        <div class=\"money\">\n            <span><b>1100</b>元/月 </span>\n         <p>租房月付</p>\n        </div>\n  </a>\n```\n\n我们要的房间信息在一个h2的标签里面，公寓租金价钱在class=\"money\"的div标签里面。\n\n于是有了一下代码：\n\n```csharp\n\n for (int pageIndex = 1; pageIndex <= pageCount; pageIndex++)\n{\n    htmlResult = HTTPHelper.GetHTMLByURL(string.Format(tempURL, pageIndex));\n    htmlDoc.LoadHtml(htmlResult);\n    //找到所有的带有属性为tongji_label=\"listclick\"的a标签数据\n    var roomList = htmlDoc.DocumentNode.SelectNodes(\".//a[contains(@tongji_label,'listclick')]\");\n    foreach (var room in roomList)\n    {\n        //获取其中为h2的房间数据，然后用空格分割成数组\n        var houseTitle = room.SelectSingleNode(\".//h2\").InnerHtml;\n        var houseURL = uri.Host + room.Attributes[\"href\"].Value;\n        var house_info_list = houseTitle.Split(' ');\n        var house_location = string.Empty;\n        //分割出来的数组，第二个包含公寓或青年社区，则取第一个数据为所在地区，否则取第二个数据\n        //【合租】菊园新区 柳湖景庭 3室次卧 \n        // 所在地区为：菊园新区\n        if (house_info_list[1].Contains(\"公寓\") || house_info_list[1].Contains(\"青年社区\"))\n        {\n            house_location = house_info_list[0];\n        }\n        else\n        {\n            house_location = house_info_list[1];\n        }\n        //获取标签为b的数据，价格就在里面了\n        var momey = room.SelectSingleNode(\".//b\").InnerHtml;\n\n        lstHouse.Add(new HouseInfo()\n        {\n            HouseTitle = houseTitle,\n            HouseLocation = house_location,\n            HouseURL = houseURL,\n            Money = momey,\n        });\n    }\n}\n\n```\n\n后端来说，基本就这些内容了。\n\n还有一些前端高德地图接口调用下次再讲吧，要陪女票玩游戏去了...\n\n^-^\n\n\n\n\n\n\n\n\n\n","source":"_posts/58City-House-Crawler.md","raw":"---\nlayout: post\ntitle: .NET_58同城品牌公寓爬虫\ncategory: .net\ndate: 2016-08-08 00:00:00\ntags:\n- 58City\n- Crawler\n---\n\n源码地址：[https://github.com/liguobao/58HouseSearch](https://github.com/liguobao/58HouseSearch)\n\n在线地址：[58公寓高德搜房(全国版)：http://codelover.link:8080/](http://codelover.link:8080/)\n\n周末闲着无事刷知乎发现一个爬虫教程（[高德API+Python解决租房问题](https://zhuanlan.zhihu.com/p/21883516)\n），正中最近想要换地方住的痛点。然后大早上懒觉都没睡就屁颠屁颠开始研究这个教程了。这样教程在实验楼网站里面有手把手步骤，有兴趣自取（[实验楼：高德API+Python解决租房问题](https://www.shiyanlou.com/courses/599)）。\n\n整体项目主要分成两步：\n\n第一步:python爬取数据，生成数据文件;\n\n第二步：导入数据文件，在地图上显示房源，设定上班地点后自动计算出行路线和路程时间。\n\n研究了一下这个教程之后发现这货做得实在有点粗糙，只能当教程用，完全没有通用实际价值。\n\n而且这里面还有个更大的问题：教程是基于北京的数据来做的，而我在上海...\n\n虽然说改改python数据源，改改导航页面JS完事。不过是在难用...\n\n于是，开始自己动手了。先看原有的python代码。\n\n\n```python\n\n#-*- coding:utf-8 -*-\nfrom bs4 import BeautifulSoup\nfrom urlparse import urljoin\nimport requests\nimport csv\n\nurl = \"http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000\"\n\n#已完成的页数序号，初时为0\npage = 0\n\ncsv_file = open(\"rent.csv\",\"wb\") \ncsv_writer = csv.writer(csv_file, delimiter=',')\n\nwhile True:\n    page += 1\n    print \"fetch: \", url.format(page=page)\n    response = requests.get(url.format(page=page))\n    html = BeautifulSoup(response.text)\n    house_list = html.select(\".list > li\")\n\n    # 循环在读不到新的房源时结束\n    if not house_list:\n        break\n\n    for house in house_list:\n        house_title = house.select(\"h2\")[0].string.encode(\"utf8\")\n        house_url = urljoin(url, house.select(\"a\")[0][\"href\"])\n        house_info_list = house_title.split()\n\n        # 如果第二列是公寓名则取第一列作为地址\n        if \"公寓\" in house_info_list[1] or \"青年社区\" in house_info_list[1]:\n            house_location = house_info_list[0]\n        else:\n            house_location = house_info_list[1]\n\n        house_money = house.select(\".money\")[0].select(\"b\")[0].string.encode(\"utf8\")\n        csv_writer.writerow([house_title, house_location, house_money, house_url])\n\ncsv_file.close()\n\n```\n整个代码基本思路就是，爬取http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000页面数据，然后扔到创建的csv文件里面作为下一步的数据源。\n通过研究http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000这个页面的数据，我们可以很容易发现，在页面中，每条数据都是一个li标签。\n\n\n如下图：\n\n![](http://7xread.com1.z0.glb.clouddn.com/685849af-2ccc-4454-a26e-e2a1c3001378)\n\n![](http://7xread.com1.z0.glb.clouddn.com/909df442-b1d9-4073-84d0-99a5b3cc9022)\n\n#### li结构如下：\n\n```html\n<li logr=\"\" class=\"\">\n  <a href=\"/pinpaigongyu/26851774057013x.shtml\"\n  target=\"_blank\" onclick=\"clickLog('from=fcpc_list_gy_sh_tupian')\" \n  tongji_label=\"listclick\">\n    <div class=\"img\">\n     <img lazy_src=\"\" alt=\"\" src=\"\">\n    </div>\n        <div class=\"des\">\n            <h2>【合租】菊园新区 柳湖景庭 3室次卧</h2>\n            <p class=\"room\">\n            3室1厅1卫&nbsp; &nbsp; 13m²&nbsp;&nbsp; 3/6层&nbsp; </p>\n            <p class=\"dist\"></p>\n            <p class=\"spec\">\n            <span class=\"spec1\">公共阳台</span>\n            <span class=\"spec2\">公共卫生间</span>\n            <span class=\"spec3\">离地铁近</span>\n            <span class=\"spec4\">厨房</span>\n            </p>\n        </div>\n        <div class=\"money\">\n            <span><b>1100</b>元/月 </span>\n         <p>租房月付</p>\n        </div>\n  </a>\n</li>\n```\n照着python的思路，是把所有的li标签的数据提取出来的。\n\n我自己研究的时候又看了下，其实数据都在一个属性为tongji_label=\"listclick\"的a标签里面。\n\n一般来说，字符匹配用正则表达式完事，奈何正则水平实在不佳。我还是选择直接上HtmlAgilityPack算了。\n关于HtmlAgilityPack的介绍还是看官网算了。[HtmlAgilityPack](http://htmlagilitypack.codeplex.com/)\n\nHtmlAgilityPack是.NET一个比较强大的HTML处理类库了，基本可以让你像JS来操作HTML标签。\n安装这货很简单，直接在Nuget PM包管理工具里面输入下面命令就完事了。\n\n```csharp\nInstall-Package HtmlAgilityPack\n\n```\n有需要使用教程可以看这个：[Html Agility Pack基础类介绍及运用](http://www.cnblogs.com/ITmuse/archive/2010/05/29/1747199.html)\n\n\n下面直接贴control源码算了。\n\n```csharp\n /// </summary>\n /// <param name=\"costFrom\">价格区间起始值</param>\n /// <param name=\"costTo\">价格区间终止值</param>\n /// <param name=\"cnName\">城市拼音首字母</param>\n /// <returns></returns>\n public ActionResult Get58CityRoomData(int costFrom, int costTo, string cnName)\n        {\n            if (costTo<=0 || costTo < costFrom)\n            {\n                return Json(new { IsSuccess = false, Error = \"输入数据有误，请重新输入。\" });\n            }\n\n            if (string.IsNullOrEmpty(cnName))\n            {\n                return Json(new { IsSuccess = false, \n                Error = \"城市定位失败，建议清除浏览器缓存后重新进入。\" });\n            }\n\n            try\n            {\n                var lstHouse = new List<HouseInfo>();\n\n                string tempURL = \"http://\" + \n                cnName + \".58.com/pinpaigongyu//pn/{0}/?minprice=\"\n                + costFrom + \"_\" + costTo;\n\n                Uri uri = new Uri(tempURL);\n\n                var htmlResult = HTTPHelper.GetHTMLByURL(string.Format(tempURL, 1));\n\n                HtmlDocument htmlDoc = new HtmlDocument();\n                htmlDoc.LoadHtml(htmlResult);\n\n                var countNodes = htmlDoc.DocumentNode.\n                SelectSingleNode(\".//span[contains(@class,'list')]\");\n                int pageCount = 10;\n\n                if (countNodes != null && countNodes.HasChildNodes)\n                {\n                    pageCount = Convert.ToInt32(countNodes.ChildNodes[0].InnerText) / 20;\n\n                    if(pageCount==0)\n                    {\n                        return Json(new { IsSuccess = false, \n                        Error =string.Format(\"没有找到价格区间为{0} - {1}的房子。\",\n                        costFrom,costTo)});\n                    }\n                    \n                }\n                for (int pageIndex = 1; pageIndex <= pageCount; pageIndex++)\n                {\n                    htmlResult = HTTPHelper.GetHTMLByURL(string.Format(tempURL, pageIndex));\n                    htmlDoc.LoadHtml(htmlResult);\n                    var roomList = htmlDoc.DocumentNode\n                    .SelectNodes(\".//a[contains(@tongji_label,'listclick')]\");\n                    foreach (var room in roomList)\n                    {\n                        var houseTitle = room.SelectSingleNode(\".//h2\").InnerHtml;\n                        var houseURL = uri.Host + room.Attributes[\"href\"].Value;\n                        var house_info_list = houseTitle.Split(' ');\n                        var house_location = string.Empty;\n                        if (house_info_list[1].Contains(\"公寓\") \n                        || house_info_list[1].Contains(\"青年社区\"))\n                        {\n                            house_location = house_info_list[0];\n                        }\n                        else\n                        {\n                            house_location = house_info_list[1];\n                        }\n                        var momey = room.SelectSingleNode(\".//b\").InnerHtml;\n\n                        lstHouse.Add(new HouseInfo()\n                        {\n                            HouseTitle = houseTitle,\n                            HouseLocation = house_location,\n                            HouseURL = houseURL,\n                            Money = momey,\n                        });\n                    }\n                }\n\n                return Json(new { IsSuccess = true, HouseInfos = lstHouse });\n            }\n            catch (Exception ex)\n            {\n                return Json(new { IsSuccess = false,\n                Error = \"获取数据异常。\" + ex.ToString() });\n            }\n        }\n```\n\n下面解释一下核心代码。\n\n片段一：获取总数。\n\n在观察58同城页面的时候，无意发现其实第一个加载的页面中有一个数据总条数，隐藏在页面里面的。\n```html\n <span class=\"listsum\"><em>1813</em>条结果</span>\n```\n这样一来，总页面就很清晰了。页面=总数/每页20条。然后我们根据已知的数据规则去循环请求页面，也就能拿到所有的搜索数据了。\n\n核心代码，获取总条数。\n```\nvar countNodes = htmlDoc.DocumentNode.\nSelectSingleNode(\".//span[contains(@class,'list')]\");\nint pageCount = 10;\n\nif (countNodes != null && countNodes.HasChildNodes)\n{\n    pageCount = Convert.ToInt32(countNodes.ChildNodes[0].InnerText) / 20;\n\n    if(pageCount==0)\n    {\n        return Json(new { IsSuccess = false, \n        Error =string.Format(\"没有找到价格区间为{0} - {1}的房子。\",\n        costFrom,costTo)});\n    }\n                    \n}\n\n```\n\n在HTMLDoc里面找到一个span的class包含list的节点，获取它子节点（即em）的内容，强制转换成数字，也就是我们要找的总条数了。总条数除以20就得到了页数，下面就是开始循环请求页面了。\n\n在最上面我们分析过公寓数据分布，数据是li里面套a标签，我们需要的地理位置、房间名称、价格都在a标签里面。\n\n这样一来，我们这要获得到页面所有带有属性为tongji_label=\"listclick\"的a标签数据，也就得到了我们所有需要的数据。\n\n看一下a标签的数据组成：\n```html\n\n <a href=\"/pinpaigongyu/26851774057013x.shtml\"\n  target=\"_blank\" onclick=\"clickLog('from=fcpc_list_gy_sh_tupian')\" \n  tongji_label=\"listclick\">\n    <div class=\"img\">\n     <img lazy_src=\"\" alt=\"\" src=\"\">\n    </div>\n        <div class=\"des\">\n            <h2>【合租】菊园新区 柳湖景庭 3室次卧</h2>\n            <p class=\"room\">\n            3室1厅1卫&nbsp; &nbsp; 13m²&nbsp;&nbsp; 3/6层&nbsp; </p>\n            <p class=\"dist\"></p>\n            <p class=\"spec\">\n            <span class=\"spec1\">公共阳台</span>\n            <span class=\"spec2\">公共卫生间</span>\n            <span class=\"spec3\">离地铁近</span>\n            <span class=\"spec4\">厨房</span>\n            </p>\n        </div>\n        <div class=\"money\">\n            <span><b>1100</b>元/月 </span>\n         <p>租房月付</p>\n        </div>\n  </a>\n```\n\n我们要的房间信息在一个h2的标签里面，公寓租金价钱在class=\"money\"的div标签里面。\n\n于是有了一下代码：\n\n```csharp\n\n for (int pageIndex = 1; pageIndex <= pageCount; pageIndex++)\n{\n    htmlResult = HTTPHelper.GetHTMLByURL(string.Format(tempURL, pageIndex));\n    htmlDoc.LoadHtml(htmlResult);\n    //找到所有的带有属性为tongji_label=\"listclick\"的a标签数据\n    var roomList = htmlDoc.DocumentNode.SelectNodes(\".//a[contains(@tongji_label,'listclick')]\");\n    foreach (var room in roomList)\n    {\n        //获取其中为h2的房间数据，然后用空格分割成数组\n        var houseTitle = room.SelectSingleNode(\".//h2\").InnerHtml;\n        var houseURL = uri.Host + room.Attributes[\"href\"].Value;\n        var house_info_list = houseTitle.Split(' ');\n        var house_location = string.Empty;\n        //分割出来的数组，第二个包含公寓或青年社区，则取第一个数据为所在地区，否则取第二个数据\n        //【合租】菊园新区 柳湖景庭 3室次卧 \n        // 所在地区为：菊园新区\n        if (house_info_list[1].Contains(\"公寓\") || house_info_list[1].Contains(\"青年社区\"))\n        {\n            house_location = house_info_list[0];\n        }\n        else\n        {\n            house_location = house_info_list[1];\n        }\n        //获取标签为b的数据，价格就在里面了\n        var momey = room.SelectSingleNode(\".//b\").InnerHtml;\n\n        lstHouse.Add(new HouseInfo()\n        {\n            HouseTitle = houseTitle,\n            HouseLocation = house_location,\n            HouseURL = houseURL,\n            Money = momey,\n        });\n    }\n}\n\n```\n\n后端来说，基本就这些内容了。\n\n还有一些前端高德地图接口调用下次再讲吧，要陪女票玩游戏去了...\n\n^-^\n\n\n\n\n\n\n\n\n\n","slug":"58City-House-Crawler","published":1,"updated":"2016-10-15T05:20:24.496Z","comments":1,"photos":[],"link":"","_id":"cj0dyumv200026kunea50esi5","content":"<p>源码地址：<a href=\"https://github.com/liguobao/58HouseSearch\" target=\"_blank\" rel=\"external\">https://github.com/liguobao/58HouseSearch</a></p>\n<p>在线地址：<a href=\"http://codelover.link:8080/\">58公寓高德搜房(全国版)：http://codelover.link:8080/</a></p>\n<p>周末闲着无事刷知乎发现一个爬虫教程（<a href=\"https://zhuanlan.zhihu.com/p/21883516\" target=\"_blank\" rel=\"external\">高德API+Python解决租房问题</a><br>），正中最近想要换地方住的痛点。然后大早上懒觉都没睡就屁颠屁颠开始研究这个教程了。这样教程在实验楼网站里面有手把手步骤，有兴趣自取（<a href=\"https://www.shiyanlou.com/courses/599\" target=\"_blank\" rel=\"external\">实验楼：高德API+Python解决租房问题</a>）。</p>\n<p>整体项目主要分成两步：</p>\n<p>第一步:python爬取数据，生成数据文件;</p>\n<p>第二步：导入数据文件，在地图上显示房源，设定上班地点后自动计算出行路线和路程时间。</p>\n<p>研究了一下这个教程之后发现这货做得实在有点粗糙，只能当教程用，完全没有通用实际价值。</p>\n<p>而且这里面还有个更大的问题：教程是基于北京的数据来做的，而我在上海…</p>\n<p>虽然说改改python数据源，改改导航页面JS完事。不过是在难用…</p>\n<p>于是，开始自己动手了。先看原有的python代码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-*- coding:utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</div><div class=\"line\"><span class=\"keyword\">from</span> urlparse <span class=\"keyword\">import</span> urljoin</div><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"><span class=\"keyword\">import</span> csv</div><div class=\"line\"></div><div class=\"line\">url = <span class=\"string\">\"http://bj.58.com/pinpaigongyu/pn/&#123;page&#125;/?minprice=2000_4000\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#已完成的页数序号，初时为0</span></div><div class=\"line\">page = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">csv_file = open(<span class=\"string\">\"rent.csv\"</span>,<span class=\"string\">\"wb\"</span>) </div><div class=\"line\">csv_writer = csv.writer(csv_file, delimiter=<span class=\"string\">','</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">    page += <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"fetch: \"</span>, url.format(page=page)</div><div class=\"line\">    response = requests.get(url.format(page=page))</div><div class=\"line\">    html = BeautifulSoup(response.text)</div><div class=\"line\">    house_list = html.select(<span class=\"string\">\".list &gt; li\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 循环在读不到新的房源时结束</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> house_list:</div><div class=\"line\">        <span class=\"keyword\">break</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> house <span class=\"keyword\">in</span> house_list:</div><div class=\"line\">        house_title = house.select(<span class=\"string\">\"h2\"</span>)[<span class=\"number\">0</span>].string.encode(<span class=\"string\">\"utf8\"</span>)</div><div class=\"line\">        house_url = urljoin(url, house.select(<span class=\"string\">\"a\"</span>)[<span class=\"number\">0</span>][<span class=\"string\">\"href\"</span>])</div><div class=\"line\">        house_info_list = house_title.split()</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># 如果第二列是公寓名则取第一列作为地址</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">\"公寓\"</span> <span class=\"keyword\">in</span> house_info_list[<span class=\"number\">1</span>] <span class=\"keyword\">or</span> <span class=\"string\">\"青年社区\"</span> <span class=\"keyword\">in</span> house_info_list[<span class=\"number\">1</span>]:</div><div class=\"line\">            house_location = house_info_list[<span class=\"number\">0</span>]</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            house_location = house_info_list[<span class=\"number\">1</span>]</div><div class=\"line\"></div><div class=\"line\">        house_money = house.select(<span class=\"string\">\".money\"</span>)[<span class=\"number\">0</span>].select(<span class=\"string\">\"b\"</span>)[<span class=\"number\">0</span>].string.encode(<span class=\"string\">\"utf8\"</span>)</div><div class=\"line\">        csv_writer.writerow([house_title, house_location, house_money, house_url])</div><div class=\"line\"></div><div class=\"line\">csv_file.close()</div></pre></td></tr></table></figure>\n<p>整个代码基本思路就是，爬取<a href=\"http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000页面数据，然后扔到创建的csv文件里面作为下一步的数据源。\" target=\"_blank\" rel=\"external\">http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000页面数据，然后扔到创建的csv文件里面作为下一步的数据源。</a><br>通过研究<a href=\"http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000这个页面的数据，我们可以很容易发现，在页面中，每条数据都是一个li标签。\" target=\"_blank\" rel=\"external\">http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000这个页面的数据，我们可以很容易发现，在页面中，每条数据都是一个li标签。</a></p>\n<p>如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/685849af-2ccc-4454-a26e-e2a1c3001378\" alt=\"\"></p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/909df442-b1d9-4073-84d0-99a5b3cc9022\" alt=\"\"></p>\n<h4 id=\"li结构如下：\"><a href=\"#li结构如下：\" class=\"headerlink\" title=\"li结构如下：\"></a>li结构如下：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">logr</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/pinpaigongyu/26851774057013x.shtml\"</span></span></div><div class=\"line\">  <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"clickLog('from=fcpc_list_gy_sh_tupian')\"</span> </div><div class=\"line\">  <span class=\"attr\">tongji_label</span>=<span class=\"string\">\"listclick\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">lazy_src</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"des\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>【合租】菊园新区 柳湖景庭 3室次卧<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"room\"</span>&gt;</span></div><div class=\"line\">            3室1厅1卫&amp;nbsp; &amp;nbsp; 13m²&amp;nbsp;&amp;nbsp; 3/6层&amp;nbsp; <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dist\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec1\"</span>&gt;</span>公共阳台<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec2\"</span>&gt;</span>公共卫生间<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec3\"</span>&gt;</span>离地铁近<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec4\"</span>&gt;</span>厨房<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"money\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>1100<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span>元/月 <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>租房月付<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>照着python的思路，是把所有的li标签的数据提取出来的。</p>\n<p>我自己研究的时候又看了下，其实数据都在一个属性为tongji_label=”listclick”的a标签里面。</p>\n<p>一般来说，字符匹配用正则表达式完事，奈何正则水平实在不佳。我还是选择直接上HtmlAgilityPack算了。<br>关于HtmlAgilityPack的介绍还是看官网算了。<a href=\"http://htmlagilitypack.codeplex.com/\" target=\"_blank\" rel=\"external\">HtmlAgilityPack</a></p>\n<p>HtmlAgilityPack是.NET一个比较强大的HTML处理类库了，基本可以让你像JS来操作HTML标签。<br>安装这货很简单，直接在Nuget PM包管理工具里面输入下面命令就完事了。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Install-Package HtmlAgilityPack</div></pre></td></tr></table></figure>\n<p>有需要使用教程可以看这个：<a href=\"http://www.cnblogs.com/ITmuse/archive/2010/05/29/1747199.html\" target=\"_blank\" rel=\"external\">Html Agility Pack基础类介绍及运用</a></p>\n<p>下面直接贴control源码算了。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></div><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"costFrom\"&gt;</span>价格区间起始值<span class=\"doctag\">&lt;/param&gt;</span></span></div><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"costTo\"&gt;</span>价格区间终止值<span class=\"doctag\">&lt;/param&gt;</span></span></div><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"cnName\"&gt;</span>城市拼音首字母<span class=\"doctag\">&lt;/param&gt;</span></span></div><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">Get58CityRoomData</span>(<span class=\"params\"><span class=\"keyword\">int</span> costFrom, <span class=\"keyword\">int</span> costTo, <span class=\"keyword\">string</span> cnName</span>)</span></div><div class=\"line\">       &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (costTo&lt;=<span class=\"number\">0</span> || costTo &lt; costFrom)</div><div class=\"line\">           &#123;</div><div class=\"line\">               <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; IsSuccess = <span class=\"literal\">false</span>, Error = <span class=\"string\">\"输入数据有误，请重新输入。\"</span> &#125;);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(cnName))</div><div class=\"line\">           &#123;</div><div class=\"line\">               <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; IsSuccess = <span class=\"literal\">false</span>, </div><div class=\"line\">               Error = <span class=\"string\">\"城市定位失败，建议清除浏览器缓存后重新进入。\"</span> &#125;);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">try</span></div><div class=\"line\">           &#123;</div><div class=\"line\">               <span class=\"keyword\">var</span> lstHouse = <span class=\"keyword\">new</span> List&lt;HouseInfo&gt;();</div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">string</span> tempURL = <span class=\"string\">\"http://\"</span> + </div><div class=\"line\">               cnName + <span class=\"string\">\".58.com/pinpaigongyu//pn/&#123;0&#125;/?minprice=\"</span></div><div class=\"line\">               + costFrom + <span class=\"string\">\"_\"</span> + costTo;</div><div class=\"line\"></div><div class=\"line\">               Uri uri = <span class=\"keyword\">new</span> Uri(tempURL);</div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">var</span> htmlResult = HTTPHelper.GetHTMLByURL(<span class=\"keyword\">string</span>.Format(tempURL, <span class=\"number\">1</span>));</div><div class=\"line\"></div><div class=\"line\">               HtmlDocument htmlDoc = <span class=\"keyword\">new</span> HtmlDocument();</div><div class=\"line\">               htmlDoc.LoadHtml(htmlResult);</div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">var</span> countNodes = htmlDoc.DocumentNode.</div><div class=\"line\">               SelectSingleNode(<span class=\"string\">\".//span[contains(@class,'list')]\"</span>);</div><div class=\"line\">               <span class=\"keyword\">int</span> pageCount = <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">if</span> (countNodes != <span class=\"literal\">null</span> &amp;&amp; countNodes.HasChildNodes)</div><div class=\"line\">               &#123;</div><div class=\"line\">                   pageCount = Convert.ToInt32(countNodes.ChildNodes[<span class=\"number\">0</span>].InnerText) / <span class=\"number\">20</span>;</div><div class=\"line\"></div><div class=\"line\">                   <span class=\"keyword\">if</span>(pageCount==<span class=\"number\">0</span>)</div><div class=\"line\">                   &#123;</div><div class=\"line\">                       <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; IsSuccess = <span class=\"literal\">false</span>, </div><div class=\"line\">                       Error =<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"没有找到价格区间为&#123;0&#125; - &#123;1&#125;的房子。\"</span>,</div><div class=\"line\">                       costFrom,costTo)&#125;);</div><div class=\"line\">                   &#125;</div><div class=\"line\">                   </div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> pageIndex = <span class=\"number\">1</span>; pageIndex &lt;= pageCount; pageIndex++)</div><div class=\"line\">               &#123;</div><div class=\"line\">                   htmlResult = HTTPHelper.GetHTMLByURL(<span class=\"keyword\">string</span>.Format(tempURL, pageIndex));</div><div class=\"line\">                   htmlDoc.LoadHtml(htmlResult);</div><div class=\"line\">                   <span class=\"keyword\">var</span> roomList = htmlDoc.DocumentNode</div><div class=\"line\">                   .SelectNodes(<span class=\"string\">\".//a[contains(@tongji_label,'listclick')]\"</span>);</div><div class=\"line\">                   <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> room <span class=\"keyword\">in</span> roomList)</div><div class=\"line\">                   &#123;</div><div class=\"line\">                       <span class=\"keyword\">var</span> houseTitle = room.SelectSingleNode(<span class=\"string\">\".//h2\"</span>).InnerHtml;</div><div class=\"line\">                       <span class=\"keyword\">var</span> houseURL = uri.Host + room.Attributes[<span class=\"string\">\"href\"</span>].Value;</div><div class=\"line\">                       <span class=\"keyword\">var</span> house_info_list = houseTitle.Split(<span class=\"string\">' '</span>);</div><div class=\"line\">                       <span class=\"keyword\">var</span> house_location = <span class=\"keyword\">string</span>.Empty;</div><div class=\"line\">                       <span class=\"keyword\">if</span> (house_info_list[<span class=\"number\">1</span>].Contains(<span class=\"string\">\"公寓\"</span>) </div><div class=\"line\">                       || house_info_list[<span class=\"number\">1</span>].Contains(<span class=\"string\">\"青年社区\"</span>))</div><div class=\"line\">                       &#123;</div><div class=\"line\">                           house_location = house_info_list[<span class=\"number\">0</span>];</div><div class=\"line\">                       &#125;</div><div class=\"line\">                       <span class=\"keyword\">else</span></div><div class=\"line\">                       &#123;</div><div class=\"line\">                           house_location = house_info_list[<span class=\"number\">1</span>];</div><div class=\"line\">                       &#125;</div><div class=\"line\">                       <span class=\"keyword\">var</span> momey = room.SelectSingleNode(<span class=\"string\">\".//b\"</span>).InnerHtml;</div><div class=\"line\"></div><div class=\"line\">                       lstHouse.Add(<span class=\"keyword\">new</span> HouseInfo()</div><div class=\"line\">                       &#123;</div><div class=\"line\">                           HouseTitle = houseTitle,</div><div class=\"line\">                           HouseLocation = house_location,</div><div class=\"line\">                           HouseURL = houseURL,</div><div class=\"line\">                           Money = momey,</div><div class=\"line\">                       &#125;);</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; IsSuccess = <span class=\"literal\">true</span>, HouseInfos = lstHouse &#125;);</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">catch</span> (Exception ex)</div><div class=\"line\">           &#123;</div><div class=\"line\">               <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; IsSuccess = <span class=\"literal\">false</span>,</div><div class=\"line\">               Error = <span class=\"string\">\"获取数据异常。\"</span> + ex.ToString() &#125;);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n<p>下面解释一下核心代码。</p>\n<p>片段一：获取总数。</p>\n<p>在观察58同城页面的时候，无意发现其实第一个加载的页面中有一个数据总条数，隐藏在页面里面的。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"listsum\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>1813<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span>条结果<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这样一来，总页面就很清晰了。页面=总数/每页20条。然后我们根据已知的数据规则去循环请求页面，也就能拿到所有的搜索数据了。</p>\n<p>核心代码，获取总条数。<br><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">var <span class=\"attr\">countNodes</span> = htmlDoc.DocumentNode.</div><div class=\"line\">SelectSingleNode(<span class=\"string\">\".//span[contains(@class,'list')]\"</span>);</div><div class=\"line\">int <span class=\"attr\">pageCount</span> = <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (countNodes != <span class=\"literal\">null</span> &amp;&amp; countNodes.HasChildNodes)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">pageCount</span> = Convert.ToInt32(countNodes.ChildNodes[<span class=\"number\">0</span>].InnerText) / <span class=\"number\">20</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"attr\">pageCount==0)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        return Json(new &#123; <span class=\"attr\">IsSuccess</span> = <span class=\"literal\">false</span>, </div><div class=\"line\">        <span class=\"attr\">Error</span> =string.Format(<span class=\"string\">\"没有找到价格区间为&#123;0&#125; - &#123;1&#125;的房子。\"</span>,</div><div class=\"line\">        costFrom,costTo)&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">                    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在HTMLDoc里面找到一个span的class包含list的节点，获取它子节点（即em）的内容，强制转换成数字，也就是我们要找的总条数了。总条数除以20就得到了页数，下面就是开始循环请求页面了。</p>\n<p>在最上面我们分析过公寓数据分布，数据是li里面套a标签，我们需要的地理位置、房间名称、价格都在a标签里面。</p>\n<p>这样一来，我们这要获得到页面所有带有属性为tongji_label=”listclick”的a标签数据，也就得到了我们所有需要的数据。</p>\n<p>看一下a标签的数据组成：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/pinpaigongyu/26851774057013x.shtml\"</span></span></div><div class=\"line\"> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"clickLog('from=fcpc_list_gy_sh_tupian')\"</span> </div><div class=\"line\"> <span class=\"attr\">tongji_label</span>=<span class=\"string\">\"listclick\"</span>&gt;</div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">lazy_src</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"des\"</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>【合租】菊园新区 柳湖景庭 3室次卧<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"room\"</span>&gt;</span></div><div class=\"line\">           3室1厅1卫&amp;nbsp; &amp;nbsp; 13m²&amp;nbsp;&amp;nbsp; 3/6层&amp;nbsp; <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dist\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec\"</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec1\"</span>&gt;</span>公共阳台<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec2\"</span>&gt;</span>公共卫生间<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec3\"</span>&gt;</span>离地铁近<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec4\"</span>&gt;</span>厨房<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"money\"</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>1100<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span>元/月 <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>租房月付<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>我们要的房间信息在一个h2的标签里面，公寓租金价钱在class=”money”的div标签里面。</p>\n<p>于是有了一下代码：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> pageIndex = <span class=\"number\">1</span>; pageIndex &lt;= pageCount; pageIndex++)</div><div class=\"line\">&#123;</div><div class=\"line\">    htmlResult = HTTPHelper.GetHTMLByURL(<span class=\"keyword\">string</span>.Format(tempURL, pageIndex));</div><div class=\"line\">    htmlDoc.LoadHtml(htmlResult);</div><div class=\"line\">    <span class=\"comment\">//找到所有的带有属性为tongji_label=\"listclick\"的a标签数据</span></div><div class=\"line\">    <span class=\"keyword\">var</span> roomList = htmlDoc.DocumentNode.SelectNodes(<span class=\"string\">\".//a[contains(@tongji_label,'listclick')]\"</span>);</div><div class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> room <span class=\"keyword\">in</span> roomList)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">//获取其中为h2的房间数据，然后用空格分割成数组</span></div><div class=\"line\">        <span class=\"keyword\">var</span> houseTitle = room.SelectSingleNode(<span class=\"string\">\".//h2\"</span>).InnerHtml;</div><div class=\"line\">        <span class=\"keyword\">var</span> houseURL = uri.Host + room.Attributes[<span class=\"string\">\"href\"</span>].Value;</div><div class=\"line\">        <span class=\"keyword\">var</span> house_info_list = houseTitle.Split(<span class=\"string\">' '</span>);</div><div class=\"line\">        <span class=\"keyword\">var</span> house_location = <span class=\"keyword\">string</span>.Empty;</div><div class=\"line\">        <span class=\"comment\">//分割出来的数组，第二个包含公寓或青年社区，则取第一个数据为所在地区，否则取第二个数据</span></div><div class=\"line\">        <span class=\"comment\">//【合租】菊园新区 柳湖景庭 3室次卧 </span></div><div class=\"line\">        <span class=\"comment\">// 所在地区为：菊园新区</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (house_info_list[<span class=\"number\">1</span>].Contains(<span class=\"string\">\"公寓\"</span>) || house_info_list[<span class=\"number\">1</span>].Contains(<span class=\"string\">\"青年社区\"</span>))</div><div class=\"line\">        &#123;</div><div class=\"line\">            house_location = house_info_list[<span class=\"number\">0</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            house_location = house_info_list[<span class=\"number\">1</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//获取标签为b的数据，价格就在里面了</span></div><div class=\"line\">        <span class=\"keyword\">var</span> momey = room.SelectSingleNode(<span class=\"string\">\".//b\"</span>).InnerHtml;</div><div class=\"line\"></div><div class=\"line\">        lstHouse.Add(<span class=\"keyword\">new</span> HouseInfo()</div><div class=\"line\">        &#123;</div><div class=\"line\">            HouseTitle = houseTitle,</div><div class=\"line\">            HouseLocation = house_location,</div><div class=\"line\">            HouseURL = houseURL,</div><div class=\"line\">            Money = momey,</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>后端来说，基本就这些内容了。</p>\n<p>还有一些前端高德地图接口调用下次再讲吧，要陪女票玩游戏去了…</p>\n<p>^-^</p>\n","excerpt":"","more":"<p>源码地址：<a href=\"https://github.com/liguobao/58HouseSearch\">https://github.com/liguobao/58HouseSearch</a></p>\n<p>在线地址：<a href=\"http://codelover.link:8080/\">58公寓高德搜房(全国版)：http://codelover.link:8080/</a></p>\n<p>周末闲着无事刷知乎发现一个爬虫教程（<a href=\"https://zhuanlan.zhihu.com/p/21883516\">高德API+Python解决租房问题</a><br>），正中最近想要换地方住的痛点。然后大早上懒觉都没睡就屁颠屁颠开始研究这个教程了。这样教程在实验楼网站里面有手把手步骤，有兴趣自取（<a href=\"https://www.shiyanlou.com/courses/599\">实验楼：高德API+Python解决租房问题</a>）。</p>\n<p>整体项目主要分成两步：</p>\n<p>第一步:python爬取数据，生成数据文件;</p>\n<p>第二步：导入数据文件，在地图上显示房源，设定上班地点后自动计算出行路线和路程时间。</p>\n<p>研究了一下这个教程之后发现这货做得实在有点粗糙，只能当教程用，完全没有通用实际价值。</p>\n<p>而且这里面还有个更大的问题：教程是基于北京的数据来做的，而我在上海…</p>\n<p>虽然说改改python数据源，改改导航页面JS完事。不过是在难用…</p>\n<p>于是，开始自己动手了。先看原有的python代码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-*- coding:utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</div><div class=\"line\"><span class=\"keyword\">from</span> urlparse <span class=\"keyword\">import</span> urljoin</div><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"><span class=\"keyword\">import</span> csv</div><div class=\"line\"></div><div class=\"line\">url = <span class=\"string\">\"http://bj.58.com/pinpaigongyu/pn/&#123;page&#125;/?minprice=2000_4000\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#已完成的页数序号，初时为0</span></div><div class=\"line\">page = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">csv_file = open(<span class=\"string\">\"rent.csv\"</span>,<span class=\"string\">\"wb\"</span>) </div><div class=\"line\">csv_writer = csv.writer(csv_file, delimiter=<span class=\"string\">','</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">    page += <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"fetch: \"</span>, url.format(page=page)</div><div class=\"line\">    response = requests.get(url.format(page=page))</div><div class=\"line\">    html = BeautifulSoup(response.text)</div><div class=\"line\">    house_list = html.select(<span class=\"string\">\".list &gt; li\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 循环在读不到新的房源时结束</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> house_list:</div><div class=\"line\">        <span class=\"keyword\">break</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> house <span class=\"keyword\">in</span> house_list:</div><div class=\"line\">        house_title = house.select(<span class=\"string\">\"h2\"</span>)[<span class=\"number\">0</span>].string.encode(<span class=\"string\">\"utf8\"</span>)</div><div class=\"line\">        house_url = urljoin(url, house.select(<span class=\"string\">\"a\"</span>)[<span class=\"number\">0</span>][<span class=\"string\">\"href\"</span>])</div><div class=\"line\">        house_info_list = house_title.split()</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># 如果第二列是公寓名则取第一列作为地址</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">\"公寓\"</span> <span class=\"keyword\">in</span> house_info_list[<span class=\"number\">1</span>] <span class=\"keyword\">or</span> <span class=\"string\">\"青年社区\"</span> <span class=\"keyword\">in</span> house_info_list[<span class=\"number\">1</span>]:</div><div class=\"line\">            house_location = house_info_list[<span class=\"number\">0</span>]</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            house_location = house_info_list[<span class=\"number\">1</span>]</div><div class=\"line\"></div><div class=\"line\">        house_money = house.select(<span class=\"string\">\".money\"</span>)[<span class=\"number\">0</span>].select(<span class=\"string\">\"b\"</span>)[<span class=\"number\">0</span>].string.encode(<span class=\"string\">\"utf8\"</span>)</div><div class=\"line\">        csv_writer.writerow([house_title, house_location, house_money, house_url])</div><div class=\"line\"></div><div class=\"line\">csv_file.close()</div></pre></td></tr></table></figure>\n<p>整个代码基本思路就是，爬取<a href=\"http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000页面数据，然后扔到创建的csv文件里面作为下一步的数据源。\">http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000页面数据，然后扔到创建的csv文件里面作为下一步的数据源。</a><br>通过研究<a href=\"http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000这个页面的数据，我们可以很容易发现，在页面中，每条数据都是一个li标签。\">http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000这个页面的数据，我们可以很容易发现，在页面中，每条数据都是一个li标签。</a></p>\n<p>如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/685849af-2ccc-4454-a26e-e2a1c3001378\" alt=\"\"></p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/909df442-b1d9-4073-84d0-99a5b3cc9022\" alt=\"\"></p>\n<h4 id=\"li结构如下：\"><a href=\"#li结构如下：\" class=\"headerlink\" title=\"li结构如下：\"></a>li结构如下：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">logr</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/pinpaigongyu/26851774057013x.shtml\"</span></div><div class=\"line\">  <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"clickLog('from=fcpc_list_gy_sh_tupian')\"</span> </div><div class=\"line\">  <span class=\"attr\">tongji_label</span>=<span class=\"string\">\"listclick\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">lazy_src</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"des\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>【合租】菊园新区 柳湖景庭 3室次卧<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"room\"</span>&gt;</span></div><div class=\"line\">            3室1厅1卫&amp;nbsp; &amp;nbsp; 13m²&amp;nbsp;&amp;nbsp; 3/6层&amp;nbsp; <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dist\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec1\"</span>&gt;</span>公共阳台<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec2\"</span>&gt;</span>公共卫生间<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec3\"</span>&gt;</span>离地铁近<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec4\"</span>&gt;</span>厨房<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"money\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>1100<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span>元/月 <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>租房月付<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>照着python的思路，是把所有的li标签的数据提取出来的。</p>\n<p>我自己研究的时候又看了下，其实数据都在一个属性为tongji_label=”listclick”的a标签里面。</p>\n<p>一般来说，字符匹配用正则表达式完事，奈何正则水平实在不佳。我还是选择直接上HtmlAgilityPack算了。<br>关于HtmlAgilityPack的介绍还是看官网算了。<a href=\"http://htmlagilitypack.codeplex.com/\">HtmlAgilityPack</a></p>\n<p>HtmlAgilityPack是.NET一个比较强大的HTML处理类库了，基本可以让你像JS来操作HTML标签。<br>安装这货很简单，直接在Nuget PM包管理工具里面输入下面命令就完事了。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Install-Package HtmlAgilityPack</div></pre></td></tr></table></figure>\n<p>有需要使用教程可以看这个：<a href=\"http://www.cnblogs.com/ITmuse/archive/2010/05/29/1747199.html\">Html Agility Pack基础类介绍及运用</a></p>\n<p>下面直接贴control源码算了。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></div><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"costFrom\"&gt;</span>价格区间起始值<span class=\"doctag\">&lt;/param&gt;</span></span></div><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"costTo\"&gt;</span>价格区间终止值<span class=\"doctag\">&lt;/param&gt;</span></span></div><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"cnName\"&gt;</span>城市拼音首字母<span class=\"doctag\">&lt;/param&gt;</span></span></div><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">Get58CityRoomData</span>(<span class=\"params\"><span class=\"keyword\">int</span> costFrom, <span class=\"keyword\">int</span> costTo, <span class=\"keyword\">string</span> cnName</span>)</div><div class=\"line\">       </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (costTo&lt;=<span class=\"number\">0</span> || costTo &lt; costFrom)</div><div class=\"line\">           &#123;</div><div class=\"line\">               <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; IsSuccess = <span class=\"literal\">false</span>, Error = <span class=\"string\">\"输入数据有误，请重新输入。\"</span> &#125;);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(cnName))</div><div class=\"line\">           &#123;</div><div class=\"line\">               <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; IsSuccess = <span class=\"literal\">false</span>, </div><div class=\"line\">               Error = <span class=\"string\">\"城市定位失败，建议清除浏览器缓存后重新进入。\"</span> &#125;);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">try</span></div><div class=\"line\">           &#123;</div><div class=\"line\">               <span class=\"keyword\">var</span> lstHouse = <span class=\"keyword\">new</span> List&lt;HouseInfo&gt;();</div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">string</span> tempURL = <span class=\"string\">\"http://\"</span> + </div><div class=\"line\">               cnName + <span class=\"string\">\".58.com/pinpaigongyu//pn/&#123;0&#125;/?minprice=\"</span></div><div class=\"line\">               + costFrom + <span class=\"string\">\"_\"</span> + costTo;</div><div class=\"line\"></div><div class=\"line\">               Uri uri = <span class=\"keyword\">new</span> Uri(tempURL);</div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">var</span> htmlResult = HTTPHelper.GetHTMLByURL(<span class=\"keyword\">string</span>.Format(tempURL, <span class=\"number\">1</span>));</div><div class=\"line\"></div><div class=\"line\">               HtmlDocument htmlDoc = <span class=\"keyword\">new</span> HtmlDocument();</div><div class=\"line\">               htmlDoc.LoadHtml(htmlResult);</div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">var</span> countNodes = htmlDoc.DocumentNode.</div><div class=\"line\">               SelectSingleNode(<span class=\"string\">\".//span[contains(@class,'list')]\"</span>);</div><div class=\"line\">               <span class=\"keyword\">int</span> pageCount = <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">if</span> (countNodes != <span class=\"literal\">null</span> &amp;&amp; countNodes.HasChildNodes)</div><div class=\"line\">               &#123;</div><div class=\"line\">                   pageCount = Convert.ToInt32(countNodes.ChildNodes[<span class=\"number\">0</span>].InnerText) / <span class=\"number\">20</span>;</div><div class=\"line\"></div><div class=\"line\">                   <span class=\"keyword\">if</span>(pageCount==<span class=\"number\">0</span>)</div><div class=\"line\">                   &#123;</div><div class=\"line\">                       <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; IsSuccess = <span class=\"literal\">false</span>, </div><div class=\"line\">                       Error =<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"没有找到价格区间为&#123;0&#125; - &#123;1&#125;的房子。\"</span>,</div><div class=\"line\">                       costFrom,costTo)&#125;);</div><div class=\"line\">                   &#125;</div><div class=\"line\">                   </div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> pageIndex = <span class=\"number\">1</span>; pageIndex &lt;= pageCount; pageIndex++)</div><div class=\"line\">               &#123;</div><div class=\"line\">                   htmlResult = HTTPHelper.GetHTMLByURL(<span class=\"keyword\">string</span>.Format(tempURL, pageIndex));</div><div class=\"line\">                   htmlDoc.LoadHtml(htmlResult);</div><div class=\"line\">                   <span class=\"keyword\">var</span> roomList = htmlDoc.DocumentNode</div><div class=\"line\">                   .SelectNodes(<span class=\"string\">\".//a[contains(@tongji_label,'listclick')]\"</span>);</div><div class=\"line\">                   <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> room <span class=\"keyword\">in</span> roomList)</div><div class=\"line\">                   &#123;</div><div class=\"line\">                       <span class=\"keyword\">var</span> houseTitle = room.SelectSingleNode(<span class=\"string\">\".//h2\"</span>).InnerHtml;</div><div class=\"line\">                       <span class=\"keyword\">var</span> houseURL = uri.Host + room.Attributes[<span class=\"string\">\"href\"</span>].Value;</div><div class=\"line\">                       <span class=\"keyword\">var</span> house_info_list = houseTitle.Split(<span class=\"string\">' '</span>);</div><div class=\"line\">                       <span class=\"keyword\">var</span> house_location = <span class=\"keyword\">string</span>.Empty;</div><div class=\"line\">                       <span class=\"keyword\">if</span> (house_info_list[<span class=\"number\">1</span>].Contains(<span class=\"string\">\"公寓\"</span>) </div><div class=\"line\">                       || house_info_list[<span class=\"number\">1</span>].Contains(<span class=\"string\">\"青年社区\"</span>))</div><div class=\"line\">                       &#123;</div><div class=\"line\">                           house_location = house_info_list[<span class=\"number\">0</span>];</div><div class=\"line\">                       &#125;</div><div class=\"line\">                       <span class=\"keyword\">else</span></div><div class=\"line\">                       &#123;</div><div class=\"line\">                           house_location = house_info_list[<span class=\"number\">1</span>];</div><div class=\"line\">                       &#125;</div><div class=\"line\">                       <span class=\"keyword\">var</span> momey = room.SelectSingleNode(<span class=\"string\">\".//b\"</span>).InnerHtml;</div><div class=\"line\"></div><div class=\"line\">                       lstHouse.Add(<span class=\"keyword\">new</span> HouseInfo()</div><div class=\"line\">                       &#123;</div><div class=\"line\">                           HouseTitle = houseTitle,</div><div class=\"line\">                           HouseLocation = house_location,</div><div class=\"line\">                           HouseURL = houseURL,</div><div class=\"line\">                           Money = momey,</div><div class=\"line\">                       &#125;);</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; IsSuccess = <span class=\"literal\">true</span>, HouseInfos = lstHouse &#125;);</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">catch</span> (Exception ex)</div><div class=\"line\">           &#123;</div><div class=\"line\">               <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; IsSuccess = <span class=\"literal\">false</span>,</div><div class=\"line\">               Error = <span class=\"string\">\"获取数据异常。\"</span> + ex.ToString() &#125;);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n<p>下面解释一下核心代码。</p>\n<p>片段一：获取总数。</p>\n<p>在观察58同城页面的时候，无意发现其实第一个加载的页面中有一个数据总条数，隐藏在页面里面的。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"listsum\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>1813<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span>条结果<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这样一来，总页面就很清晰了。页面=总数/每页20条。然后我们根据已知的数据规则去循环请求页面，也就能拿到所有的搜索数据了。</p>\n<p>核心代码，获取总条数。<br><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">var <span class=\"attr\">countNodes</span> = htmlDoc.DocumentNode.</div><div class=\"line\">SelectSingleNode(<span class=\"string\">\".//span[contains(@class,'list')]\"</span>);</div><div class=\"line\">int <span class=\"attr\">pageCount</span> = <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (countNodes != <span class=\"literal\">null</span> &amp;&amp; countNodes.HasChildNodes)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">pageCount</span> = Convert.ToInt32(countNodes.ChildNodes[<span class=\"number\">0</span>].InnerText) / <span class=\"number\">20</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"attr\">pageCount==0)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        return Json(new &#123; <span class=\"attr\">IsSuccess</span> = <span class=\"literal\">false</span>, </div><div class=\"line\">        <span class=\"attr\">Error</span> =string.Format(<span class=\"string\">\"没有找到价格区间为&#123;0&#125; - &#123;1&#125;的房子。\"</span>,</div><div class=\"line\">        costFrom,costTo)&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">                    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在HTMLDoc里面找到一个span的class包含list的节点，获取它子节点（即em）的内容，强制转换成数字，也就是我们要找的总条数了。总条数除以20就得到了页数，下面就是开始循环请求页面了。</p>\n<p>在最上面我们分析过公寓数据分布，数据是li里面套a标签，我们需要的地理位置、房间名称、价格都在a标签里面。</p>\n<p>这样一来，我们这要获得到页面所有带有属性为tongji_label=”listclick”的a标签数据，也就得到了我们所有需要的数据。</p>\n<p>看一下a标签的数据组成：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/pinpaigongyu/26851774057013x.shtml\"</span></div><div class=\"line\"> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"clickLog('from=fcpc_list_gy_sh_tupian')\"</span> </div><div class=\"line\"> <span class=\"attr\">tongji_label</span>=<span class=\"string\">\"listclick\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">lazy_src</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"des\"</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>【合租】菊园新区 柳湖景庭 3室次卧<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"room\"</span>&gt;</span></div><div class=\"line\">           3室1厅1卫&amp;nbsp; &amp;nbsp; 13m²&amp;nbsp;&amp;nbsp; 3/6层&amp;nbsp; <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dist\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec\"</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec1\"</span>&gt;</span>公共阳台<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec2\"</span>&gt;</span>公共卫生间<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec3\"</span>&gt;</span>离地铁近<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec4\"</span>&gt;</span>厨房<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"money\"</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>1100<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span>元/月 <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>租房月付<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>我们要的房间信息在一个h2的标签里面，公寓租金价钱在class=”money”的div标签里面。</p>\n<p>于是有了一下代码：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> pageIndex = <span class=\"number\">1</span>; pageIndex &lt;= pageCount; pageIndex++)</div><div class=\"line\">&#123;</div><div class=\"line\">    htmlResult = HTTPHelper.GetHTMLByURL(<span class=\"keyword\">string</span>.Format(tempURL, pageIndex));</div><div class=\"line\">    htmlDoc.LoadHtml(htmlResult);</div><div class=\"line\">    <span class=\"comment\">//找到所有的带有属性为tongji_label=\"listclick\"的a标签数据</span></div><div class=\"line\">    <span class=\"keyword\">var</span> roomList = htmlDoc.DocumentNode.SelectNodes(<span class=\"string\">\".//a[contains(@tongji_label,'listclick')]\"</span>);</div><div class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> room <span class=\"keyword\">in</span> roomList)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">//获取其中为h2的房间数据，然后用空格分割成数组</span></div><div class=\"line\">        <span class=\"keyword\">var</span> houseTitle = room.SelectSingleNode(<span class=\"string\">\".//h2\"</span>).InnerHtml;</div><div class=\"line\">        <span class=\"keyword\">var</span> houseURL = uri.Host + room.Attributes[<span class=\"string\">\"href\"</span>].Value;</div><div class=\"line\">        <span class=\"keyword\">var</span> house_info_list = houseTitle.Split(<span class=\"string\">' '</span>);</div><div class=\"line\">        <span class=\"keyword\">var</span> house_location = <span class=\"keyword\">string</span>.Empty;</div><div class=\"line\">        <span class=\"comment\">//分割出来的数组，第二个包含公寓或青年社区，则取第一个数据为所在地区，否则取第二个数据</span></div><div class=\"line\">        <span class=\"comment\">//【合租】菊园新区 柳湖景庭 3室次卧 </span></div><div class=\"line\">        <span class=\"comment\">// 所在地区为：菊园新区</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (house_info_list[<span class=\"number\">1</span>].Contains(<span class=\"string\">\"公寓\"</span>) || house_info_list[<span class=\"number\">1</span>].Contains(<span class=\"string\">\"青年社区\"</span>))</div><div class=\"line\">        &#123;</div><div class=\"line\">            house_location = house_info_list[<span class=\"number\">0</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            house_location = house_info_list[<span class=\"number\">1</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//获取标签为b的数据，价格就在里面了</span></div><div class=\"line\">        <span class=\"keyword\">var</span> momey = room.SelectSingleNode(<span class=\"string\">\".//b\"</span>).InnerHtml;</div><div class=\"line\"></div><div class=\"line\">        lstHouse.Add(<span class=\"keyword\">new</span> HouseInfo()</div><div class=\"line\">        &#123;</div><div class=\"line\">            HouseTitle = houseTitle,</div><div class=\"line\">            HouseLocation = house_location,</div><div class=\"line\">            HouseURL = houseURL,</div><div class=\"line\">            Money = momey,</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>后端来说，基本就这些内容了。</p>\n<p>还有一些前端高德地图接口调用下次再讲吧，要陪女票玩游戏去了…</p>\n<p>^-^</p>\n"},{"layout":"post","title":"58HouseSearch项目迁移到asp.net core","date":"2016-10-03T16:00:00.000Z","_content":"\n### 前言\n[58HouseSearch](https://github.com/liguobao/58HouseSearch)这个项目原本是基于ASP.NET MVC 4写的，开发环境是Windows+VS2015，发布平台是linux+mono+jexus，这样看来整个项目基本已经满足跨平台的需求。\n\n这样一来，本来我是没什么动力去做迁移的，好好的东西闲着没事干才迁移呢。\n\n不过，这不国庆了么？穷人不是在家穷游天下么？所以...真的有点闲着没事干了。\n\n\n### 迁移可行性探讨\n项目迁移前，我们还是先来讨论一下迁移可行性。为嘛要进行可行性探讨呢？原因是.NET CORE是一个跨平台的框架，和上一代的.NET存在不兼容。\n\n个人总结一下，迁移的主要的问题在于：代码不兼容、类库不兼容、严重依赖Windows API或者COM组件等。\n\n#### 代码不兼容\n\n代码不兼容其实不算麻烦。毕竟代码是活的，你我也是活的，不就是一个改字罢了。花点时间慢慢改，总是能搞掂的。\n\n\n#### 类库不兼容\n\n要不就弃用，要不就找替代品。\n\n#### 严重依赖Windows API或者COM组件\n额？找替代品，找不到可用替代品的话。放弃吧，这个项目别考虑迁移了。\n\n这个故事告诉我们，做跨平台项目的时候，少点用系统API或者组建。\n\n\n回到58HouseSearch项目上面。\n\n这个项目的代码基本都是我写的，所以重写代码没什么问题。\n依赖的类库有下面几个:\n\n+ [AngleSharp](https://github.com/FlorianRappl/AngleSharp)\n\n+ [Newtonsoft.Json](http://www.newtonsoft.com/json)\n\n+ [log4net](http://logging.apache.org/log4net/)\n\nAngleSharp是用来解析HTML的类库，用linq的方式来操作HTML，用起来实在爽快。\n\n如果这货在.net core上不能跑，我应该立马放弃了。\n不过，这个实在给力...\n\n![AngleSharp支持平台](http://7xread.com1.z0.glb.clouddn.com/1a950803-3d38-4b16-9761-6c9cd806b0b9)\n\n\nNewtonsoft.Json\n\n在这个项目里面主要是用来记录PV数据的，非核心功能，可有可无。不过看了下nuget上的介绍，也是支持.net core的。\n\n剩下log4net...嗯，并不支持log4net。不过这个就更加是非核心内容了，直接丢了。\nPS:考虑后期加入Nlog替代log4net。\n\n至于依赖Windows API之类的，在这个项目里面基本没有，所以略过...\n\n\n### 准备工作\n+ [Visual Studio Community 2015 with Update 3 – Free](https://www.visualstudio.com/downloads/)\n+ [.NET Core SDK](https://www.microsoft.com/net/download)\n+ [.NET Core](https://www.microsoft.com/net/download)\n+ [.NET Core 1.0.1 - VS 2015 Tooling Preview 2](https://go.microsoft.com/fwlink/?LinkId=827546)\n\n\n友情提示：\n\n1. Visual Studio Community 2015 with Update 3 下载镜像来安装。\n\n错误操作如下：\n![错误操作](http://7xread.com1.z0.glb.clouddn.com/1e723e08-b3d5-4dab-b4a6-1de70799c4c8)\n\n正确打开方式：\n\n![正确的打开方式-1](http://7xread.com1.z0.glb.clouddn.com/706771d8-d3f2-4122-a61d-5e961887121a)\n\n![正确的打开方式-2](http://7xread.com1.z0.glb.clouddn.com/455ec5cc-b429-4563-a4fb-3a0c18608969)\n\n2. 安装.NET Core SDK和.NET Core之后再安装.NET Core 1.0.1 - VS 2015 Tooling Preview 2\n\n3. 安装.NET Core 1.0.1 - VS 2015 Tooling Preview 2 这货的可能会报错0x80072f8a未指定的错误\n\n解决方案见下图：\n\n![图片描述](http://7xread.com1.z0.glb.clouddn.com/47c517d1-4b48-4088-be4a-a0768413e768)\n\n详细见链接：[安装DotNetCore.1.0.1-VS2015Tools.Preview2.0.2出现0x80072f8a未指定的错误](http://www.cnblogs.com/JiaoWoWeiZai/p/5892255.html)\n\n\n上面都弄好之后，理论上在VS2O15-新建项目里面可以看到ASP.NET CORE的模板了。如下图：\n![ASP.NET CORE的模板](http://7xread.com1.z0.glb.clouddn.com/3364e7c9-a41e-47f2-8d08-60345e4efa35)\n\n\n### 项目迁移\n\n#### 新建空白ASP.NET CORE项目\n新建好了之后如下图：\n\n![空白ASP.NET CORE项目](http://7xread.com1.z0.glb.clouddn.com/e047d81d-56f1-4e51-9d72-7989e1fc6225)\n\n#### Nuget获取引用\n\nhttps://www.nuget.org/packages/AngleSharp/\n\nhttps://www.nuget.org/packages/Newtonsoft.Json\n\n#### 添加Controllers文件夹\n然后把之前项目的Controllers拷贝过来，改掉命名空间，去掉无用代码，添加相应引用。\n\n#### 添加Views文件夹\n本项目直接把之前项目的Views拷贝过来是完全没有问题的。\n\n#### 静态文件处理\nasp.net core MVC中的文件结构和asp.net mvc的文件结构略有不同。\n\nasp.net core MVC在view中“IMG/Little/PaleGreen.png”对应的文件对应于“项目路径/webroot/IMG/Little/PaleGreen.png”；\n\n而asp.net mvc中，对应路径为“项目/IMG/Little/PaleGreen.png”。\n\n因而，我们的所有静态文件都应该放到：webroot文件夹下。\n\n上面的都做完了之后，项目结构如下：\n\n\n![项目结构](http://7xread.com1.z0.glb.clouddn.com/2fee156b-2505-4953-bfe9-1d2521f13565)\n\n\n接下来就是改代码了。\n\n\n\n### 代码迁移\n\n\n#### Startup.cs添加MVC\n```\n    public class Startup\n    {\n        // This method gets called by the runtime. Use this method to add services to the container.\n        // For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=398940\n        public void ConfigureServices(IServiceCollection services)\n        {\n            //添加MVC框架\n            services.AddMvc();\n            \n        }\n\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env,\n        ILoggerFactory loggerFactory)\n        {\n            loggerFactory.AddConsole();\n\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            //启用静态文件中间件\n            app.UseStaticFiles();\n            //启动MVC路由\n            app.UseMvcWithDefaultRoute();\n            //设置默认页面\n            app.UseMvc(routes =>\n            {\n                routes.MapRoute(\n                    name: \"default\",\n                    template: \"{controller=House}/{action=Index}/{id?}\"); \n            });\n\n          \n        }\n    }\n\n```\n\n\n#### 改写GetHTMLByURL方法\n之前的方法：\n\n![old GetHTMLByURL](http://7xread.com1.z0.glb.clouddn.com/d005a100-e3e6-423b-b34c-3eae11b2ab63)\n\n.net core重写了HttpWebRequest，变成了WebRequest,所以上面的代码废了。\n\n重写如下：\n\n```\n        public static string GetHTMLByURL(string Url, string type = \"UTF-8\")\n        {\n            try\n            {\n                Url = Url.ToLower();\n\n                System.Net.WebRequest wReq = System.Net.WebRequest.Create(Url);\n                // Get the response instance.\n                System.Net.WebResponse wResp = wReq.GetResponseAsync().Result;\n                System.IO.Stream respStream = wResp.GetResponseStream();\n                using (System.IO.StreamReader reader = new System.IO.\n                StreamReader(respStream, Encoding.GetEncoding(type)))\n                {\n                    return reader.ReadToEnd();\n                }\n            }\n            catch (System.Exception ex)\n            {\n\n                return string.Empty;\n            }\n\n        }\n```\n\n#### 改写Controller代码\n嗯，换了命名空间，别的一句都没改直接拉过来了...略过。\n\n\n\n### 发布到ubuntu\n\n[Install for Ubuntu 14.04, 16.04 & Linux Mint 17](https://www.microsoft.com/net/core#ubuntu)\n\n第一步\n```\n//Ubuntu 14.04 / Linux Mint 17\nsudo sh -c 'echo \"deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ trusty main\" > /etc/apt/sources.list.d/dotnetdev.list'\nsudo apt-key adv --keyserver apt-mo.trafficmanager.net --recv-keys 417A0893\nsudo apt-get update\n\n\n//Ubuntu 16.04\nsudo sh -c 'echo \"deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ xenial main\" > /etc/apt/sources.list.d/dotnetdev.list'\nsudo apt-key adv --keyserver apt-mo.trafficmanager.net --recv-keys 417A0893\nsudo apt-get update\n\n```\n\n第二步\n```\nsudo apt-get install dotnet-dev-1.0.0-preview2-003131\n```\n\n安装好了之后，输入 dotnet -v 应该能看到版本信息，如下图：\n\n![dotnet -v ](http://7xread.com1.z0.glb.clouddn.com/6ebca12e-2be9-487e-b230-d22562a5aabe)\n\n这样的下，一句完成了ubuntu 运行asp.net core的环境搭建了。\n\n### project.json里面隐藏的坑\n\n#### dependencies\n\nNET Core 1.0.1 - VS 2015 Tooling Preview 2模板的asp.net core 版本和ubuntu 的asp.net core 版本不一致。\n\n根据微软爸给的教程，我们在ubuntu上安装的.NET Core 1.0.0，见上图。\n\n然而我们创建项目的模板是.NET Core 1.0.1，见下图:\n\n![.NET Core 1.0.1](http://7xread.com1.z0.glb.clouddn.com/a3192bdf-f548-4fad-868a-4865632acd29)\n\n怎么办？要不升级ubuntu的asp.net core，要不降级。\n\n由于没找到.NET Core 1.0.1 ubuntu的安装包，所以我选择了降级到.NET Core 1.0.0.\n\n其中需要把Microsoft.NETCore.App version 、Microsoft.AspNetCore.Server.Kestrel、Microsoft.AspNetCore.Mvc 这三个节点都改成“1.0.0”。如下：\n\n```\n  \"dependencies\": {\n    \"Microsoft.NETCore.App\": {\n      \"version\": \"1.0.1\",\n      \"type\": \"platform\"\n    },\n    \"Microsoft.AspNetCore.Diagnostics\": \"1.0.0\",\n    \"Microsoft.AspNetCore.Server.IISIntegration\": \"1.0.0\",\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.1\",\n    \"Microsoft.Extensions.Logging.Console\": \"1.0.0\",\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.1\",\n    \"Microsoft.AspNetCore.StaticFiles\": \"1.0.0\",\n    \"Newtonsoft.Json\": \"9.0.1\",\n    \"AngleSharp\": \"0.9.8.1\"\n  },\n\n```\n\n#### publishOptions\n发布输出包括Views文件夹\n```\n  \"publishOptions\": {\n    \"include\": [\n      \"wwwroot\",\n      \"web.config\",\n      \"Views\"\n    ]\n  },\n```\n\n#### runtimes\nruntimes 配置为模板运行平台。\n详细见链接：[https://docs.nuget.org/ndocs/schema/project.json](https://docs.nuget.org/ndocs/schema/project.json)\n\n```\n  \"runtimes\": { \"ubuntu.14.04-x64\": {} }\n```\n\n\n上面都弄好之后，跑一下看,如下图：\n\n```\ndotnet restore\n\ndotnet run\n```\n\n来个请求看看：\n\n![请求log](http://7xread.com1.z0.glb.clouddn.com/b1191226-c33b-45c7-98cc-f62bb3ea73b4)\n\n\n### jexus转发/反向代理\n\n[ASP.NET Core \"完整发布,自带运行时\" 到jexus](http://www.cnblogs.com/gaobing/p/5663012.html)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/58CityHouseSearch_move_to_aspnetcore.md","raw":"---\nlayout: post\ntitle: 58HouseSearch项目迁移到asp.net core\ncategory: asp.net core\ndate: 2016-10-04 00:00:00\ntags:\n- asp.net core\n- 58City\n---\n\n### 前言\n[58HouseSearch](https://github.com/liguobao/58HouseSearch)这个项目原本是基于ASP.NET MVC 4写的，开发环境是Windows+VS2015，发布平台是linux+mono+jexus，这样看来整个项目基本已经满足跨平台的需求。\n\n这样一来，本来我是没什么动力去做迁移的，好好的东西闲着没事干才迁移呢。\n\n不过，这不国庆了么？穷人不是在家穷游天下么？所以...真的有点闲着没事干了。\n\n\n### 迁移可行性探讨\n项目迁移前，我们还是先来讨论一下迁移可行性。为嘛要进行可行性探讨呢？原因是.NET CORE是一个跨平台的框架，和上一代的.NET存在不兼容。\n\n个人总结一下，迁移的主要的问题在于：代码不兼容、类库不兼容、严重依赖Windows API或者COM组件等。\n\n#### 代码不兼容\n\n代码不兼容其实不算麻烦。毕竟代码是活的，你我也是活的，不就是一个改字罢了。花点时间慢慢改，总是能搞掂的。\n\n\n#### 类库不兼容\n\n要不就弃用，要不就找替代品。\n\n#### 严重依赖Windows API或者COM组件\n额？找替代品，找不到可用替代品的话。放弃吧，这个项目别考虑迁移了。\n\n这个故事告诉我们，做跨平台项目的时候，少点用系统API或者组建。\n\n\n回到58HouseSearch项目上面。\n\n这个项目的代码基本都是我写的，所以重写代码没什么问题。\n依赖的类库有下面几个:\n\n+ [AngleSharp](https://github.com/FlorianRappl/AngleSharp)\n\n+ [Newtonsoft.Json](http://www.newtonsoft.com/json)\n\n+ [log4net](http://logging.apache.org/log4net/)\n\nAngleSharp是用来解析HTML的类库，用linq的方式来操作HTML，用起来实在爽快。\n\n如果这货在.net core上不能跑，我应该立马放弃了。\n不过，这个实在给力...\n\n![AngleSharp支持平台](http://7xread.com1.z0.glb.clouddn.com/1a950803-3d38-4b16-9761-6c9cd806b0b9)\n\n\nNewtonsoft.Json\n\n在这个项目里面主要是用来记录PV数据的，非核心功能，可有可无。不过看了下nuget上的介绍，也是支持.net core的。\n\n剩下log4net...嗯，并不支持log4net。不过这个就更加是非核心内容了，直接丢了。\nPS:考虑后期加入Nlog替代log4net。\n\n至于依赖Windows API之类的，在这个项目里面基本没有，所以略过...\n\n\n### 准备工作\n+ [Visual Studio Community 2015 with Update 3 – Free](https://www.visualstudio.com/downloads/)\n+ [.NET Core SDK](https://www.microsoft.com/net/download)\n+ [.NET Core](https://www.microsoft.com/net/download)\n+ [.NET Core 1.0.1 - VS 2015 Tooling Preview 2](https://go.microsoft.com/fwlink/?LinkId=827546)\n\n\n友情提示：\n\n1. Visual Studio Community 2015 with Update 3 下载镜像来安装。\n\n错误操作如下：\n![错误操作](http://7xread.com1.z0.glb.clouddn.com/1e723e08-b3d5-4dab-b4a6-1de70799c4c8)\n\n正确打开方式：\n\n![正确的打开方式-1](http://7xread.com1.z0.glb.clouddn.com/706771d8-d3f2-4122-a61d-5e961887121a)\n\n![正确的打开方式-2](http://7xread.com1.z0.glb.clouddn.com/455ec5cc-b429-4563-a4fb-3a0c18608969)\n\n2. 安装.NET Core SDK和.NET Core之后再安装.NET Core 1.0.1 - VS 2015 Tooling Preview 2\n\n3. 安装.NET Core 1.0.1 - VS 2015 Tooling Preview 2 这货的可能会报错0x80072f8a未指定的错误\n\n解决方案见下图：\n\n![图片描述](http://7xread.com1.z0.glb.clouddn.com/47c517d1-4b48-4088-be4a-a0768413e768)\n\n详细见链接：[安装DotNetCore.1.0.1-VS2015Tools.Preview2.0.2出现0x80072f8a未指定的错误](http://www.cnblogs.com/JiaoWoWeiZai/p/5892255.html)\n\n\n上面都弄好之后，理论上在VS2O15-新建项目里面可以看到ASP.NET CORE的模板了。如下图：\n![ASP.NET CORE的模板](http://7xread.com1.z0.glb.clouddn.com/3364e7c9-a41e-47f2-8d08-60345e4efa35)\n\n\n### 项目迁移\n\n#### 新建空白ASP.NET CORE项目\n新建好了之后如下图：\n\n![空白ASP.NET CORE项目](http://7xread.com1.z0.glb.clouddn.com/e047d81d-56f1-4e51-9d72-7989e1fc6225)\n\n#### Nuget获取引用\n\nhttps://www.nuget.org/packages/AngleSharp/\n\nhttps://www.nuget.org/packages/Newtonsoft.Json\n\n#### 添加Controllers文件夹\n然后把之前项目的Controllers拷贝过来，改掉命名空间，去掉无用代码，添加相应引用。\n\n#### 添加Views文件夹\n本项目直接把之前项目的Views拷贝过来是完全没有问题的。\n\n#### 静态文件处理\nasp.net core MVC中的文件结构和asp.net mvc的文件结构略有不同。\n\nasp.net core MVC在view中“IMG/Little/PaleGreen.png”对应的文件对应于“项目路径/webroot/IMG/Little/PaleGreen.png”；\n\n而asp.net mvc中，对应路径为“项目/IMG/Little/PaleGreen.png”。\n\n因而，我们的所有静态文件都应该放到：webroot文件夹下。\n\n上面的都做完了之后，项目结构如下：\n\n\n![项目结构](http://7xread.com1.z0.glb.clouddn.com/2fee156b-2505-4953-bfe9-1d2521f13565)\n\n\n接下来就是改代码了。\n\n\n\n### 代码迁移\n\n\n#### Startup.cs添加MVC\n```\n    public class Startup\n    {\n        // This method gets called by the runtime. Use this method to add services to the container.\n        // For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=398940\n        public void ConfigureServices(IServiceCollection services)\n        {\n            //添加MVC框架\n            services.AddMvc();\n            \n        }\n\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env,\n        ILoggerFactory loggerFactory)\n        {\n            loggerFactory.AddConsole();\n\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            //启用静态文件中间件\n            app.UseStaticFiles();\n            //启动MVC路由\n            app.UseMvcWithDefaultRoute();\n            //设置默认页面\n            app.UseMvc(routes =>\n            {\n                routes.MapRoute(\n                    name: \"default\",\n                    template: \"{controller=House}/{action=Index}/{id?}\"); \n            });\n\n          \n        }\n    }\n\n```\n\n\n#### 改写GetHTMLByURL方法\n之前的方法：\n\n![old GetHTMLByURL](http://7xread.com1.z0.glb.clouddn.com/d005a100-e3e6-423b-b34c-3eae11b2ab63)\n\n.net core重写了HttpWebRequest，变成了WebRequest,所以上面的代码废了。\n\n重写如下：\n\n```\n        public static string GetHTMLByURL(string Url, string type = \"UTF-8\")\n        {\n            try\n            {\n                Url = Url.ToLower();\n\n                System.Net.WebRequest wReq = System.Net.WebRequest.Create(Url);\n                // Get the response instance.\n                System.Net.WebResponse wResp = wReq.GetResponseAsync().Result;\n                System.IO.Stream respStream = wResp.GetResponseStream();\n                using (System.IO.StreamReader reader = new System.IO.\n                StreamReader(respStream, Encoding.GetEncoding(type)))\n                {\n                    return reader.ReadToEnd();\n                }\n            }\n            catch (System.Exception ex)\n            {\n\n                return string.Empty;\n            }\n\n        }\n```\n\n#### 改写Controller代码\n嗯，换了命名空间，别的一句都没改直接拉过来了...略过。\n\n\n\n### 发布到ubuntu\n\n[Install for Ubuntu 14.04, 16.04 & Linux Mint 17](https://www.microsoft.com/net/core#ubuntu)\n\n第一步\n```\n//Ubuntu 14.04 / Linux Mint 17\nsudo sh -c 'echo \"deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ trusty main\" > /etc/apt/sources.list.d/dotnetdev.list'\nsudo apt-key adv --keyserver apt-mo.trafficmanager.net --recv-keys 417A0893\nsudo apt-get update\n\n\n//Ubuntu 16.04\nsudo sh -c 'echo \"deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ xenial main\" > /etc/apt/sources.list.d/dotnetdev.list'\nsudo apt-key adv --keyserver apt-mo.trafficmanager.net --recv-keys 417A0893\nsudo apt-get update\n\n```\n\n第二步\n```\nsudo apt-get install dotnet-dev-1.0.0-preview2-003131\n```\n\n安装好了之后，输入 dotnet -v 应该能看到版本信息，如下图：\n\n![dotnet -v ](http://7xread.com1.z0.glb.clouddn.com/6ebca12e-2be9-487e-b230-d22562a5aabe)\n\n这样的下，一句完成了ubuntu 运行asp.net core的环境搭建了。\n\n### project.json里面隐藏的坑\n\n#### dependencies\n\nNET Core 1.0.1 - VS 2015 Tooling Preview 2模板的asp.net core 版本和ubuntu 的asp.net core 版本不一致。\n\n根据微软爸给的教程，我们在ubuntu上安装的.NET Core 1.0.0，见上图。\n\n然而我们创建项目的模板是.NET Core 1.0.1，见下图:\n\n![.NET Core 1.0.1](http://7xread.com1.z0.glb.clouddn.com/a3192bdf-f548-4fad-868a-4865632acd29)\n\n怎么办？要不升级ubuntu的asp.net core，要不降级。\n\n由于没找到.NET Core 1.0.1 ubuntu的安装包，所以我选择了降级到.NET Core 1.0.0.\n\n其中需要把Microsoft.NETCore.App version 、Microsoft.AspNetCore.Server.Kestrel、Microsoft.AspNetCore.Mvc 这三个节点都改成“1.0.0”。如下：\n\n```\n  \"dependencies\": {\n    \"Microsoft.NETCore.App\": {\n      \"version\": \"1.0.1\",\n      \"type\": \"platform\"\n    },\n    \"Microsoft.AspNetCore.Diagnostics\": \"1.0.0\",\n    \"Microsoft.AspNetCore.Server.IISIntegration\": \"1.0.0\",\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.1\",\n    \"Microsoft.Extensions.Logging.Console\": \"1.0.0\",\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.1\",\n    \"Microsoft.AspNetCore.StaticFiles\": \"1.0.0\",\n    \"Newtonsoft.Json\": \"9.0.1\",\n    \"AngleSharp\": \"0.9.8.1\"\n  },\n\n```\n\n#### publishOptions\n发布输出包括Views文件夹\n```\n  \"publishOptions\": {\n    \"include\": [\n      \"wwwroot\",\n      \"web.config\",\n      \"Views\"\n    ]\n  },\n```\n\n#### runtimes\nruntimes 配置为模板运行平台。\n详细见链接：[https://docs.nuget.org/ndocs/schema/project.json](https://docs.nuget.org/ndocs/schema/project.json)\n\n```\n  \"runtimes\": { \"ubuntu.14.04-x64\": {} }\n```\n\n\n上面都弄好之后，跑一下看,如下图：\n\n```\ndotnet restore\n\ndotnet run\n```\n\n来个请求看看：\n\n![请求log](http://7xread.com1.z0.glb.clouddn.com/b1191226-c33b-45c7-98cc-f62bb3ea73b4)\n\n\n### jexus转发/反向代理\n\n[ASP.NET Core \"完整发布,自带运行时\" 到jexus](http://www.cnblogs.com/gaobing/p/5663012.html)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"58CityHouseSearch_move_to_aspnetcore","published":1,"updated":"2016-10-15T05:20:24.513Z","comments":1,"photos":[],"link":"","_id":"cj0dyumvf00056kunkypmvnm5","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p><a href=\"https://github.com/liguobao/58HouseSearch\" target=\"_blank\" rel=\"external\">58HouseSearch</a>这个项目原本是基于ASP.NET MVC 4写的，开发环境是Windows+VS2015，发布平台是linux+mono+jexus，这样看来整个项目基本已经满足跨平台的需求。</p>\n<p>这样一来，本来我是没什么动力去做迁移的，好好的东西闲着没事干才迁移呢。</p>\n<p>不过，这不国庆了么？穷人不是在家穷游天下么？所以…真的有点闲着没事干了。</p>\n<h3 id=\"迁移可行性探讨\"><a href=\"#迁移可行性探讨\" class=\"headerlink\" title=\"迁移可行性探讨\"></a>迁移可行性探讨</h3><p>项目迁移前，我们还是先来讨论一下迁移可行性。为嘛要进行可行性探讨呢？原因是.NET CORE是一个跨平台的框架，和上一代的.NET存在不兼容。</p>\n<p>个人总结一下，迁移的主要的问题在于：代码不兼容、类库不兼容、严重依赖Windows API或者COM组件等。</p>\n<h4 id=\"代码不兼容\"><a href=\"#代码不兼容\" class=\"headerlink\" title=\"代码不兼容\"></a>代码不兼容</h4><p>代码不兼容其实不算麻烦。毕竟代码是活的，你我也是活的，不就是一个改字罢了。花点时间慢慢改，总是能搞掂的。</p>\n<h4 id=\"类库不兼容\"><a href=\"#类库不兼容\" class=\"headerlink\" title=\"类库不兼容\"></a>类库不兼容</h4><p>要不就弃用，要不就找替代品。</p>\n<h4 id=\"严重依赖Windows-API或者COM组件\"><a href=\"#严重依赖Windows-API或者COM组件\" class=\"headerlink\" title=\"严重依赖Windows API或者COM组件\"></a>严重依赖Windows API或者COM组件</h4><p>额？找替代品，找不到可用替代品的话。放弃吧，这个项目别考虑迁移了。</p>\n<p>这个故事告诉我们，做跨平台项目的时候，少点用系统API或者组建。</p>\n<p>回到58HouseSearch项目上面。</p>\n<p>这个项目的代码基本都是我写的，所以重写代码没什么问题。<br>依赖的类库有下面几个:</p>\n<ul>\n<li><p><a href=\"https://github.com/FlorianRappl/AngleSharp\" target=\"_blank\" rel=\"external\">AngleSharp</a></p>\n</li>\n<li><p><a href=\"http://www.newtonsoft.com/json\" target=\"_blank\" rel=\"external\">Newtonsoft.Json</a></p>\n</li>\n<li><p><a href=\"http://logging.apache.org/log4net/\" target=\"_blank\" rel=\"external\">log4net</a></p>\n</li>\n</ul>\n<p>AngleSharp是用来解析HTML的类库，用linq的方式来操作HTML，用起来实在爽快。</p>\n<p>如果这货在.net core上不能跑，我应该立马放弃了。<br>不过，这个实在给力…</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/1a950803-3d38-4b16-9761-6c9cd806b0b9\" alt=\"AngleSharp支持平台\"></p>\n<p>Newtonsoft.Json</p>\n<p>在这个项目里面主要是用来记录PV数据的，非核心功能，可有可无。不过看了下nuget上的介绍，也是支持.net core的。</p>\n<p>剩下log4net…嗯，并不支持log4net。不过这个就更加是非核心内容了，直接丢了。<br>PS:考虑后期加入Nlog替代log4net。</p>\n<p>至于依赖Windows API之类的，在这个项目里面基本没有，所以略过…</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ul>\n<li><a href=\"https://www.visualstudio.com/downloads/\" target=\"_blank\" rel=\"external\">Visual Studio Community 2015 with Update 3 – Free</a></li>\n<li><a href=\"https://www.microsoft.com/net/download\" target=\"_blank\" rel=\"external\">.NET Core SDK</a></li>\n<li><a href=\"https://www.microsoft.com/net/download\" target=\"_blank\" rel=\"external\">.NET Core</a></li>\n<li><a href=\"https://go.microsoft.com/fwlink/?LinkId=827546\" target=\"_blank\" rel=\"external\">.NET Core 1.0.1 - VS 2015 Tooling Preview 2</a></li>\n</ul>\n<p>友情提示：</p>\n<ol>\n<li>Visual Studio Community 2015 with Update 3 下载镜像来安装。</li>\n</ol>\n<p>错误操作如下：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/1e723e08-b3d5-4dab-b4a6-1de70799c4c8\" alt=\"错误操作\"></p>\n<p>正确打开方式：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/706771d8-d3f2-4122-a61d-5e961887121a\" alt=\"正确的打开方式-1\"></p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/455ec5cc-b429-4563-a4fb-3a0c18608969\" alt=\"正确的打开方式-2\"></p>\n<ol>\n<li><p>安装.NET Core SDK和.NET Core之后再安装.NET Core 1.0.1 - VS 2015 Tooling Preview 2</p>\n</li>\n<li><p>安装.NET Core 1.0.1 - VS 2015 Tooling Preview 2 这货的可能会报错0x80072f8a未指定的错误</p>\n</li>\n</ol>\n<p>解决方案见下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/47c517d1-4b48-4088-be4a-a0768413e768\" alt=\"图片描述\"></p>\n<p>详细见链接：<a href=\"http://www.cnblogs.com/JiaoWoWeiZai/p/5892255.html\" target=\"_blank\" rel=\"external\">安装DotNetCore.1.0.1-VS2015Tools.Preview2.0.2出现0x80072f8a未指定的错误</a></p>\n<p>上面都弄好之后，理论上在VS2O15-新建项目里面可以看到ASP.NET CORE的模板了。如下图：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/3364e7c9-a41e-47f2-8d08-60345e4efa35\" alt=\"ASP.NET CORE的模板\"></p>\n<h3 id=\"项目迁移\"><a href=\"#项目迁移\" class=\"headerlink\" title=\"项目迁移\"></a>项目迁移</h3><h4 id=\"新建空白ASP-NET-CORE项目\"><a href=\"#新建空白ASP-NET-CORE项目\" class=\"headerlink\" title=\"新建空白ASP.NET CORE项目\"></a>新建空白ASP.NET CORE项目</h4><p>新建好了之后如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/e047d81d-56f1-4e51-9d72-7989e1fc6225\" alt=\"空白ASP.NET CORE项目\"></p>\n<h4 id=\"Nuget获取引用\"><a href=\"#Nuget获取引用\" class=\"headerlink\" title=\"Nuget获取引用\"></a>Nuget获取引用</h4><p><a href=\"https://www.nuget.org/packages/AngleSharp/\" target=\"_blank\" rel=\"external\">https://www.nuget.org/packages/AngleSharp/</a></p>\n<p><a href=\"https://www.nuget.org/packages/Newtonsoft.Json\" target=\"_blank\" rel=\"external\">https://www.nuget.org/packages/Newtonsoft.Json</a></p>\n<h4 id=\"添加Controllers文件夹\"><a href=\"#添加Controllers文件夹\" class=\"headerlink\" title=\"添加Controllers文件夹\"></a>添加Controllers文件夹</h4><p>然后把之前项目的Controllers拷贝过来，改掉命名空间，去掉无用代码，添加相应引用。</p>\n<h4 id=\"添加Views文件夹\"><a href=\"#添加Views文件夹\" class=\"headerlink\" title=\"添加Views文件夹\"></a>添加Views文件夹</h4><p>本项目直接把之前项目的Views拷贝过来是完全没有问题的。</p>\n<h4 id=\"静态文件处理\"><a href=\"#静态文件处理\" class=\"headerlink\" title=\"静态文件处理\"></a>静态文件处理</h4><p>asp.net core MVC中的文件结构和asp.net mvc的文件结构略有不同。</p>\n<p>asp.net core MVC在view中“IMG/Little/PaleGreen.png”对应的文件对应于“项目路径/webroot/IMG/Little/PaleGreen.png”；</p>\n<p>而asp.net mvc中，对应路径为“项目/IMG/Little/PaleGreen.png”。</p>\n<p>因而，我们的所有静态文件都应该放到：webroot文件夹下。</p>\n<p>上面的都做完了之后，项目结构如下：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/2fee156b-2505-4953-bfe9-1d2521f13565\" alt=\"项目结构\"></p>\n<p>接下来就是改代码了。</p>\n<h3 id=\"代码迁移\"><a href=\"#代码迁移\" class=\"headerlink\" title=\"代码迁移\"></a>代码迁移</h3><h4 id=\"Startup-cs添加MVC\"><a href=\"#Startup-cs添加MVC\" class=\"headerlink\" title=\"Startup.cs添加MVC\"></a>Startup.cs添加MVC</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">public</span> <span class=\"selector-tag\">class</span> <span class=\"selector-tag\">Startup</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// This method gets called by the runtime. Use this method to add services to the container.</span></div><div class=\"line\">    <span class=\"comment\">// For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=398940</span></div><div class=\"line\">    <span class=\"selector-tag\">public</span> <span class=\"selector-tag\">void</span> <span class=\"selector-tag\">ConfigureServices</span>(IServiceCollection services)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">//添加MVC框架</span></div><div class=\"line\">        services<span class=\"selector-class\">.AddMvc</span>();</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span></div><div class=\"line\">    <span class=\"selector-tag\">public</span> <span class=\"selector-tag\">void</span> <span class=\"selector-tag\">Configure</span>(IApplicationBuilder app, IHostingEnvironment env,</div><div class=\"line\">    ILoggerFactory loggerFactory)</div><div class=\"line\">    &#123;</div><div class=\"line\">        loggerFactory<span class=\"selector-class\">.AddConsole</span>();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"selector-tag\">if</span> (env.IsDevelopment())</div><div class=\"line\">        &#123;</div><div class=\"line\">            app<span class=\"selector-class\">.UseDeveloperExceptionPage</span>();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//启用静态文件中间件</span></div><div class=\"line\">        app<span class=\"selector-class\">.UseStaticFiles</span>();</div><div class=\"line\">        <span class=\"comment\">//启动MVC路由</span></div><div class=\"line\">        app<span class=\"selector-class\">.UseMvcWithDefaultRoute</span>();</div><div class=\"line\">        <span class=\"comment\">//设置默认页面</span></div><div class=\"line\">        <span class=\"selector-tag\">app</span><span class=\"selector-class\">.UseMvc</span>(routes =&gt;</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"selector-tag\">routes</span><span class=\"selector-class\">.MapRoute</span>(</div><div class=\"line\">                <span class=\"attribute\">name</span>: <span class=\"string\">\"default\"</span>,</div><div class=\"line\">                <span class=\"attribute\">template</span>: <span class=\"string\">\"&#123;controller=House&#125;/&#123;action=Index&#125;/&#123;id?&#125;\"</span>); </div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">      </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"改写GetHTMLByURL方法\"><a href=\"#改写GetHTMLByURL方法\" class=\"headerlink\" title=\"改写GetHTMLByURL方法\"></a>改写GetHTMLByURL方法</h4><p>之前的方法：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/d005a100-e3e6-423b-b34c-3eae11b2ab63\" alt=\"old GetHTMLByURL\"></p>\n<p>.net core重写了HttpWebRequest，变成了WebRequest,所以上面的代码废了。</p>\n<p>重写如下：</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static <span class=\"keyword\">string</span> GetHTMLByURL(<span class=\"keyword\">string</span> Url, <span class=\"keyword\">string</span> <span class=\"built_in\">type</span> = <span class=\"string\">\"UTF-8\"</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">    try</div><div class=\"line\">    &#123;</div><div class=\"line\">        Url = Url.ToLower();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">System</span>.Net.WebRequest wReq = <span class=\"keyword\">System</span>.Net.WebRequest.<span class=\"keyword\">Create</span>(Url);</div><div class=\"line\">        <span class=\"comment\">// Get the response instance.</span></div><div class=\"line\">        <span class=\"keyword\">System</span>.Net.WebResponse wResp = wReq.GetResponseAsync().Result;</div><div class=\"line\">        <span class=\"keyword\">System</span>.IO.Stream respStream = wResp.GetResponseStream();</div><div class=\"line\">        using (<span class=\"keyword\">System</span>.IO.StreamReader reader = <span class=\"keyword\">new</span> <span class=\"keyword\">System</span>.IO.</div><div class=\"line\">        StreamReader(respStream, Encoding.GetEncoding(<span class=\"built_in\">type</span>)))</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> reader.ReadToEnd();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    catch (<span class=\"keyword\">System</span>.Exception ex)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>.Empty;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"改写Controller代码\"><a href=\"#改写Controller代码\" class=\"headerlink\" title=\"改写Controller代码\"></a>改写Controller代码</h4><p>嗯，换了命名空间，别的一句都没改直接拉过来了…略过。</p>\n<h3 id=\"发布到ubuntu\"><a href=\"#发布到ubuntu\" class=\"headerlink\" title=\"发布到ubuntu\"></a>发布到ubuntu</h3><p><a href=\"https://www.microsoft.com/net/core#ubuntu\" target=\"_blank\" rel=\"external\">Install for Ubuntu 14.04, 16.04 &amp; Linux Mint 17</a></p>\n<p>第一步<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Ubuntu 14.04 / Linux Mint 17</span></div><div class=\"line\">sudo <span class=\"keyword\">sh</span> -c 'echo <span class=\"string\">\"deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ trusty main\"</span> &gt; /etc/apt/sources.<span class=\"keyword\">list</span>.<span class=\"keyword\">d</span>/dotnetdev.<span class=\"keyword\">list</span>'</div><div class=\"line\">sudo apt-key adv --keyserver apt-mo.trafficmanager.<span class=\"keyword\">net</span> --recv-keys 417A0893</div><div class=\"line\">sudo apt-get <span class=\"keyword\">update</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Ubuntu 16.04</span></div><div class=\"line\">sudo <span class=\"keyword\">sh</span> -c 'echo <span class=\"string\">\"deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ xenial main\"</span> &gt; /etc/apt/sources.<span class=\"keyword\">list</span>.<span class=\"keyword\">d</span>/dotnetdev.<span class=\"keyword\">list</span>'</div><div class=\"line\">sudo apt-key adv --keyserver apt-mo.trafficmanager.<span class=\"keyword\">net</span> --recv-keys 417A0893</div><div class=\"line\">sudo apt-get <span class=\"keyword\">update</span></div></pre></td></tr></table></figure></p>\n<p>第二步<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install dotnet-dev<span class=\"number\">-1.0</span><span class=\"number\">.0</span>-preview2<span class=\"number\">-003131</span></div></pre></td></tr></table></figure></p>\n<p>安装好了之后，输入 dotnet -v 应该能看到版本信息，如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/6ebca12e-2be9-487e-b230-d22562a5aabe\" alt=\"dotnet -v \"></p>\n<p>这样的下，一句完成了ubuntu 运行asp.net core的环境搭建了。</p>\n<h3 id=\"project-json里面隐藏的坑\"><a href=\"#project-json里面隐藏的坑\" class=\"headerlink\" title=\"project.json里面隐藏的坑\"></a>project.json里面隐藏的坑</h3><h4 id=\"dependencies\"><a href=\"#dependencies\" class=\"headerlink\" title=\"dependencies\"></a>dependencies</h4><p>NET Core 1.0.1 - VS 2015 Tooling Preview 2模板的asp.net core 版本和ubuntu 的asp.net core 版本不一致。</p>\n<p>根据微软爸给的教程，我们在ubuntu上安装的.NET Core 1.0.0，见上图。</p>\n<p>然而我们创建项目的模板是.NET Core 1.0.1，见下图:</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/a3192bdf-f548-4fad-868a-4865632acd29\" alt=\".NET Core 1.0.1\"></p>\n<p>怎么办？要不升级ubuntu的asp.net core，要不降级。</p>\n<p>由于没找到.NET Core 1.0.1 ubuntu的安装包，所以我选择了降级到.NET Core 1.0.0.</p>\n<p>其中需要把Microsoft.NETCore.App version 、Microsoft.AspNetCore.Server.Kestrel、Microsoft.AspNetCore.Mvc 这三个节点都改成“1.0.0”。如下：</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">  <span class=\"string\">\"Microsoft.NETCore.App\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"platform\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"Microsoft.AspNetCore.Diagnostics\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"string\">\"Microsoft.AspNetCore.Server.IISIntegration\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"string\">\"Microsoft.AspNetCore.Server.Kestrel\"</span>: <span class=\"string\">\"1.0.1\"</span>,</div><div class=\"line\">  <span class=\"string\">\"Microsoft.Extensions.Logging.Console\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"string\">\"Microsoft.AspNetCore.Mvc\"</span>: <span class=\"string\">\"1.0.1\"</span>,</div><div class=\"line\">  <span class=\"string\">\"Microsoft.AspNetCore.StaticFiles\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"string\">\"Newtonsoft.Json\"</span>: <span class=\"string\">\"9.0.1\"</span>,</div><div class=\"line\">  <span class=\"string\">\"AngleSharp\"</span>: <span class=\"string\">\"0.9.8.1\"</span></div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h4 id=\"publishOptions\"><a href=\"#publishOptions\" class=\"headerlink\" title=\"publishOptions\"></a>publishOptions</h4><p>发布输出包括Views文件夹<br><figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"publishOptions\"</span>: &#123;</div><div class=\"line\">  <span class=\"string\">\"include\"</span>: [</div><div class=\"line\">    <span class=\"string\">\"wwwroot\"</span>,</div><div class=\"line\">    <span class=\"string\">\"web.config\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Views\"</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<h4 id=\"runtimes\"><a href=\"#runtimes\" class=\"headerlink\" title=\"runtimes\"></a>runtimes</h4><p>runtimes 配置为模板运行平台。<br>详细见链接：<a href=\"https://docs.nuget.org/ndocs/schema/project.json\" target=\"_blank\" rel=\"external\">https://docs.nuget.org/ndocs/schema/project.json</a></p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"runtimes\"</span>: &#123; <span class=\"string\">\"ubuntu.14.04-x64\"</span>: &#123;&#125; &#125;</div></pre></td></tr></table></figure>\n<p>上面都弄好之后，跑一下看,如下图：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">dotnet <span class=\"keyword\">restore</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">dotnet</span> run</div></pre></td></tr></table></figure>\n<p>来个请求看看：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/b1191226-c33b-45c7-98cc-f62bb3ea73b4\" alt=\"请求log\"></p>\n<h3 id=\"jexus转发-反向代理\"><a href=\"#jexus转发-反向代理\" class=\"headerlink\" title=\"jexus转发/反向代理\"></a>jexus转发/反向代理</h3><p><a href=\"http://www.cnblogs.com/gaobing/p/5663012.html\" target=\"_blank\" rel=\"external\">ASP.NET Core “完整发布,自带运行时” 到jexus</a></p>\n","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p><a href=\"https://github.com/liguobao/58HouseSearch\">58HouseSearch</a>这个项目原本是基于ASP.NET MVC 4写的，开发环境是Windows+VS2015，发布平台是linux+mono+jexus，这样看来整个项目基本已经满足跨平台的需求。</p>\n<p>这样一来，本来我是没什么动力去做迁移的，好好的东西闲着没事干才迁移呢。</p>\n<p>不过，这不国庆了么？穷人不是在家穷游天下么？所以…真的有点闲着没事干了。</p>\n<h3 id=\"迁移可行性探讨\"><a href=\"#迁移可行性探讨\" class=\"headerlink\" title=\"迁移可行性探讨\"></a>迁移可行性探讨</h3><p>项目迁移前，我们还是先来讨论一下迁移可行性。为嘛要进行可行性探讨呢？原因是.NET CORE是一个跨平台的框架，和上一代的.NET存在不兼容。</p>\n<p>个人总结一下，迁移的主要的问题在于：代码不兼容、类库不兼容、严重依赖Windows API或者COM组件等。</p>\n<h4 id=\"代码不兼容\"><a href=\"#代码不兼容\" class=\"headerlink\" title=\"代码不兼容\"></a>代码不兼容</h4><p>代码不兼容其实不算麻烦。毕竟代码是活的，你我也是活的，不就是一个改字罢了。花点时间慢慢改，总是能搞掂的。</p>\n<h4 id=\"类库不兼容\"><a href=\"#类库不兼容\" class=\"headerlink\" title=\"类库不兼容\"></a>类库不兼容</h4><p>要不就弃用，要不就找替代品。</p>\n<h4 id=\"严重依赖Windows-API或者COM组件\"><a href=\"#严重依赖Windows-API或者COM组件\" class=\"headerlink\" title=\"严重依赖Windows API或者COM组件\"></a>严重依赖Windows API或者COM组件</h4><p>额？找替代品，找不到可用替代品的话。放弃吧，这个项目别考虑迁移了。</p>\n<p>这个故事告诉我们，做跨平台项目的时候，少点用系统API或者组建。</p>\n<p>回到58HouseSearch项目上面。</p>\n<p>这个项目的代码基本都是我写的，所以重写代码没什么问题。<br>依赖的类库有下面几个:</p>\n<ul>\n<li><p><a href=\"https://github.com/FlorianRappl/AngleSharp\">AngleSharp</a></p>\n</li>\n<li><p><a href=\"http://www.newtonsoft.com/json\">Newtonsoft.Json</a></p>\n</li>\n<li><p><a href=\"http://logging.apache.org/log4net/\">log4net</a></p>\n</li>\n</ul>\n<p>AngleSharp是用来解析HTML的类库，用linq的方式来操作HTML，用起来实在爽快。</p>\n<p>如果这货在.net core上不能跑，我应该立马放弃了。<br>不过，这个实在给力…</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/1a950803-3d38-4b16-9761-6c9cd806b0b9\" alt=\"AngleSharp支持平台\"></p>\n<p>Newtonsoft.Json</p>\n<p>在这个项目里面主要是用来记录PV数据的，非核心功能，可有可无。不过看了下nuget上的介绍，也是支持.net core的。</p>\n<p>剩下log4net…嗯，并不支持log4net。不过这个就更加是非核心内容了，直接丢了。<br>PS:考虑后期加入Nlog替代log4net。</p>\n<p>至于依赖Windows API之类的，在这个项目里面基本没有，所以略过…</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ul>\n<li><a href=\"https://www.visualstudio.com/downloads/\">Visual Studio Community 2015 with Update 3 – Free</a></li>\n<li><a href=\"https://www.microsoft.com/net/download\">.NET Core SDK</a></li>\n<li><a href=\"https://www.microsoft.com/net/download\">.NET Core</a></li>\n<li><a href=\"https://go.microsoft.com/fwlink/?LinkId=827546\">.NET Core 1.0.1 - VS 2015 Tooling Preview 2</a></li>\n</ul>\n<p>友情提示：</p>\n<ol>\n<li>Visual Studio Community 2015 with Update 3 下载镜像来安装。</li>\n</ol>\n<p>错误操作如下：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/1e723e08-b3d5-4dab-b4a6-1de70799c4c8\" alt=\"错误操作\"></p>\n<p>正确打开方式：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/706771d8-d3f2-4122-a61d-5e961887121a\" alt=\"正确的打开方式-1\"></p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/455ec5cc-b429-4563-a4fb-3a0c18608969\" alt=\"正确的打开方式-2\"></p>\n<ol>\n<li><p>安装.NET Core SDK和.NET Core之后再安装.NET Core 1.0.1 - VS 2015 Tooling Preview 2</p>\n</li>\n<li><p>安装.NET Core 1.0.1 - VS 2015 Tooling Preview 2 这货的可能会报错0x80072f8a未指定的错误</p>\n</li>\n</ol>\n<p>解决方案见下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/47c517d1-4b48-4088-be4a-a0768413e768\" alt=\"图片描述\"></p>\n<p>详细见链接：<a href=\"http://www.cnblogs.com/JiaoWoWeiZai/p/5892255.html\">安装DotNetCore.1.0.1-VS2015Tools.Preview2.0.2出现0x80072f8a未指定的错误</a></p>\n<p>上面都弄好之后，理论上在VS2O15-新建项目里面可以看到ASP.NET CORE的模板了。如下图：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/3364e7c9-a41e-47f2-8d08-60345e4efa35\" alt=\"ASP.NET CORE的模板\"></p>\n<h3 id=\"项目迁移\"><a href=\"#项目迁移\" class=\"headerlink\" title=\"项目迁移\"></a>项目迁移</h3><h4 id=\"新建空白ASP-NET-CORE项目\"><a href=\"#新建空白ASP-NET-CORE项目\" class=\"headerlink\" title=\"新建空白ASP.NET CORE项目\"></a>新建空白ASP.NET CORE项目</h4><p>新建好了之后如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/e047d81d-56f1-4e51-9d72-7989e1fc6225\" alt=\"空白ASP.NET CORE项目\"></p>\n<h4 id=\"Nuget获取引用\"><a href=\"#Nuget获取引用\" class=\"headerlink\" title=\"Nuget获取引用\"></a>Nuget获取引用</h4><p><a href=\"https://www.nuget.org/packages/AngleSharp/\">https://www.nuget.org/packages/AngleSharp/</a></p>\n<p><a href=\"https://www.nuget.org/packages/Newtonsoft.Json\">https://www.nuget.org/packages/Newtonsoft.Json</a></p>\n<h4 id=\"添加Controllers文件夹\"><a href=\"#添加Controllers文件夹\" class=\"headerlink\" title=\"添加Controllers文件夹\"></a>添加Controllers文件夹</h4><p>然后把之前项目的Controllers拷贝过来，改掉命名空间，去掉无用代码，添加相应引用。</p>\n<h4 id=\"添加Views文件夹\"><a href=\"#添加Views文件夹\" class=\"headerlink\" title=\"添加Views文件夹\"></a>添加Views文件夹</h4><p>本项目直接把之前项目的Views拷贝过来是完全没有问题的。</p>\n<h4 id=\"静态文件处理\"><a href=\"#静态文件处理\" class=\"headerlink\" title=\"静态文件处理\"></a>静态文件处理</h4><p>asp.net core MVC中的文件结构和asp.net mvc的文件结构略有不同。</p>\n<p>asp.net core MVC在view中“IMG/Little/PaleGreen.png”对应的文件对应于“项目路径/webroot/IMG/Little/PaleGreen.png”；</p>\n<p>而asp.net mvc中，对应路径为“项目/IMG/Little/PaleGreen.png”。</p>\n<p>因而，我们的所有静态文件都应该放到：webroot文件夹下。</p>\n<p>上面的都做完了之后，项目结构如下：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/2fee156b-2505-4953-bfe9-1d2521f13565\" alt=\"项目结构\"></p>\n<p>接下来就是改代码了。</p>\n<h3 id=\"代码迁移\"><a href=\"#代码迁移\" class=\"headerlink\" title=\"代码迁移\"></a>代码迁移</h3><h4 id=\"Startup-cs添加MVC\"><a href=\"#Startup-cs添加MVC\" class=\"headerlink\" title=\"Startup.cs添加MVC\"></a>Startup.cs添加MVC</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">public</span> <span class=\"selector-tag\">class</span> <span class=\"selector-tag\">Startup</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// This method gets called by the runtime. Use this method to add services to the container.</span></div><div class=\"line\">    <span class=\"comment\">// For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=398940</span></div><div class=\"line\">    <span class=\"selector-tag\">public</span> <span class=\"selector-tag\">void</span> <span class=\"selector-tag\">ConfigureServices</span>(IServiceCollection services)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">//添加MVC框架</span></div><div class=\"line\">        services<span class=\"selector-class\">.AddMvc</span>();</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span></div><div class=\"line\">    <span class=\"selector-tag\">public</span> <span class=\"selector-tag\">void</span> <span class=\"selector-tag\">Configure</span>(IApplicationBuilder app, IHostingEnvironment env,</div><div class=\"line\">    ILoggerFactory loggerFactory)</div><div class=\"line\">    &#123;</div><div class=\"line\">        loggerFactory<span class=\"selector-class\">.AddConsole</span>();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"selector-tag\">if</span> (env.IsDevelopment())</div><div class=\"line\">        &#123;</div><div class=\"line\">            app<span class=\"selector-class\">.UseDeveloperExceptionPage</span>();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//启用静态文件中间件</span></div><div class=\"line\">        app<span class=\"selector-class\">.UseStaticFiles</span>();</div><div class=\"line\">        <span class=\"comment\">//启动MVC路由</span></div><div class=\"line\">        app<span class=\"selector-class\">.UseMvcWithDefaultRoute</span>();</div><div class=\"line\">        <span class=\"comment\">//设置默认页面</span></div><div class=\"line\">        <span class=\"selector-tag\">app</span><span class=\"selector-class\">.UseMvc</span>(routes =&gt;</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"selector-tag\">routes</span><span class=\"selector-class\">.MapRoute</span>(</div><div class=\"line\">                <span class=\"attribute\">name</span>: <span class=\"string\">\"default\"</span>,</div><div class=\"line\">                <span class=\"attribute\">template</span>: <span class=\"string\">\"&#123;controller=House&#125;/&#123;action=Index&#125;/&#123;id?&#125;\"</span>); </div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">      </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"改写GetHTMLByURL方法\"><a href=\"#改写GetHTMLByURL方法\" class=\"headerlink\" title=\"改写GetHTMLByURL方法\"></a>改写GetHTMLByURL方法</h4><p>之前的方法：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/d005a100-e3e6-423b-b34c-3eae11b2ab63\" alt=\"old GetHTMLByURL\"></p>\n<p>.net core重写了HttpWebRequest，变成了WebRequest,所以上面的代码废了。</p>\n<p>重写如下：</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static <span class=\"keyword\">string</span> GetHTMLByURL(<span class=\"keyword\">string</span> Url, <span class=\"keyword\">string</span> <span class=\"built_in\">type</span> = <span class=\"string\">\"UTF-8\"</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">    try</div><div class=\"line\">    &#123;</div><div class=\"line\">        Url = Url.ToLower();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">System</span>.Net.WebRequest wReq = <span class=\"keyword\">System</span>.Net.WebRequest.<span class=\"keyword\">Create</span>(Url);</div><div class=\"line\">        <span class=\"comment\">// Get the response instance.</span></div><div class=\"line\">        <span class=\"keyword\">System</span>.Net.WebResponse wResp = wReq.GetResponseAsync().Result;</div><div class=\"line\">        <span class=\"keyword\">System</span>.IO.Stream respStream = wResp.GetResponseStream();</div><div class=\"line\">        using (<span class=\"keyword\">System</span>.IO.StreamReader reader = <span class=\"keyword\">new</span> <span class=\"keyword\">System</span>.IO.</div><div class=\"line\">        StreamReader(respStream, Encoding.GetEncoding(<span class=\"built_in\">type</span>)))</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> reader.ReadToEnd();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    catch (<span class=\"keyword\">System</span>.Exception ex)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>.Empty;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"改写Controller代码\"><a href=\"#改写Controller代码\" class=\"headerlink\" title=\"改写Controller代码\"></a>改写Controller代码</h4><p>嗯，换了命名空间，别的一句都没改直接拉过来了…略过。</p>\n<h3 id=\"发布到ubuntu\"><a href=\"#发布到ubuntu\" class=\"headerlink\" title=\"发布到ubuntu\"></a>发布到ubuntu</h3><p><a href=\"https://www.microsoft.com/net/core#ubuntu\">Install for Ubuntu 14.04, 16.04 &amp; Linux Mint 17</a></p>\n<p>第一步<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Ubuntu 14.04 / Linux Mint 17</span></div><div class=\"line\">sudo <span class=\"keyword\">sh</span> -c 'echo <span class=\"string\">\"deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ trusty main\"</span> &gt; /etc/apt/sources.<span class=\"keyword\">list</span>.<span class=\"keyword\">d</span>/dotnetdev.<span class=\"keyword\">list</span>'</div><div class=\"line\">sudo apt-key adv --keyserver apt-mo.trafficmanager.<span class=\"keyword\">net</span> --recv-keys 417A0893</div><div class=\"line\">sudo apt-get <span class=\"keyword\">update</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Ubuntu 16.04</span></div><div class=\"line\">sudo <span class=\"keyword\">sh</span> -c 'echo <span class=\"string\">\"deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ xenial main\"</span> &gt; /etc/apt/sources.<span class=\"keyword\">list</span>.<span class=\"keyword\">d</span>/dotnetdev.<span class=\"keyword\">list</span>'</div><div class=\"line\">sudo apt-key adv --keyserver apt-mo.trafficmanager.<span class=\"keyword\">net</span> --recv-keys 417A0893</div><div class=\"line\">sudo apt-get <span class=\"keyword\">update</span></div></pre></td></tr></table></figure></p>\n<p>第二步<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install dotnet-dev<span class=\"number\">-1.0</span><span class=\"number\">.0</span>-preview2<span class=\"number\">-003131</span></div></pre></td></tr></table></figure></p>\n<p>安装好了之后，输入 dotnet -v 应该能看到版本信息，如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/6ebca12e-2be9-487e-b230-d22562a5aabe\" alt=\"dotnet -v \"></p>\n<p>这样的下，一句完成了ubuntu 运行asp.net core的环境搭建了。</p>\n<h3 id=\"project-json里面隐藏的坑\"><a href=\"#project-json里面隐藏的坑\" class=\"headerlink\" title=\"project.json里面隐藏的坑\"></a>project.json里面隐藏的坑</h3><h4 id=\"dependencies\"><a href=\"#dependencies\" class=\"headerlink\" title=\"dependencies\"></a>dependencies</h4><p>NET Core 1.0.1 - VS 2015 Tooling Preview 2模板的asp.net core 版本和ubuntu 的asp.net core 版本不一致。</p>\n<p>根据微软爸给的教程，我们在ubuntu上安装的.NET Core 1.0.0，见上图。</p>\n<p>然而我们创建项目的模板是.NET Core 1.0.1，见下图:</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/a3192bdf-f548-4fad-868a-4865632acd29\" alt=\".NET Core 1.0.1\"></p>\n<p>怎么办？要不升级ubuntu的asp.net core，要不降级。</p>\n<p>由于没找到.NET Core 1.0.1 ubuntu的安装包，所以我选择了降级到.NET Core 1.0.0.</p>\n<p>其中需要把Microsoft.NETCore.App version 、Microsoft.AspNetCore.Server.Kestrel、Microsoft.AspNetCore.Mvc 这三个节点都改成“1.0.0”。如下：</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">  <span class=\"string\">\"Microsoft.NETCore.App\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"platform\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"Microsoft.AspNetCore.Diagnostics\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"string\">\"Microsoft.AspNetCore.Server.IISIntegration\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"string\">\"Microsoft.AspNetCore.Server.Kestrel\"</span>: <span class=\"string\">\"1.0.1\"</span>,</div><div class=\"line\">  <span class=\"string\">\"Microsoft.Extensions.Logging.Console\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"string\">\"Microsoft.AspNetCore.Mvc\"</span>: <span class=\"string\">\"1.0.1\"</span>,</div><div class=\"line\">  <span class=\"string\">\"Microsoft.AspNetCore.StaticFiles\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"string\">\"Newtonsoft.Json\"</span>: <span class=\"string\">\"9.0.1\"</span>,</div><div class=\"line\">  <span class=\"string\">\"AngleSharp\"</span>: <span class=\"string\">\"0.9.8.1\"</span></div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h4 id=\"publishOptions\"><a href=\"#publishOptions\" class=\"headerlink\" title=\"publishOptions\"></a>publishOptions</h4><p>发布输出包括Views文件夹<br><figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"publishOptions\"</span>: &#123;</div><div class=\"line\">  <span class=\"string\">\"include\"</span>: [</div><div class=\"line\">    <span class=\"string\">\"wwwroot\"</span>,</div><div class=\"line\">    <span class=\"string\">\"web.config\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Views\"</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<h4 id=\"runtimes\"><a href=\"#runtimes\" class=\"headerlink\" title=\"runtimes\"></a>runtimes</h4><p>runtimes 配置为模板运行平台。<br>详细见链接：<a href=\"https://docs.nuget.org/ndocs/schema/project.json\">https://docs.nuget.org/ndocs/schema/project.json</a></p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"runtimes\"</span>: &#123; <span class=\"string\">\"ubuntu.14.04-x64\"</span>: &#123;&#125; &#125;</div></pre></td></tr></table></figure>\n<p>上面都弄好之后，跑一下看,如下图：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">dotnet <span class=\"keyword\">restore</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">dotnet</span> run</div></pre></td></tr></table></figure>\n<p>来个请求看看：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/b1191226-c33b-45c7-98cc-f62bb3ea73b4\" alt=\"请求log\"></p>\n<h3 id=\"jexus转发-反向代理\"><a href=\"#jexus转发-反向代理\" class=\"headerlink\" title=\"jexus转发/反向代理\"></a>jexus转发/反向代理</h3><p><a href=\"http://www.cnblogs.com/gaobing/p/5663012.html\">ASP.NET Core “完整发布,自带运行时” 到jexus</a></p>\n"},{"layout":"post","title":"ASP.NET Core Middleware","date":"2016-07-31T16:00:00.000Z","_content":"\n在ASP.NET 时代，一般来说我们很少会用到HttpModule/HttpHandler，然而有些场景我们使用HttpModule/HttpHandler倒方便快捷完成我们的需求。有兴趣了解HttpModule/HttpHandler以及使用场景的话，可以看下面这个链接的内容。\n\n[选择HttpHandler还是HttpModule？](http://www.cnblogs.com/fish-li/archive/2013/01/04/2844908.html)\n\n来到ASP.NET Core时代，类似功能的内容可能我们看得就要多得多了。因为在ASP.NET Core时代，微软将HttpModule“变更”之后，并为它授予了更灵活应用场景。\n\n\n这就是这个文章要介绍的主角：Middleware（中间件）。\n\n\n## Middleware\n\n为了使用跨平台，ASP.NET Core整个架构和代码都重写了一遍，所以 HttpModule 自然也就不存在了。但是相似的功能还是有的，它的名字叫： Middleware。和以前不同，在ASP.NET Core中我们将会经常看到 Middleware的存在，因为现在的每一个服务都是用Middleware的方式呈现在ASP.NET Core 管道中。不仅如此，meddleware比起之前的HttpModule也更弹性易用了。\n\n首先先来看看什么是middleware。\n\n```csharp\n\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env, \n                      ILoggerFactory loggerFactory)\n{\n    loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\n    loggerFactory.AddDebug();\n\n    app.UseStaticFiles();\n\n    app.UseMvc(routes =>\n    {\n        routes.MapRoute(\"default\",\n        \"{controller=Home}/{action=Index}/{id?}\");\n    });\n}\n\n```\n看过ASP.NET Core项目的话，相信大家对Satarup.cs并不会陌生。在Starup.cs里面便有一个Configure()函数用于定义项目需要使用哪些middleware。\n\n上面的例子使用了两个middleware，一个是 UseStaticFiles，另一个是 UseMvc。这两个都是core自带的middleware，所以我们可以直接使用。UseStaticFiles 是为HTTP Request提供存取网站的文件，简单理解就是使得网站上的静态文件可访问，而UseMvc就是启用MVC routing机制。有了这两个middleware，我们的的网站就有了MVC routing和读取静态文件的功能。\n\n如果我们把UseMvc去掉，那么MVC routing也就不存在了，我们输入 http://website/[Controller]/[Action] 类似的地址也就无效了。\n\n### 和HttpModule的不同之处\n\n在使用HttpModule的时候，我们是在实现/重写接口，这个时候就要求我们在适当的地方做适当的事情。例如，要做 authorization 的话就最好在 HttpModule 定义好的 Authorization 事件 (AuthorizatRequest) 中完成这个功能。在 ASP.NET life cycle 的文件里我们可以查到 HttpModule  定义了那些事件，每一個事件都有哪些特別的功能。因此我们需要全面了解之后再来选择实现/重写我们需要的事件。而在Middleware中，完全没有这样的限制，也不存在这样的事件，我们可以自行设计实现我们的机制。\n\n## Middleware 流程\n[https://docs.asp.net/en/latest/fundamentals/middleware.html](https://docs.asp.net/en/latest/fundamentals/middleware.html) 这个文章中说明了基本的middleware概念。目前asp.net docs里面有不少的内容都是开源社区开发者贡献的\n\n在这个文章里面有一个简单的流程图说明了ASP.NET runtime中middleware的执行过程。\n\n![middleware执行过程](http://7xread.com1.z0.glb.clouddn.com/0b6d43ad-7d95-48ea-bbf3-ea7a93c4a366)\n\n在 middleware 里面一定要定义 Invoke()函数，因为这是让 engine 默认调用 middleware 的Incoke函数。Middleware 里面所需要做什么事情就放在 Invoke() 里面，同时 Invoke() 里面还需要调用下一个 middleware。因此执行内容就如上图所示。Middleware 之间除了必须传送 HttpContext之外，也可以自定义传入其他的参数，这比以前的HttpModule方便多了。\n\n\n所以当 HTTP request 进来之后，engine 便会呼叫第一个 middleware 的 Invoke()，同时把传入HttpContext，然后第一个 middleware 可以再接着呼叫第二个 middleware 的 Invoke()，同时再把 HttpContext 继续传入，一直到最后一个middleware 的 Invoke() 结束之后，整个 HttpContext 的內容可能在 middleware 里面新增或被改变了，最后再按照整個原先的 call stack 从最后一个 middleware 回到第一个 middleware，再通过  engine 回传到client 端，完成request.\n\n\n下来通过一个例子我们一起来了解一下Middleware。\n\n## 编写简单的 Middleware \n\n```csharp\npublic class SampleMiddleware\n{\n    private readonly RequestDelegate _next;\n\n    public SampleMiddleware(RequestDelegate next)\n    {\n        _next = next;\n    }\n\n    public async Task Invoke(HttpContext context)\n    {\n        if (string.IsNullOrEmpty(context.User.Identity.Name))\n        {\n            context.Response.Redirect(\"/NoName.html\");\n            return;\n        }\n        await _next.Invoke(context);\n    }\n}\n\n```\n\n\n这一个middleware的名字叫SampleMiddleware。它有一个构造函数以及Invoke函数，而Invoke()只接收一个参数HttpContext。\n\n_next是一个叫 RequestDelegate类型，换言之这就是一个delegate，用于代表下一个middleware是谁。所以在构造函数中要把下一个middleware delegate传入。看到这里或许会觉得奇怪，我们的middleware在执行过程中怎么会知道下一个middleware是谁？这一部分稍后解释。\n\n\n在 Invoke() 里面，在 await _next.Invoke() 之前都是当前middleware的逻辑代码，从上面流程图来看的话就是由左自右的方向． await _next.Invoke() 之后的代码是就是流程图上由右至右的方向，因此，透過这样简单的设计，开发者就能很明确地控制什么样逻辑要先做或后做了。\n\n在 SampleMiddleware 之中，这里只做了一個很简单的动作，如果 username 是空白的话，就将该连接重定向到到 NoName.html 然后中断 middleware 的执行。\n\n为了能让这个middleware作为 ApplicationBuilder来使用，我们另外需要写一个扩展方法。代码如下：\n\n```csharp\n\npublic static partial class MiddlewareExtensions\n{\n    public static IApplicationBuilder UseSampleMiddleware(\n    this IApplicationBuilder builder)\n    {\n        return builder.UseMiddleware<SampleMiddleware>();\n    }\n}\n```\n\n这给扩展方法建立了UseSampleMiddleware()，使得我们可以让ApplicationBuilder 去读 SampleMiddleware。\n\n这是回到Startup.cs中，在 Configure() 里面我们就可以把 SampleMiddleware 加入到我们的 pipeline中了。具体代码如下：\n```csharp\n\npublic void Configure(IApplicationBuilder app,IHostingEnvironment env, \n                      ILoggerFactory loggerFactory)\n{\n    loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\n    loggerFactory.AddDebug();\n\n    app.UseStaticFiles();\n\n    app.UseSampleMiddleware();   // <-- SampleMiddleware\n\n    app.UseMvc(routes =>\n    {\n        routes.MapRoute(\"default\",\n        \"{controller=Home}/{action=Index}/{id?}\");\n    });\n}\n\n```\n把 SampleMiddleware 放在 UseStaticFiles 和 UseMvc 之间，也就是说在 http request 还沒进入到 MVC routing 之前，就会先检查 HttpContext 里面是不是有空白的 username。很显然username肯定是空白的，因为我并沒有加入任何使用者验证代码这里面，所以利用 dotnet run 來运行这个项目的时候，你就会看到 Http code 302 出現，它的意思就是 http redirect，也就是 SampleMiddleware 里面面所做的 redirect 发生作用了。\n\n![http redirect](http://7xread.com1.z0.glb.clouddn.com/1d7e4c87-9fff-4401-8933-36dcbf857199)\n\n## Middleware 的执行顺序很重要\n\n前面解释了 middleware 执行过程是一个接着一个的．不同的 middleware 对 HttpContext 的內容都可能有不同的处理或更改，因此执行舒服便格外重要。举个例子，如果将上面 Configure() 的代码变更如下:\n\n```csharp\n\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env,\n                       ILoggerFactory loggerFactory)\n{\n    loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\n    loggerFactory.AddDebug();\n\n    app.UseSampleMiddleware();   // SampleMiddleware\n\n    app.UseStaticFiles();        // StaticFiles\n\n    app.UseMvc(routes =>\n    {\n        routes.MapRoute(\"default\",\"{controller=Home}/{action=Index}/{id?}\");\n    });\n}\n```\n我们把SampleMiddleware 放到StaticFiles 之前。这就导致在 SampleMiddleware 里重定向到 NoName.html会失败。\n\n为什么会失败呢? 因为我们的 ApplicationBuilder 执行到行到 SampleMiddleware 时候重定向到NoName.html，也就是做读取静态页面，而这个功能服务方是在下一个 middleware (StaticFiles) 才会提供的，因此 ApplicationBuilder 无法找到 NoName.html，所以在浏览器上也就看不到 NoName.html 的內容。\n\n#### Middleware 这样的设计带来了很大的方便和弹性，同時我们自己也要小心 middleware 前后相依性的问题。\n\n## Middleware 背后原理\n\n现在 ASP.NET Core 已是开源项目了，所以最后说明一下 middleware 原理的基本概念．整個 ASP.NET fundamental 的部份用了许多的 function delegate , task, denepdency injection 的编写方法，所以要看 source code 之前，建议先对这三个东西先行了解，这样对理解 ASP.NET Core源码很有帮助．\n\n在前面的代码中，我们看到 RequestDelegate,  顾名思义就知道这是一个delegate（委托），它是用来代表 middleware 的 delegate. 它的 source code 在 [RequestDelegate.cs](https://github.com/aspnet/httpabstractions/blob/master/src/Microsoft.AspNet.Http.Abstractions/RequestDelegate.cs)\n\nIApplicationBuilder interface 是一個相当重要的接口，它定义了整個APP要用哪些服务和參數，当然也包含要使用那些 middleware，它的 souce code 在 [IApplicationBuilder.cs](https://github.com/aspnet/httpabstractions/blob/master/src/Microsoft.AspNet.Http.Abstractions/IApplicationBuilder.cs)。\n\n其中你可以看到 Use()，通过 Use() 的实例就可以把 middleware delegate 注册到 host engine 上。\n\n另外一个就是 UseMiddlewareExtensions ，前面的代码曾用了 builder.UseMiddleware<SampleMiddleware>(); 它会检查你写的 middleware 是不是合法的，比如有沒有 Invoke()，是不是只有一个Invoke()，Invoke() 的参数有沒有一个是 HttpContext type，所有的检查都通过之后便建立出该middleware instance 的 delegate。\n\n因此，当你的 ASP.NET Core APP刚启动的时候，在 Startup.cs 的 Configure() 就会把所有的 middleware delegate 建立起來，然后依序地放到內部的 stack 结构中。以上面的范例来说， stack 结构第一个元素是 StaticFiles,  然后是 SampleMiddleware 最后是 Mvc。接着每個 middleware 要被建立时是做 stack pop 的操作，所以 Mvc 的 _next 是 engine 里一些內部的 middleware 处理器，然後 pop 出 SampleMiddleware 时，就把 SampleMiddleware 的 _next 指向前面一個 pop 出來的 Mvc。依照着这样的逻辑一直到最前面的 middleware。所以在 host engine 在 Build() 之前这些动作都会完成，然后 host engine 才能执行Run()。有关 host engine 可參考 \n[WebHostBuilder.cs](https://github.com/aspnet/hosting/blob/master/src/Microsoft.AspNet.Hosting/WebHostBuilder.cs)\n\n\n全文完。\n\n\n本文整理于[https://dotblogs.com.tw/aspnetshare/2016/03/20/201603191](https://dotblogs.com.tw/aspnetshare/2016/03/20/201603191)并已征得作者同意。\n感谢Bruce的分享。","source":"_posts/ASP.NET-Core-Middleware.md","raw":"---\nlayout: post\ntitle: ASP.NET Core Middleware\ncategory: .net core\ndate: 2016-08-01 00:00:00\ntags:\n-\n---\n\n在ASP.NET 时代，一般来说我们很少会用到HttpModule/HttpHandler，然而有些场景我们使用HttpModule/HttpHandler倒方便快捷完成我们的需求。有兴趣了解HttpModule/HttpHandler以及使用场景的话，可以看下面这个链接的内容。\n\n[选择HttpHandler还是HttpModule？](http://www.cnblogs.com/fish-li/archive/2013/01/04/2844908.html)\n\n来到ASP.NET Core时代，类似功能的内容可能我们看得就要多得多了。因为在ASP.NET Core时代，微软将HttpModule“变更”之后，并为它授予了更灵活应用场景。\n\n\n这就是这个文章要介绍的主角：Middleware（中间件）。\n\n\n## Middleware\n\n为了使用跨平台，ASP.NET Core整个架构和代码都重写了一遍，所以 HttpModule 自然也就不存在了。但是相似的功能还是有的，它的名字叫： Middleware。和以前不同，在ASP.NET Core中我们将会经常看到 Middleware的存在，因为现在的每一个服务都是用Middleware的方式呈现在ASP.NET Core 管道中。不仅如此，meddleware比起之前的HttpModule也更弹性易用了。\n\n首先先来看看什么是middleware。\n\n```csharp\n\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env, \n                      ILoggerFactory loggerFactory)\n{\n    loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\n    loggerFactory.AddDebug();\n\n    app.UseStaticFiles();\n\n    app.UseMvc(routes =>\n    {\n        routes.MapRoute(\"default\",\n        \"{controller=Home}/{action=Index}/{id?}\");\n    });\n}\n\n```\n看过ASP.NET Core项目的话，相信大家对Satarup.cs并不会陌生。在Starup.cs里面便有一个Configure()函数用于定义项目需要使用哪些middleware。\n\n上面的例子使用了两个middleware，一个是 UseStaticFiles，另一个是 UseMvc。这两个都是core自带的middleware，所以我们可以直接使用。UseStaticFiles 是为HTTP Request提供存取网站的文件，简单理解就是使得网站上的静态文件可访问，而UseMvc就是启用MVC routing机制。有了这两个middleware，我们的的网站就有了MVC routing和读取静态文件的功能。\n\n如果我们把UseMvc去掉，那么MVC routing也就不存在了，我们输入 http://website/[Controller]/[Action] 类似的地址也就无效了。\n\n### 和HttpModule的不同之处\n\n在使用HttpModule的时候，我们是在实现/重写接口，这个时候就要求我们在适当的地方做适当的事情。例如，要做 authorization 的话就最好在 HttpModule 定义好的 Authorization 事件 (AuthorizatRequest) 中完成这个功能。在 ASP.NET life cycle 的文件里我们可以查到 HttpModule  定义了那些事件，每一個事件都有哪些特別的功能。因此我们需要全面了解之后再来选择实现/重写我们需要的事件。而在Middleware中，完全没有这样的限制，也不存在这样的事件，我们可以自行设计实现我们的机制。\n\n## Middleware 流程\n[https://docs.asp.net/en/latest/fundamentals/middleware.html](https://docs.asp.net/en/latest/fundamentals/middleware.html) 这个文章中说明了基本的middleware概念。目前asp.net docs里面有不少的内容都是开源社区开发者贡献的\n\n在这个文章里面有一个简单的流程图说明了ASP.NET runtime中middleware的执行过程。\n\n![middleware执行过程](http://7xread.com1.z0.glb.clouddn.com/0b6d43ad-7d95-48ea-bbf3-ea7a93c4a366)\n\n在 middleware 里面一定要定义 Invoke()函数，因为这是让 engine 默认调用 middleware 的Incoke函数。Middleware 里面所需要做什么事情就放在 Invoke() 里面，同时 Invoke() 里面还需要调用下一个 middleware。因此执行内容就如上图所示。Middleware 之间除了必须传送 HttpContext之外，也可以自定义传入其他的参数，这比以前的HttpModule方便多了。\n\n\n所以当 HTTP request 进来之后，engine 便会呼叫第一个 middleware 的 Invoke()，同时把传入HttpContext，然后第一个 middleware 可以再接着呼叫第二个 middleware 的 Invoke()，同时再把 HttpContext 继续传入，一直到最后一个middleware 的 Invoke() 结束之后，整个 HttpContext 的內容可能在 middleware 里面新增或被改变了，最后再按照整個原先的 call stack 从最后一个 middleware 回到第一个 middleware，再通过  engine 回传到client 端，完成request.\n\n\n下来通过一个例子我们一起来了解一下Middleware。\n\n## 编写简单的 Middleware \n\n```csharp\npublic class SampleMiddleware\n{\n    private readonly RequestDelegate _next;\n\n    public SampleMiddleware(RequestDelegate next)\n    {\n        _next = next;\n    }\n\n    public async Task Invoke(HttpContext context)\n    {\n        if (string.IsNullOrEmpty(context.User.Identity.Name))\n        {\n            context.Response.Redirect(\"/NoName.html\");\n            return;\n        }\n        await _next.Invoke(context);\n    }\n}\n\n```\n\n\n这一个middleware的名字叫SampleMiddleware。它有一个构造函数以及Invoke函数，而Invoke()只接收一个参数HttpContext。\n\n_next是一个叫 RequestDelegate类型，换言之这就是一个delegate，用于代表下一个middleware是谁。所以在构造函数中要把下一个middleware delegate传入。看到这里或许会觉得奇怪，我们的middleware在执行过程中怎么会知道下一个middleware是谁？这一部分稍后解释。\n\n\n在 Invoke() 里面，在 await _next.Invoke() 之前都是当前middleware的逻辑代码，从上面流程图来看的话就是由左自右的方向． await _next.Invoke() 之后的代码是就是流程图上由右至右的方向，因此，透過这样简单的设计，开发者就能很明确地控制什么样逻辑要先做或后做了。\n\n在 SampleMiddleware 之中，这里只做了一個很简单的动作，如果 username 是空白的话，就将该连接重定向到到 NoName.html 然后中断 middleware 的执行。\n\n为了能让这个middleware作为 ApplicationBuilder来使用，我们另外需要写一个扩展方法。代码如下：\n\n```csharp\n\npublic static partial class MiddlewareExtensions\n{\n    public static IApplicationBuilder UseSampleMiddleware(\n    this IApplicationBuilder builder)\n    {\n        return builder.UseMiddleware<SampleMiddleware>();\n    }\n}\n```\n\n这给扩展方法建立了UseSampleMiddleware()，使得我们可以让ApplicationBuilder 去读 SampleMiddleware。\n\n这是回到Startup.cs中，在 Configure() 里面我们就可以把 SampleMiddleware 加入到我们的 pipeline中了。具体代码如下：\n```csharp\n\npublic void Configure(IApplicationBuilder app,IHostingEnvironment env, \n                      ILoggerFactory loggerFactory)\n{\n    loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\n    loggerFactory.AddDebug();\n\n    app.UseStaticFiles();\n\n    app.UseSampleMiddleware();   // <-- SampleMiddleware\n\n    app.UseMvc(routes =>\n    {\n        routes.MapRoute(\"default\",\n        \"{controller=Home}/{action=Index}/{id?}\");\n    });\n}\n\n```\n把 SampleMiddleware 放在 UseStaticFiles 和 UseMvc 之间，也就是说在 http request 还沒进入到 MVC routing 之前，就会先检查 HttpContext 里面是不是有空白的 username。很显然username肯定是空白的，因为我并沒有加入任何使用者验证代码这里面，所以利用 dotnet run 來运行这个项目的时候，你就会看到 Http code 302 出現，它的意思就是 http redirect，也就是 SampleMiddleware 里面面所做的 redirect 发生作用了。\n\n![http redirect](http://7xread.com1.z0.glb.clouddn.com/1d7e4c87-9fff-4401-8933-36dcbf857199)\n\n## Middleware 的执行顺序很重要\n\n前面解释了 middleware 执行过程是一个接着一个的．不同的 middleware 对 HttpContext 的內容都可能有不同的处理或更改，因此执行舒服便格外重要。举个例子，如果将上面 Configure() 的代码变更如下:\n\n```csharp\n\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env,\n                       ILoggerFactory loggerFactory)\n{\n    loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\n    loggerFactory.AddDebug();\n\n    app.UseSampleMiddleware();   // SampleMiddleware\n\n    app.UseStaticFiles();        // StaticFiles\n\n    app.UseMvc(routes =>\n    {\n        routes.MapRoute(\"default\",\"{controller=Home}/{action=Index}/{id?}\");\n    });\n}\n```\n我们把SampleMiddleware 放到StaticFiles 之前。这就导致在 SampleMiddleware 里重定向到 NoName.html会失败。\n\n为什么会失败呢? 因为我们的 ApplicationBuilder 执行到行到 SampleMiddleware 时候重定向到NoName.html，也就是做读取静态页面，而这个功能服务方是在下一个 middleware (StaticFiles) 才会提供的，因此 ApplicationBuilder 无法找到 NoName.html，所以在浏览器上也就看不到 NoName.html 的內容。\n\n#### Middleware 这样的设计带来了很大的方便和弹性，同時我们自己也要小心 middleware 前后相依性的问题。\n\n## Middleware 背后原理\n\n现在 ASP.NET Core 已是开源项目了，所以最后说明一下 middleware 原理的基本概念．整個 ASP.NET fundamental 的部份用了许多的 function delegate , task, denepdency injection 的编写方法，所以要看 source code 之前，建议先对这三个东西先行了解，这样对理解 ASP.NET Core源码很有帮助．\n\n在前面的代码中，我们看到 RequestDelegate,  顾名思义就知道这是一个delegate（委托），它是用来代表 middleware 的 delegate. 它的 source code 在 [RequestDelegate.cs](https://github.com/aspnet/httpabstractions/blob/master/src/Microsoft.AspNet.Http.Abstractions/RequestDelegate.cs)\n\nIApplicationBuilder interface 是一個相当重要的接口，它定义了整個APP要用哪些服务和參數，当然也包含要使用那些 middleware，它的 souce code 在 [IApplicationBuilder.cs](https://github.com/aspnet/httpabstractions/blob/master/src/Microsoft.AspNet.Http.Abstractions/IApplicationBuilder.cs)。\n\n其中你可以看到 Use()，通过 Use() 的实例就可以把 middleware delegate 注册到 host engine 上。\n\n另外一个就是 UseMiddlewareExtensions ，前面的代码曾用了 builder.UseMiddleware<SampleMiddleware>(); 它会检查你写的 middleware 是不是合法的，比如有沒有 Invoke()，是不是只有一个Invoke()，Invoke() 的参数有沒有一个是 HttpContext type，所有的检查都通过之后便建立出该middleware instance 的 delegate。\n\n因此，当你的 ASP.NET Core APP刚启动的时候，在 Startup.cs 的 Configure() 就会把所有的 middleware delegate 建立起來，然后依序地放到內部的 stack 结构中。以上面的范例来说， stack 结构第一个元素是 StaticFiles,  然后是 SampleMiddleware 最后是 Mvc。接着每個 middleware 要被建立时是做 stack pop 的操作，所以 Mvc 的 _next 是 engine 里一些內部的 middleware 处理器，然後 pop 出 SampleMiddleware 时，就把 SampleMiddleware 的 _next 指向前面一個 pop 出來的 Mvc。依照着这样的逻辑一直到最前面的 middleware。所以在 host engine 在 Build() 之前这些动作都会完成，然后 host engine 才能执行Run()。有关 host engine 可參考 \n[WebHostBuilder.cs](https://github.com/aspnet/hosting/blob/master/src/Microsoft.AspNet.Hosting/WebHostBuilder.cs)\n\n\n全文完。\n\n\n本文整理于[https://dotblogs.com.tw/aspnetshare/2016/03/20/201603191](https://dotblogs.com.tw/aspnetshare/2016/03/20/201603191)并已征得作者同意。\n感谢Bruce的分享。","slug":"ASP.NET-Core-Middleware","published":1,"updated":"2016-10-15T05:20:24.550Z","comments":1,"photos":[],"link":"","_id":"cj0dyumvk00086kunt8xc9dib","content":"<p>在ASP.NET 时代，一般来说我们很少会用到HttpModule/HttpHandler，然而有些场景我们使用HttpModule/HttpHandler倒方便快捷完成我们的需求。有兴趣了解HttpModule/HttpHandler以及使用场景的话，可以看下面这个链接的内容。</p>\n<p><a href=\"http://www.cnblogs.com/fish-li/archive/2013/01/04/2844908.html\" target=\"_blank\" rel=\"external\">选择HttpHandler还是HttpModule？</a></p>\n<p>来到ASP.NET Core时代，类似功能的内容可能我们看得就要多得多了。因为在ASP.NET Core时代，微软将HttpModule“变更”之后，并为它授予了更灵活应用场景。</p>\n<p>这就是这个文章要介绍的主角：Middleware（中间件）。</p>\n<h2 id=\"Middleware\"><a href=\"#Middleware\" class=\"headerlink\" title=\"Middleware\"></a>Middleware</h2><p>为了使用跨平台，ASP.NET Core整个架构和代码都重写了一遍，所以 HttpModule 自然也就不存在了。但是相似的功能还是有的，它的名字叫： Middleware。和以前不同，在ASP.NET Core中我们将会经常看到 Middleware的存在，因为现在的每一个服务都是用Middleware的方式呈现在ASP.NET Core 管道中。不仅如此，meddleware比起之前的HttpModule也更弹性易用了。</p>\n<p>首先先来看看什么是middleware。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env, </span></span></div><div class=\"line\">                      ILoggerFactory loggerFactory)</div><div class=\"line\">&#123;</div><div class=\"line\">    loggerFactory.AddConsole(Configuration.GetSection(<span class=\"string\">\"Logging\"</span>));</div><div class=\"line\">    loggerFactory.AddDebug();</div><div class=\"line\"></div><div class=\"line\">    app.UseStaticFiles();</div><div class=\"line\"></div><div class=\"line\">    app.UseMvc(routes =&gt;</div><div class=\"line\">    &#123;</div><div class=\"line\">        routes.MapRoute(<span class=\"string\">\"default\"</span>,</div><div class=\"line\">        <span class=\"string\">\"&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>看过ASP.NET Core项目的话，相信大家对Satarup.cs并不会陌生。在Starup.cs里面便有一个Configure()函数用于定义项目需要使用哪些middleware。</p>\n<p>上面的例子使用了两个middleware，一个是 UseStaticFiles，另一个是 UseMvc。这两个都是core自带的middleware，所以我们可以直接使用。UseStaticFiles 是为HTTP Request提供存取网站的文件，简单理解就是使得网站上的静态文件可访问，而UseMvc就是启用MVC routing机制。有了这两个middleware，我们的的网站就有了MVC routing和读取静态文件的功能。</p>\n<p>如果我们把UseMvc去掉，那么MVC routing也就不存在了，我们输入 <a href=\"http://website/[Controller]/[Action\" target=\"_blank\" rel=\"external\">http://website/[Controller]/[Action</a>] 类似的地址也就无效了。</p>\n<h3 id=\"和HttpModule的不同之处\"><a href=\"#和HttpModule的不同之处\" class=\"headerlink\" title=\"和HttpModule的不同之处\"></a>和HttpModule的不同之处</h3><p>在使用HttpModule的时候，我们是在实现/重写接口，这个时候就要求我们在适当的地方做适当的事情。例如，要做 authorization 的话就最好在 HttpModule 定义好的 Authorization 事件 (AuthorizatRequest) 中完成这个功能。在 ASP.NET life cycle 的文件里我们可以查到 HttpModule  定义了那些事件，每一個事件都有哪些特別的功能。因此我们需要全面了解之后再来选择实现/重写我们需要的事件。而在Middleware中，完全没有这样的限制，也不存在这样的事件，我们可以自行设计实现我们的机制。</p>\n<h2 id=\"Middleware-流程\"><a href=\"#Middleware-流程\" class=\"headerlink\" title=\"Middleware 流程\"></a>Middleware 流程</h2><p><a href=\"https://docs.asp.net/en/latest/fundamentals/middleware.html\" target=\"_blank\" rel=\"external\">https://docs.asp.net/en/latest/fundamentals/middleware.html</a> 这个文章中说明了基本的middleware概念。目前asp.net docs里面有不少的内容都是开源社区开发者贡献的</p>\n<p>在这个文章里面有一个简单的流程图说明了ASP.NET runtime中middleware的执行过程。</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/0b6d43ad-7d95-48ea-bbf3-ea7a93c4a366\" alt=\"middleware执行过程\"></p>\n<p>在 middleware 里面一定要定义 Invoke()函数，因为这是让 engine 默认调用 middleware 的Incoke函数。Middleware 里面所需要做什么事情就放在 Invoke() 里面，同时 Invoke() 里面还需要调用下一个 middleware。因此执行内容就如上图所示。Middleware 之间除了必须传送 HttpContext之外，也可以自定义传入其他的参数，这比以前的HttpModule方便多了。</p>\n<p>所以当 HTTP request 进来之后，engine 便会呼叫第一个 middleware 的 Invoke()，同时把传入HttpContext，然后第一个 middleware 可以再接着呼叫第二个 middleware 的 Invoke()，同时再把 HttpContext 继续传入，一直到最后一个middleware 的 Invoke() 结束之后，整个 HttpContext 的內容可能在 middleware 里面新增或被改变了，最后再按照整個原先的 call stack 从最后一个 middleware 回到第一个 middleware，再通过  engine 回传到client 端，完成request.</p>\n<p>下来通过一个例子我们一起来了解一下Middleware。</p>\n<h2 id=\"编写简单的-Middleware\"><a href=\"#编写简单的-Middleware\" class=\"headerlink\" title=\"编写简单的 Middleware\"></a>编写简单的 Middleware</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SampleMiddleware</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> RequestDelegate _next;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SampleMiddleware</span>(<span class=\"params\">RequestDelegate next</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        _next = next;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">Invoke</span>(<span class=\"params\">HttpContext context</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(context.User.Identity.Name))</div><div class=\"line\">        &#123;</div><div class=\"line\">            context.Response.Redirect(<span class=\"string\">\"/NoName.html\"</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">await</span> _next.Invoke(context);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这一个middleware的名字叫SampleMiddleware。它有一个构造函数以及Invoke函数，而Invoke()只接收一个参数HttpContext。</p>\n<p>_next是一个叫 RequestDelegate类型，换言之这就是一个delegate，用于代表下一个middleware是谁。所以在构造函数中要把下一个middleware delegate传入。看到这里或许会觉得奇怪，我们的middleware在执行过程中怎么会知道下一个middleware是谁？这一部分稍后解释。</p>\n<p>在 Invoke() 里面，在 await _next.Invoke() 之前都是当前middleware的逻辑代码，从上面流程图来看的话就是由左自右的方向． await _next.Invoke() 之后的代码是就是流程图上由右至右的方向，因此，透過这样简单的设计，开发者就能很明确地控制什么样逻辑要先做或后做了。</p>\n<p>在 SampleMiddleware 之中，这里只做了一個很简单的动作，如果 username 是空白的话，就将该连接重定向到到 NoName.html 然后中断 middleware 的执行。</p>\n<p>为了能让这个middleware作为 ApplicationBuilder来使用，我们另外需要写一个扩展方法。代码如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">MiddlewareExtensions</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IApplicationBuilder <span class=\"title\">UseSampleMiddleware</span>(<span class=\"params\"></span></span></div><div class=\"line\">    <span class=\"keyword\">this</span> IApplicationBuilder builder)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> builder.UseMiddleware&lt;SampleMiddleware&gt;();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这给扩展方法建立了UseSampleMiddleware()，使得我们可以让ApplicationBuilder 去读 SampleMiddleware。</p>\n<p>这是回到Startup.cs中，在 Configure() 里面我们就可以把 SampleMiddleware 加入到我们的 pipeline中了。具体代码如下：<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app,IHostingEnvironment env, </span></span></div><div class=\"line\">                      ILoggerFactory loggerFactory)</div><div class=\"line\">&#123;</div><div class=\"line\">    loggerFactory.AddConsole(Configuration.GetSection(<span class=\"string\">\"Logging\"</span>));</div><div class=\"line\">    loggerFactory.AddDebug();</div><div class=\"line\"></div><div class=\"line\">    app.UseStaticFiles();</div><div class=\"line\"></div><div class=\"line\">    app.UseSampleMiddleware();   <span class=\"comment\">// &lt;-- SampleMiddleware</span></div><div class=\"line\"></div><div class=\"line\">    app.UseMvc(routes =&gt;</div><div class=\"line\">    &#123;</div><div class=\"line\">        routes.MapRoute(<span class=\"string\">\"default\"</span>,</div><div class=\"line\">        <span class=\"string\">\"&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>把 SampleMiddleware 放在 UseStaticFiles 和 UseMvc 之间，也就是说在 http request 还沒进入到 MVC routing 之前，就会先检查 HttpContext 里面是不是有空白的 username。很显然username肯定是空白的，因为我并沒有加入任何使用者验证代码这里面，所以利用 dotnet run 來运行这个项目的时候，你就会看到 Http code 302 出現，它的意思就是 http redirect，也就是 SampleMiddleware 里面面所做的 redirect 发生作用了。</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/1d7e4c87-9fff-4401-8933-36dcbf857199\" alt=\"http redirect\"></p>\n<h2 id=\"Middleware-的执行顺序很重要\"><a href=\"#Middleware-的执行顺序很重要\" class=\"headerlink\" title=\"Middleware 的执行顺序很重要\"></a>Middleware 的执行顺序很重要</h2><p>前面解释了 middleware 执行过程是一个接着一个的．不同的 middleware 对 HttpContext 的內容都可能有不同的处理或更改，因此执行舒服便格外重要。举个例子，如果将上面 Configure() 的代码变更如下:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env,</span></span></div><div class=\"line\">                       ILoggerFactory loggerFactory)</div><div class=\"line\">&#123;</div><div class=\"line\">    loggerFactory.AddConsole(Configuration.GetSection(<span class=\"string\">\"Logging\"</span>));</div><div class=\"line\">    loggerFactory.AddDebug();</div><div class=\"line\"></div><div class=\"line\">    app.UseSampleMiddleware();   <span class=\"comment\">// SampleMiddleware</span></div><div class=\"line\"></div><div class=\"line\">    app.UseStaticFiles();        <span class=\"comment\">// StaticFiles</span></div><div class=\"line\"></div><div class=\"line\">    app.UseMvc(routes =&gt;</div><div class=\"line\">    &#123;</div><div class=\"line\">        routes.MapRoute(<span class=\"string\">\"default\"</span>,<span class=\"string\">\"&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们把SampleMiddleware 放到StaticFiles 之前。这就导致在 SampleMiddleware 里重定向到 NoName.html会失败。</p>\n<p>为什么会失败呢? 因为我们的 ApplicationBuilder 执行到行到 SampleMiddleware 时候重定向到NoName.html，也就是做读取静态页面，而这个功能服务方是在下一个 middleware (StaticFiles) 才会提供的，因此 ApplicationBuilder 无法找到 NoName.html，所以在浏览器上也就看不到 NoName.html 的內容。</p>\n<h4 id=\"Middleware-这样的设计带来了很大的方便和弹性，同時我们自己也要小心-middleware-前后相依性的问题。\"><a href=\"#Middleware-这样的设计带来了很大的方便和弹性，同時我们自己也要小心-middleware-前后相依性的问题。\" class=\"headerlink\" title=\"Middleware 这样的设计带来了很大的方便和弹性，同時我们自己也要小心 middleware 前后相依性的问题。\"></a>Middleware 这样的设计带来了很大的方便和弹性，同時我们自己也要小心 middleware 前后相依性的问题。</h4><h2 id=\"Middleware-背后原理\"><a href=\"#Middleware-背后原理\" class=\"headerlink\" title=\"Middleware 背后原理\"></a>Middleware 背后原理</h2><p>现在 ASP.NET Core 已是开源项目了，所以最后说明一下 middleware 原理的基本概念．整個 ASP.NET fundamental 的部份用了许多的 function delegate , task, denepdency injection 的编写方法，所以要看 source code 之前，建议先对这三个东西先行了解，这样对理解 ASP.NET Core源码很有帮助．</p>\n<p>在前面的代码中，我们看到 RequestDelegate,  顾名思义就知道这是一个delegate（委托），它是用来代表 middleware 的 delegate. 它的 source code 在 <a href=\"https://github.com/aspnet/httpabstractions/blob/master/src/Microsoft.AspNet.Http.Abstractions/RequestDelegate.cs\" target=\"_blank\" rel=\"external\">RequestDelegate.cs</a></p>\n<p>IApplicationBuilder interface 是一個相当重要的接口，它定义了整個APP要用哪些服务和參數，当然也包含要使用那些 middleware，它的 souce code 在 <a href=\"https://github.com/aspnet/httpabstractions/blob/master/src/Microsoft.AspNet.Http.Abstractions/IApplicationBuilder.cs\" target=\"_blank\" rel=\"external\">IApplicationBuilder.cs</a>。</p>\n<p>其中你可以看到 Use()，通过 Use() 的实例就可以把 middleware delegate 注册到 host engine 上。</p>\n<p>另外一个就是 UseMiddlewareExtensions ，前面的代码曾用了 builder.UseMiddleware<samplemiddleware>(); 它会检查你写的 middleware 是不是合法的，比如有沒有 Invoke()，是不是只有一个Invoke()，Invoke() 的参数有沒有一个是 HttpContext type，所有的检查都通过之后便建立出该middleware instance 的 delegate。</samplemiddleware></p>\n<p>因此，当你的 ASP.NET Core APP刚启动的时候，在 Startup.cs 的 Configure() 就会把所有的 middleware delegate 建立起來，然后依序地放到內部的 stack 结构中。以上面的范例来说， stack 结构第一个元素是 StaticFiles,  然后是 SampleMiddleware 最后是 Mvc。接着每個 middleware 要被建立时是做 stack pop 的操作，所以 Mvc 的 _next 是 engine 里一些內部的 middleware 处理器，然後 pop 出 SampleMiddleware 时，就把 SampleMiddleware 的 _next 指向前面一個 pop 出來的 Mvc。依照着这样的逻辑一直到最前面的 middleware。所以在 host engine 在 Build() 之前这些动作都会完成，然后 host engine 才能执行Run()。有关 host engine 可參考<br><a href=\"https://github.com/aspnet/hosting/blob/master/src/Microsoft.AspNet.Hosting/WebHostBuilder.cs\" target=\"_blank\" rel=\"external\">WebHostBuilder.cs</a></p>\n<p>全文完。</p>\n<p>本文整理于<a href=\"https://dotblogs.com.tw/aspnetshare/2016/03/20/201603191\" target=\"_blank\" rel=\"external\">https://dotblogs.com.tw/aspnetshare/2016/03/20/201603191</a>并已征得作者同意。<br>感谢Bruce的分享。</p>\n","excerpt":"","more":"<p>在ASP.NET 时代，一般来说我们很少会用到HttpModule/HttpHandler，然而有些场景我们使用HttpModule/HttpHandler倒方便快捷完成我们的需求。有兴趣了解HttpModule/HttpHandler以及使用场景的话，可以看下面这个链接的内容。</p>\n<p><a href=\"http://www.cnblogs.com/fish-li/archive/2013/01/04/2844908.html\">选择HttpHandler还是HttpModule？</a></p>\n<p>来到ASP.NET Core时代，类似功能的内容可能我们看得就要多得多了。因为在ASP.NET Core时代，微软将HttpModule“变更”之后，并为它授予了更灵活应用场景。</p>\n<p>这就是这个文章要介绍的主角：Middleware（中间件）。</p>\n<h2 id=\"Middleware\"><a href=\"#Middleware\" class=\"headerlink\" title=\"Middleware\"></a>Middleware</h2><p>为了使用跨平台，ASP.NET Core整个架构和代码都重写了一遍，所以 HttpModule 自然也就不存在了。但是相似的功能还是有的，它的名字叫： Middleware。和以前不同，在ASP.NET Core中我们将会经常看到 Middleware的存在，因为现在的每一个服务都是用Middleware的方式呈现在ASP.NET Core 管道中。不仅如此，meddleware比起之前的HttpModule也更弹性易用了。</p>\n<p>首先先来看看什么是middleware。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env, </div><div class=\"line\">                      ILoggerFactory loggerFactory</span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    loggerFactory.AddConsole(Configuration.GetSection(<span class=\"string\">\"Logging\"</span>));</div><div class=\"line\">    loggerFactory.AddDebug();</div><div class=\"line\"></div><div class=\"line\">    app.UseStaticFiles();</div><div class=\"line\"></div><div class=\"line\">    app.UseMvc(routes =&gt;</div><div class=\"line\">    &#123;</div><div class=\"line\">        routes.MapRoute(<span class=\"string\">\"default\"</span>,</div><div class=\"line\">        <span class=\"string\">\"&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>看过ASP.NET Core项目的话，相信大家对Satarup.cs并不会陌生。在Starup.cs里面便有一个Configure()函数用于定义项目需要使用哪些middleware。</p>\n<p>上面的例子使用了两个middleware，一个是 UseStaticFiles，另一个是 UseMvc。这两个都是core自带的middleware，所以我们可以直接使用。UseStaticFiles 是为HTTP Request提供存取网站的文件，简单理解就是使得网站上的静态文件可访问，而UseMvc就是启用MVC routing机制。有了这两个middleware，我们的的网站就有了MVC routing和读取静态文件的功能。</p>\n<p>如果我们把UseMvc去掉，那么MVC routing也就不存在了，我们输入 <a href=\"http://website/[Controller]/[Action\">http://website/[Controller]/[Action</a>] 类似的地址也就无效了。</p>\n<h3 id=\"和HttpModule的不同之处\"><a href=\"#和HttpModule的不同之处\" class=\"headerlink\" title=\"和HttpModule的不同之处\"></a>和HttpModule的不同之处</h3><p>在使用HttpModule的时候，我们是在实现/重写接口，这个时候就要求我们在适当的地方做适当的事情。例如，要做 authorization 的话就最好在 HttpModule 定义好的 Authorization 事件 (AuthorizatRequest) 中完成这个功能。在 ASP.NET life cycle 的文件里我们可以查到 HttpModule  定义了那些事件，每一個事件都有哪些特別的功能。因此我们需要全面了解之后再来选择实现/重写我们需要的事件。而在Middleware中，完全没有这样的限制，也不存在这样的事件，我们可以自行设计实现我们的机制。</p>\n<h2 id=\"Middleware-流程\"><a href=\"#Middleware-流程\" class=\"headerlink\" title=\"Middleware 流程\"></a>Middleware 流程</h2><p><a href=\"https://docs.asp.net/en/latest/fundamentals/middleware.html\">https://docs.asp.net/en/latest/fundamentals/middleware.html</a> 这个文章中说明了基本的middleware概念。目前asp.net docs里面有不少的内容都是开源社区开发者贡献的</p>\n<p>在这个文章里面有一个简单的流程图说明了ASP.NET runtime中middleware的执行过程。</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/0b6d43ad-7d95-48ea-bbf3-ea7a93c4a366\" alt=\"middleware执行过程\"></p>\n<p>在 middleware 里面一定要定义 Invoke()函数，因为这是让 engine 默认调用 middleware 的Incoke函数。Middleware 里面所需要做什么事情就放在 Invoke() 里面，同时 Invoke() 里面还需要调用下一个 middleware。因此执行内容就如上图所示。Middleware 之间除了必须传送 HttpContext之外，也可以自定义传入其他的参数，这比以前的HttpModule方便多了。</p>\n<p>所以当 HTTP request 进来之后，engine 便会呼叫第一个 middleware 的 Invoke()，同时把传入HttpContext，然后第一个 middleware 可以再接着呼叫第二个 middleware 的 Invoke()，同时再把 HttpContext 继续传入，一直到最后一个middleware 的 Invoke() 结束之后，整个 HttpContext 的內容可能在 middleware 里面新增或被改变了，最后再按照整個原先的 call stack 从最后一个 middleware 回到第一个 middleware，再通过  engine 回传到client 端，完成request.</p>\n<p>下来通过一个例子我们一起来了解一下Middleware。</p>\n<h2 id=\"编写简单的-Middleware\"><a href=\"#编写简单的-Middleware\" class=\"headerlink\" title=\"编写简单的 Middleware\"></a>编写简单的 Middleware</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SampleMiddleware</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> RequestDelegate _next;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SampleMiddleware</span>(<span class=\"params\">RequestDelegate next</span>)</div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        _next = next;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">Invoke</span>(<span class=\"params\">HttpContext context</span>)</div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(context.User.Identity.Name))</div><div class=\"line\">        &#123;</div><div class=\"line\">            context.Response.Redirect(<span class=\"string\">\"/NoName.html\"</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">await</span> _next.Invoke(context);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这一个middleware的名字叫SampleMiddleware。它有一个构造函数以及Invoke函数，而Invoke()只接收一个参数HttpContext。</p>\n<p>_next是一个叫 RequestDelegate类型，换言之这就是一个delegate，用于代表下一个middleware是谁。所以在构造函数中要把下一个middleware delegate传入。看到这里或许会觉得奇怪，我们的middleware在执行过程中怎么会知道下一个middleware是谁？这一部分稍后解释。</p>\n<p>在 Invoke() 里面，在 await _next.Invoke() 之前都是当前middleware的逻辑代码，从上面流程图来看的话就是由左自右的方向． await _next.Invoke() 之后的代码是就是流程图上由右至右的方向，因此，透過这样简单的设计，开发者就能很明确地控制什么样逻辑要先做或后做了。</p>\n<p>在 SampleMiddleware 之中，这里只做了一個很简单的动作，如果 username 是空白的话，就将该连接重定向到到 NoName.html 然后中断 middleware 的执行。</p>\n<p>为了能让这个middleware作为 ApplicationBuilder来使用，我们另外需要写一个扩展方法。代码如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">MiddlewareExtensions</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IApplicationBuilder <span class=\"title\">UseSampleMiddleware</span>(<span class=\"params\"></div><div class=\"line\">    <span class=\"keyword\">this</span> IApplicationBuilder builder</span>)</div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> builder.UseMiddleware&lt;SampleMiddleware&gt;();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这给扩展方法建立了UseSampleMiddleware()，使得我们可以让ApplicationBuilder 去读 SampleMiddleware。</p>\n<p>这是回到Startup.cs中，在 Configure() 里面我们就可以把 SampleMiddleware 加入到我们的 pipeline中了。具体代码如下：<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app,IHostingEnvironment env, </div><div class=\"line\">                      ILoggerFactory loggerFactory</span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    loggerFactory.AddConsole(Configuration.GetSection(<span class=\"string\">\"Logging\"</span>));</div><div class=\"line\">    loggerFactory.AddDebug();</div><div class=\"line\"></div><div class=\"line\">    app.UseStaticFiles();</div><div class=\"line\"></div><div class=\"line\">    app.UseSampleMiddleware();   <span class=\"comment\">// &lt;-- SampleMiddleware</span></div><div class=\"line\"></div><div class=\"line\">    app.UseMvc(routes =&gt;</div><div class=\"line\">    &#123;</div><div class=\"line\">        routes.MapRoute(<span class=\"string\">\"default\"</span>,</div><div class=\"line\">        <span class=\"string\">\"&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>把 SampleMiddleware 放在 UseStaticFiles 和 UseMvc 之间，也就是说在 http request 还沒进入到 MVC routing 之前，就会先检查 HttpContext 里面是不是有空白的 username。很显然username肯定是空白的，因为我并沒有加入任何使用者验证代码这里面，所以利用 dotnet run 來运行这个项目的时候，你就会看到 Http code 302 出現，它的意思就是 http redirect，也就是 SampleMiddleware 里面面所做的 redirect 发生作用了。</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/1d7e4c87-9fff-4401-8933-36dcbf857199\" alt=\"http redirect\"></p>\n<h2 id=\"Middleware-的执行顺序很重要\"><a href=\"#Middleware-的执行顺序很重要\" class=\"headerlink\" title=\"Middleware 的执行顺序很重要\"></a>Middleware 的执行顺序很重要</h2><p>前面解释了 middleware 执行过程是一个接着一个的．不同的 middleware 对 HttpContext 的內容都可能有不同的处理或更改，因此执行舒服便格外重要。举个例子，如果将上面 Configure() 的代码变更如下:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env,</div><div class=\"line\">                       ILoggerFactory loggerFactory</span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    loggerFactory.AddConsole(Configuration.GetSection(<span class=\"string\">\"Logging\"</span>));</div><div class=\"line\">    loggerFactory.AddDebug();</div><div class=\"line\"></div><div class=\"line\">    app.UseSampleMiddleware();   <span class=\"comment\">// SampleMiddleware</span></div><div class=\"line\"></div><div class=\"line\">    app.UseStaticFiles();        <span class=\"comment\">// StaticFiles</span></div><div class=\"line\"></div><div class=\"line\">    app.UseMvc(routes =&gt;</div><div class=\"line\">    &#123;</div><div class=\"line\">        routes.MapRoute(<span class=\"string\">\"default\"</span>,<span class=\"string\">\"&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们把SampleMiddleware 放到StaticFiles 之前。这就导致在 SampleMiddleware 里重定向到 NoName.html会失败。</p>\n<p>为什么会失败呢? 因为我们的 ApplicationBuilder 执行到行到 SampleMiddleware 时候重定向到NoName.html，也就是做读取静态页面，而这个功能服务方是在下一个 middleware (StaticFiles) 才会提供的，因此 ApplicationBuilder 无法找到 NoName.html，所以在浏览器上也就看不到 NoName.html 的內容。</p>\n<h4 id=\"Middleware-这样的设计带来了很大的方便和弹性，同時我们自己也要小心-middleware-前后相依性的问题。\"><a href=\"#Middleware-这样的设计带来了很大的方便和弹性，同時我们自己也要小心-middleware-前后相依性的问题。\" class=\"headerlink\" title=\"Middleware 这样的设计带来了很大的方便和弹性，同時我们自己也要小心 middleware 前后相依性的问题。\"></a>Middleware 这样的设计带来了很大的方便和弹性，同時我们自己也要小心 middleware 前后相依性的问题。</h4><h2 id=\"Middleware-背后原理\"><a href=\"#Middleware-背后原理\" class=\"headerlink\" title=\"Middleware 背后原理\"></a>Middleware 背后原理</h2><p>现在 ASP.NET Core 已是开源项目了，所以最后说明一下 middleware 原理的基本概念．整個 ASP.NET fundamental 的部份用了许多的 function delegate , task, denepdency injection 的编写方法，所以要看 source code 之前，建议先对这三个东西先行了解，这样对理解 ASP.NET Core源码很有帮助．</p>\n<p>在前面的代码中，我们看到 RequestDelegate,  顾名思义就知道这是一个delegate（委托），它是用来代表 middleware 的 delegate. 它的 source code 在 <a href=\"https://github.com/aspnet/httpabstractions/blob/master/src/Microsoft.AspNet.Http.Abstractions/RequestDelegate.cs\">RequestDelegate.cs</a></p>\n<p>IApplicationBuilder interface 是一個相当重要的接口，它定义了整個APP要用哪些服务和參數，当然也包含要使用那些 middleware，它的 souce code 在 <a href=\"https://github.com/aspnet/httpabstractions/blob/master/src/Microsoft.AspNet.Http.Abstractions/IApplicationBuilder.cs\">IApplicationBuilder.cs</a>。</p>\n<p>其中你可以看到 Use()，通过 Use() 的实例就可以把 middleware delegate 注册到 host engine 上。</p>\n<p>另外一个就是 UseMiddlewareExtensions ，前面的代码曾用了 builder.UseMiddleware<SampleMiddleware>(); 它会检查你写的 middleware 是不是合法的，比如有沒有 Invoke()，是不是只有一个Invoke()，Invoke() 的参数有沒有一个是 HttpContext type，所有的检查都通过之后便建立出该middleware instance 的 delegate。</p>\n<p>因此，当你的 ASP.NET Core APP刚启动的时候，在 Startup.cs 的 Configure() 就会把所有的 middleware delegate 建立起來，然后依序地放到內部的 stack 结构中。以上面的范例来说， stack 结构第一个元素是 StaticFiles,  然后是 SampleMiddleware 最后是 Mvc。接着每個 middleware 要被建立时是做 stack pop 的操作，所以 Mvc 的 _next 是 engine 里一些內部的 middleware 处理器，然後 pop 出 SampleMiddleware 时，就把 SampleMiddleware 的 _next 指向前面一個 pop 出來的 Mvc。依照着这样的逻辑一直到最前面的 middleware。所以在 host engine 在 Build() 之前这些动作都会完成，然后 host engine 才能执行Run()。有关 host engine 可參考<br><a href=\"https://github.com/aspnet/hosting/blob/master/src/Microsoft.AspNet.Hosting/WebHostBuilder.cs\">WebHostBuilder.cs</a></p>\n<p>全文完。</p>\n<p>本文整理于<a href=\"https://dotblogs.com.tw/aspnetshare/2016/03/20/201603191\">https://dotblogs.com.tw/aspnetshare/2016/03/20/201603191</a>并已征得作者同意。<br>感谢Bruce的分享。</p>\n"},{"layout":"post","title":"bytes to string","date":"2016-01-19T16:00:00.000Z","_content":"\n有时候我们会遇到需要把数据加密之后再网络上传输的需求，这样的话一般使用AES256之类的算法，经过运算之后得到一个byte数组，接着转换成string，就扔出去了。对方拿到之后，用密钥解密之后便得到了对应的数据。\n\n在C#里面，Byte数组转String字符串我们一般用Convert.ToBase64()完成。\n\n代码如下：\n```csharp\n    public string BytesToString(byte[] buff)\n    {\n       return Convert.ToBase64String(buff);\n    }\n\n    public byte[] StringToBytes(string input)\n    {\n        return Encoding.UTF8.GetBytes(input);\n    }\n```\n \n 一般来说这样也没撒问题了，不过，如果这个数据是通过URL的方式给出去的，这时候就要考虑一下特殊字符编码问题了。+、空格、%之类的特殊字符可能会导致切断URL传参的数据，导致得到的数据不一致。这样的话，解密也做不下去了。\n \n 相关资料：\n <br>1、[关于URL编码](http://www.ruanyifeng.com/blog/2010/02/url_encoding.html)\n <br>2、[URL编码----url参数中有+、空格、=、%、&、#等特殊符号的问题解决](http://blog.csdn.net/luo_deng/article/details/12186535)\n \n \n 不过也好在，C#提供了一个HttpUtility.UrlEncode(input)和HttpUtility.UrlEncode(input)这两个函数，让我们直接把上面的特殊字符转换成URL可识别的转义字符。\n 数据出去之后先Encode一下，回来之后Decode一下，好像问题都解决了吧。\n \n \n然而我们都忘了一件事情，URL到了浏览器之后，自然会对URL里面的东西Decode一次。\n我实现的时候，在后台验证的时候又Decode一次,这就出问题了。\n\n问题在哪呢？一个encode的字符被decode两次，内容已经被改掉了...\n这就导致解密的时候直接挂了....\n\n\n\n这样看来，\nConvert.ToBase64String()这个不够靠谱，出来的数据可能会有特殊字符的问题。\n怎么解决呢？那天晚上和老大/CTO都在看这个bug。一下子都没撒好办法....\n\n后来CTO想了一下，说byte不就是最大不久255么？直接转16进制字符就是嘛。\n于是有了下面的代码：\n \n \n```csharp\n\t/// <summary>\n\t/// byte数组转string\n\t/// </summary>\n\t/// <param name=\"bytes\"></param>\n\t/// <returns></returns>\n\tprivate static string BytesToString(byte[] bytes)\n\t{\n\t    if (bytes == null)\n\t        return string.Empty;\n\t   return string.Join(string.Empty, \n\t   bytes.Select(b => string.Format(\"{0:x2}\", b)).ToArray());\n\t}\n\t\n\t/// <summary>\n\t/// string转byte数组\n\t/// </summary>\n\t/// <param name=\"str\"></param>\n\t/// <returns></returns>\n\tprivate static byte[] StringToBytes(string str)\n\t{\n\t    if (string.IsNullOrEmpty(str))\n\t        return null;\n\t    byte[] bytes = new byte[str.Length / 2];\n\t    for (int i = 0; i < str.Length; i += 2)\n\t    {\n\t        bytes[i / 2] = Convert.ToByte(\"0x\" + str[i] + str[i + 1], 16);\n\t    }\n\t    return bytes;\n\t}\n```\n\n\n问题解决。\n\n关于base64的实现，下面这个链接是相关资料，有兴趣自己看啦。\n\n[C#/ASP.NET Base64编码原理及实现](http://www.hejingzong.cn/blog/ViewBlog_36.aspx)\n\n[C＃实现Base64编码与解码](http://www.cnblogs.com/tuyile006/archive/2008/01/17/1043178.html)\n\n\n","source":"_posts/Bytes-To-String.md","raw":"---\nlayout: post\ntitle: bytes to string\ncategory: .net\ndate: 2016-01-20 00:00:00\ntags:\n- 加密编码\n---\n\n有时候我们会遇到需要把数据加密之后再网络上传输的需求，这样的话一般使用AES256之类的算法，经过运算之后得到一个byte数组，接着转换成string，就扔出去了。对方拿到之后，用密钥解密之后便得到了对应的数据。\n\n在C#里面，Byte数组转String字符串我们一般用Convert.ToBase64()完成。\n\n代码如下：\n```csharp\n    public string BytesToString(byte[] buff)\n    {\n       return Convert.ToBase64String(buff);\n    }\n\n    public byte[] StringToBytes(string input)\n    {\n        return Encoding.UTF8.GetBytes(input);\n    }\n```\n \n 一般来说这样也没撒问题了，不过，如果这个数据是通过URL的方式给出去的，这时候就要考虑一下特殊字符编码问题了。+、空格、%之类的特殊字符可能会导致切断URL传参的数据，导致得到的数据不一致。这样的话，解密也做不下去了。\n \n 相关资料：\n <br>1、[关于URL编码](http://www.ruanyifeng.com/blog/2010/02/url_encoding.html)\n <br>2、[URL编码----url参数中有+、空格、=、%、&、#等特殊符号的问题解决](http://blog.csdn.net/luo_deng/article/details/12186535)\n \n \n 不过也好在，C#提供了一个HttpUtility.UrlEncode(input)和HttpUtility.UrlEncode(input)这两个函数，让我们直接把上面的特殊字符转换成URL可识别的转义字符。\n 数据出去之后先Encode一下，回来之后Decode一下，好像问题都解决了吧。\n \n \n然而我们都忘了一件事情，URL到了浏览器之后，自然会对URL里面的东西Decode一次。\n我实现的时候，在后台验证的时候又Decode一次,这就出问题了。\n\n问题在哪呢？一个encode的字符被decode两次，内容已经被改掉了...\n这就导致解密的时候直接挂了....\n\n\n\n这样看来，\nConvert.ToBase64String()这个不够靠谱，出来的数据可能会有特殊字符的问题。\n怎么解决呢？那天晚上和老大/CTO都在看这个bug。一下子都没撒好办法....\n\n后来CTO想了一下，说byte不就是最大不久255么？直接转16进制字符就是嘛。\n于是有了下面的代码：\n \n \n```csharp\n\t/// <summary>\n\t/// byte数组转string\n\t/// </summary>\n\t/// <param name=\"bytes\"></param>\n\t/// <returns></returns>\n\tprivate static string BytesToString(byte[] bytes)\n\t{\n\t    if (bytes == null)\n\t        return string.Empty;\n\t   return string.Join(string.Empty, \n\t   bytes.Select(b => string.Format(\"{0:x2}\", b)).ToArray());\n\t}\n\t\n\t/// <summary>\n\t/// string转byte数组\n\t/// </summary>\n\t/// <param name=\"str\"></param>\n\t/// <returns></returns>\n\tprivate static byte[] StringToBytes(string str)\n\t{\n\t    if (string.IsNullOrEmpty(str))\n\t        return null;\n\t    byte[] bytes = new byte[str.Length / 2];\n\t    for (int i = 0; i < str.Length; i += 2)\n\t    {\n\t        bytes[i / 2] = Convert.ToByte(\"0x\" + str[i] + str[i + 1], 16);\n\t    }\n\t    return bytes;\n\t}\n```\n\n\n问题解决。\n\n关于base64的实现，下面这个链接是相关资料，有兴趣自己看啦。\n\n[C#/ASP.NET Base64编码原理及实现](http://www.hejingzong.cn/blog/ViewBlog_36.aspx)\n\n[C＃实现Base64编码与解码](http://www.cnblogs.com/tuyile006/archive/2008/01/17/1043178.html)\n\n\n","slug":"Bytes-To-String","published":1,"updated":"2016-10-15T05:20:24.596Z","comments":1,"photos":[],"link":"","_id":"cj0dyumvp00096kuneulr0vm5","content":"<p>有时候我们会遇到需要把数据加密之后再网络上传输的需求，这样的话一般使用AES256之类的算法，经过运算之后得到一个byte数组，接着转换成string，就扔出去了。对方拿到之后，用密钥解密之后便得到了对应的数据。</p>\n<p>在C#里面，Byte数组转String字符串我们一般用Convert.ToBase64()完成。</p>\n<p>代码如下：<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">BytesToString</span>(<span class=\"params\"><span class=\"keyword\">byte</span>[] buff</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> Convert.ToBase64String(buff);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">byte</span>[] <span class=\"title\">StringToBytes</span>(<span class=\"params\"><span class=\"keyword\">string</span> input</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Encoding.UTF8.GetBytes(input);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 一般来说这样也没撒问题了，不过，如果这个数据是通过URL的方式给出去的，这时候就要考虑一下特殊字符编码问题了。+、空格、%之类的特殊字符可能会导致切断URL传参的数据，导致得到的数据不一致。这样的话，解密也做不下去了。</p>\n<p> 相关资料：<br> <br>1、<a href=\"http://www.ruanyifeng.com/blog/2010/02/url_encoding.html\" target=\"_blank\" rel=\"external\">关于URL编码</a><br> <br>2、<a href=\"http://blog.csdn.net/luo_deng/article/details/12186535\" target=\"_blank\" rel=\"external\">URL编码—-url参数中有+、空格、=、%、&amp;、#等特殊符号的问题解决</a></p>\n<p> 不过也好在，C#提供了一个HttpUtility.UrlEncode(input)和HttpUtility.UrlEncode(input)这两个函数，让我们直接把上面的特殊字符转换成URL可识别的转义字符。<br> 数据出去之后先Encode一下，回来之后Decode一下，好像问题都解决了吧。</p>\n<p>然而我们都忘了一件事情，URL到了浏览器之后，自然会对URL里面的东西Decode一次。<br>我实现的时候，在后台验证的时候又Decode一次,这就出问题了。</p>\n<p>问题在哪呢？一个encode的字符被decode两次，内容已经被改掉了…<br>这就导致解密的时候直接挂了….</p>\n<p>这样看来，<br>Convert.ToBase64String()这个不够靠谱，出来的数据可能会有特殊字符的问题。<br>怎么解决呢？那天晚上和老大/CTO都在看这个bug。一下子都没撒好办法….</p>\n<p>后来CTO想了一下，说byte不就是最大不久255么？直接转16进制字符就是嘛。<br>于是有了下面的代码：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></div><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> byte数组转string</span></div><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></div><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"bytes\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></div><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">BytesToString</span>(<span class=\"params\"><span class=\"keyword\">byte</span>[] bytes</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (bytes == <span class=\"literal\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>.Empty;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>.Join(<span class=\"keyword\">string</span>.Empty, </div><div class=\"line\">   bytes.Select(b =&gt; <span class=\"keyword\">string</span>.Format(<span class=\"string\">\"&#123;0:x2&#125;\"</span>, b)).ToArray());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></div><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> string转byte数组</span></div><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></div><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"str\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></div><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] <span class=\"title\">StringToBytes</span>(<span class=\"params\"><span class=\"keyword\">string</span> str</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(str))</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[str.Length / <span class=\"number\">2</span>];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str.Length; i += <span class=\"number\">2</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        bytes[i / <span class=\"number\">2</span>] = Convert.ToByte(<span class=\"string\">\"0x\"</span> + str[i] + str[i + <span class=\"number\">1</span>], <span class=\"number\">16</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> bytes;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>问题解决。</p>\n<p>关于base64的实现，下面这个链接是相关资料，有兴趣自己看啦。</p>\n<p><a href=\"http://www.hejingzong.cn/blog/ViewBlog_36.aspx\" target=\"_blank\" rel=\"external\">C#/ASP.NET Base64编码原理及实现</a></p>\n<p><a href=\"http://www.cnblogs.com/tuyile006/archive/2008/01/17/1043178.html\" target=\"_blank\" rel=\"external\">C＃实现Base64编码与解码</a></p>\n","excerpt":"","more":"<p>有时候我们会遇到需要把数据加密之后再网络上传输的需求，这样的话一般使用AES256之类的算法，经过运算之后得到一个byte数组，接着转换成string，就扔出去了。对方拿到之后，用密钥解密之后便得到了对应的数据。</p>\n<p>在C#里面，Byte数组转String字符串我们一般用Convert.ToBase64()完成。</p>\n<p>代码如下：<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">BytesToString</span>(<span class=\"params\"><span class=\"keyword\">byte</span>[] buff</span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> Convert.ToBase64String(buff);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">byte</span>[] <span class=\"title\">StringToBytes</span>(<span class=\"params\"><span class=\"keyword\">string</span> input</span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Encoding.UTF8.GetBytes(input);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 一般来说这样也没撒问题了，不过，如果这个数据是通过URL的方式给出去的，这时候就要考虑一下特殊字符编码问题了。+、空格、%之类的特殊字符可能会导致切断URL传参的数据，导致得到的数据不一致。这样的话，解密也做不下去了。</p>\n<p> 相关资料：<br> <br>1、<a href=\"http://www.ruanyifeng.com/blog/2010/02/url_encoding.html\">关于URL编码</a><br> <br>2、<a href=\"http://blog.csdn.net/luo_deng/article/details/12186535\">URL编码—-url参数中有+、空格、=、%、&amp;、#等特殊符号的问题解决</a></p>\n<p> 不过也好在，C#提供了一个HttpUtility.UrlEncode(input)和HttpUtility.UrlEncode(input)这两个函数，让我们直接把上面的特殊字符转换成URL可识别的转义字符。<br> 数据出去之后先Encode一下，回来之后Decode一下，好像问题都解决了吧。</p>\n<p>然而我们都忘了一件事情，URL到了浏览器之后，自然会对URL里面的东西Decode一次。<br>我实现的时候，在后台验证的时候又Decode一次,这就出问题了。</p>\n<p>问题在哪呢？一个encode的字符被decode两次，内容已经被改掉了…<br>这就导致解密的时候直接挂了….</p>\n<p>这样看来，<br>Convert.ToBase64String()这个不够靠谱，出来的数据可能会有特殊字符的问题。<br>怎么解决呢？那天晚上和老大/CTO都在看这个bug。一下子都没撒好办法….</p>\n<p>后来CTO想了一下，说byte不就是最大不久255么？直接转16进制字符就是嘛。<br>于是有了下面的代码：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></div><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> byte数组转string</span></div><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></div><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"bytes\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></div><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">BytesToString</span>(<span class=\"params\"><span class=\"keyword\">byte</span>[] bytes</span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (bytes == <span class=\"literal\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>.Empty;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>.Join(<span class=\"keyword\">string</span>.Empty, </div><div class=\"line\">   bytes.Select(b =&gt; <span class=\"keyword\">string</span>.Format(<span class=\"string\">\"&#123;0:x2&#125;\"</span>, b)).ToArray());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></div><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> string转byte数组</span></div><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></div><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"str\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></div><div class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] <span class=\"title\">StringToBytes</span>(<span class=\"params\"><span class=\"keyword\">string</span> str</span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(str))</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[str.Length / <span class=\"number\">2</span>];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str.Length; i += <span class=\"number\">2</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        bytes[i / <span class=\"number\">2</span>] = Convert.ToByte(<span class=\"string\">\"0x\"</span> + str[i] + str[i + <span class=\"number\">1</span>], <span class=\"number\">16</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> bytes;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>问题解决。</p>\n<p>关于base64的实现，下面这个链接是相关资料，有兴趣自己看啦。</p>\n<p><a href=\"http://www.hejingzong.cn/blog/ViewBlog_36.aspx\">C#/ASP.NET Base64编码原理及实现</a></p>\n<p><a href=\"http://www.cnblogs.com/tuyile006/archive/2008/01/17/1043178.html\">C＃实现Base64编码与解码</a></p>\n"},{"layout":"post","title":"CodeSmith 连接MySQL数据库报“can't find .net framework data provider”","date":"2016-04-19T16:00:00.000Z","_content":"\n1、下载 mysql-connector-net 安装\n\n[mysql-connector-net](https://dev.mysql.com/downloads/connector/net/6.9.html)\n\n2、mysql-connector-net 安装完毕之后，到对应的安装目录下，把对应的MySQL .NET dll拷贝到 CodeSmith的bin目录和SchemaProviders目录。\n\n一般DLL所在目录是：\n\nC:\\\\Program Files (x86)\\\\MySQL\\\\MySQL Connector Net 6.9.8\\\\Assemblies\\\\v4.0\n\n\n3、重启CodeSmith生效\n\n\n<br>\n<br>\n\n其余解决方案：\n<br>\n[codesmith无法连接Mysql的解决方法](http://blog.csdn.net/joke01/article/details/9469515)\n\n[codesmith6.5连接Mysql提示“找不到请求的 .Net Framework Data Provider。可能没有安装。”解决方法](http://www.cnblogs.com/tim190/archive/2013/01/18/2866161.html)\n\n\n\n\n","source":"_posts/CodeSmith-connect-MySQL-throw“can‘t find .Net Framework Data Provider”.md","raw":"---\nlayout: post\ntitle: CodeSmith 连接MySQL数据库报“can't find .net framework data provider”\ncategory: CodeSmith\ndate: 2016-04-20 00:00:00\n---\n\n1、下载 mysql-connector-net 安装\n\n[mysql-connector-net](https://dev.mysql.com/downloads/connector/net/6.9.html)\n\n2、mysql-connector-net 安装完毕之后，到对应的安装目录下，把对应的MySQL .NET dll拷贝到 CodeSmith的bin目录和SchemaProviders目录。\n\n一般DLL所在目录是：\n\nC:\\\\Program Files (x86)\\\\MySQL\\\\MySQL Connector Net 6.9.8\\\\Assemblies\\\\v4.0\n\n\n3、重启CodeSmith生效\n\n\n<br>\n<br>\n\n其余解决方案：\n<br>\n[codesmith无法连接Mysql的解决方法](http://blog.csdn.net/joke01/article/details/9469515)\n\n[codesmith6.5连接Mysql提示“找不到请求的 .Net Framework Data Provider。可能没有安装。”解决方法](http://www.cnblogs.com/tim190/archive/2013/01/18/2866161.html)\n\n\n\n\n","slug":"CodeSmith-connect-MySQL-throw“can‘t find .Net Framework Data Provider”","published":1,"updated":"2016-10-15T05:20:24.627Z","comments":1,"photos":[],"link":"","_id":"cj0dyumvr000b6kunbzd7qga4","content":"<p>1、下载 mysql-connector-net 安装</p>\n<p><a href=\"https://dev.mysql.com/downloads/connector/net/6.9.html\" target=\"_blank\" rel=\"external\">mysql-connector-net</a></p>\n<p>2、mysql-connector-net 安装完毕之后，到对应的安装目录下，把对应的MySQL .NET dll拷贝到 CodeSmith的bin目录和SchemaProviders目录。</p>\n<p>一般DLL所在目录是：</p>\n<p>C:\\Program Files (x86)\\MySQL\\MySQL Connector Net 6.9.8\\Assemblies\\v4.0</p>\n<p>3、重启CodeSmith生效</p>\n<p><br><br><br></p>\n<p>其余解决方案：<br><br><br><a href=\"http://blog.csdn.net/joke01/article/details/9469515\" target=\"_blank\" rel=\"external\">codesmith无法连接Mysql的解决方法</a></p>\n<p><a href=\"http://www.cnblogs.com/tim190/archive/2013/01/18/2866161.html\" target=\"_blank\" rel=\"external\">codesmith6.5连接Mysql提示“找不到请求的 .Net Framework Data Provider。可能没有安装。”解决方法</a></p>\n","excerpt":"","more":"<p>1、下载 mysql-connector-net 安装</p>\n<p><a href=\"https://dev.mysql.com/downloads/connector/net/6.9.html\">mysql-connector-net</a></p>\n<p>2、mysql-connector-net 安装完毕之后，到对应的安装目录下，把对应的MySQL .NET dll拷贝到 CodeSmith的bin目录和SchemaProviders目录。</p>\n<p>一般DLL所在目录是：</p>\n<p>C:\\Program Files (x86)\\MySQL\\MySQL Connector Net 6.9.8\\Assemblies\\v4.0</p>\n<p>3、重启CodeSmith生效</p>\n<p><br><br><br></p>\n<p>其余解决方案：<br><br><br><a href=\"http://blog.csdn.net/joke01/article/details/9469515\">codesmith无法连接Mysql的解决方法</a></p>\n<p><a href=\"http://www.cnblogs.com/tim190/archive/2013/01/18/2866161.html\">codesmith6.5连接Mysql提示“找不到请求的 .Net Framework Data Provider。可能没有安装。”解决方法</a></p>\n"},{"layout":"post","title":"CodeSmith for MySQL template","date":"2016-03-27T16:00:00.000Z","_content":"\n\n对于.NET平台上的代码生成器来说，codesmith是一个非常好的选择。\n\n<br> \n以前在学院实验室用的都是SQL server数据库，老师给的一套codesmith模板用来生成model/DAL/BLL很是方便。\n<br> \n不过后来放弃SQL server 投入MySQL之后，刚开始都是手写SQL，还是很痛苦的。\n<br> \n再后来又去找MySQL codesmith模板,这个对应的资料就不多了。不过最后还是找到了一套不错的，凑合能用。起初也懒，codesmith语法不熟，就没想过去修改一下了。\n<br> 最近又要用到这套东西，于是决定还是去修改一番，更便于使用。\n\n这个文章就主要讲一下修改过程，顺便说一下codesmith的简单语法。\n\n\n先说一下操作步骤：\n\n把模板的文件夹扔到codesmith模板文件的路径下，接着打开Codesmith，找到刚扔过去的文件夹，选择Main.cst,右键-execute-选择对应的MySQL库-选中表。\n<br>（注：codesmith连接MySQL有问题的话，\n<br>移步这里解决 [CodeSmith 连接MySQL数据库报“can't find .net framework data provider”](http://codelover.link/2016/02/25/CodeSmith%E8%BF%9E%E6%8E%A5MySQL%E6%8A%A5%E9%94%99%E2%80%9C%E6%89%BE%E4%B8%8D%E5%88%B0%E8%AF%B7%E6%B1%82%E7%9A%84%20.Net%20Framework%20Data%20Provider%E3%80%82%E5%8F%AF%E8%83%BD%E6%B2%A1%E6%9C%89%E5%AE%89%E8%A3%85%E3%80%82%E2%80%9D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/)\n\n如下图：\n![1](http://7xrayk.com1.z0.glb.clouddn.com/20160228-1.png)\n\n\n\n然后点击Generate就能顺利生成model/dal/bll了。\n\n\n生成代码结构如下：\n![2](http://7xrayk.com1.z0.glb.clouddn.com/20160228-2.png)\n\n\n\n<p>这样操作没什么问题，顺利生成了我们要的model/dal/bll了，然后....我懒嘛。\n每次都要把表一个个选一次，麻不麻烦啊。然后就想了，能不能改一下模板呢。于是便开始google相关资料了。找到了几个相关文章，参考这就开始改造了。\n先看看原来的Main.cst里面写了撒。\n\n```csharp\n<%@ CodeTemplate Language=\"C#\" ResponseEncoding=\"UTF-8\" \nTargetLanguage=\"Text\" Src=\"\" Inherits=\"\" Debug=\"False\" \nDescription=\"Template description here.\" \n Output=\"None\"%>\n<%@ Register Name=\"Models\" Template=\"DBMad.Models.cst\" \n\tMergeProperties=\"False\" ExcludeProperties=\"\" %>\t\n<%@ Register Name=\"DAL\" Template=\"DBMad.DAL.cst\" \nMergeProperties=\"False\" ExcludeProperties=\"\" %> \n<%@ Register Name=\"BLL\" Template=\"DBMad.BLL.cst\" \nMergeProperties=\"False\" ExcludeProperties=\"\" %>\n\n<%@ Property Name=\"SourceTable\" \nType=\"SchemaExplorer.TableSchema\" Optional=\"False\"%>\n<%@ Property Name=\"RootNamespace\" Default=\"Net.Itcast.CN\" \nType=\"System.String\" Optional=\"False\"%>\n\n<%@ Assembly Name=\"SchemaExplorer\" %>\n<%@ Assembly Name=\"System.Data\" %>\n<%@ Import Namespace=\"SchemaExplorer\" %>\n<%@ Import Namespace=\"System.Data\" %>\n<script runat=\"template\">\n\tprivate string _outputDirectory = String.Empty;\n\t[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), \n\ttypeof(System.Drawing.Design.UITypeEditor))] \n\t[Description(\"The directory to output the results to.\")]\n\tpublic string OutputDirectory \n\t{\n\t\tget\n\t\t{\t\t\n\t\t\treturn _outputDirectory;\n\t\t}\n\t\tset\n\t\t{\n\t\t\tif (value != null && !value.EndsWith(\"\\\\\"))\n\t\t\t{\n\t\t\t\tvalue += \"\\\\\";\n\t\t    }\n\t\t\t_outputDirectory = value;\n\t\t} \n\t}\n</script>\n```\n\n\n这一段基本就是在声明选项以及引用命名空间，表现出来的便是我们看到的下图：\n\n![1](http://7xrayk.com1.z0.glb.clouddn.com/20160228-1.png)\n\n\n```csharp\n\n<%\n    Models model = this.Create<Models>();\n\tmodel.ModelsNamespace = this.RootNamespace+\".Model\";\n\tmodel.TargetTable = this.SourceTable;\n\tmodel.RenderToFile(this.OutputDirectory+\"Model/\"+model.GetFileName(),true);\n\t\n\n   DAL dal = this.Create<DAL>();\n   dal.TargetTable = this.SourceTable;\n   dal.ModelsNamespace = model.ModelsNamespace;\n   dal.DALClassNameSurfix = \"DAL\";\n   dal.DALNamespace =this.RootNamespace+\".DAL\";\n   dal.RenderToFile(this.OutputDirectory+\"DAL/\"\n   +dal.GetFileName(),true);\n\n   BLL bll = this.Create<BLL>();\n   bll.ModelsNamespace = model.ModelsNamespace;\n   bll.DALClassNameSurfix = dal.DALClassNameSurfix;\n   bll.DALNamespace = dal.DALNamespace;\n   bll.BLLClassNameSurfix = \"BLL\";\n   bll.BLLNamespace = this.RootNamespace+\".BLL\";\n   bll.TargetTable = this.SourceTable;\n   bll.RenderToFile(this.OutputDirectory+\"BLL/\"\n   +bll.GetFileName(),true);\n\n   Response.Write(\"ok,see \"+this.OutputDirectory);\n%>\n```\n\n这一段就是我们点击Generate之后执行的代码，基本功能就是调用\nDBMad.Models.cst,DBMad.DAL.cst,DBMad.BLL.cst。\n因为在上面声明数据源的时候，使用了SchemaExplorer.TableSchema，导致我们选择表的时候不能多选。代码如下：\n\n<%@ Property Name=\"SourceTable\" Type=\"SchemaExplorer.TableSchema\" Optional=\"False\"%>\n\n这样一想，这个Main.cst就是一个可以处理单表的生成模板了，我们只要自己写一个可以多选表的模板，然后循环调用这个模板去生成，不就完事了？\n\n找了一下资料，发现只需要把上面的选项Type改一下，便可以多选表了。\n\n如下：\n\n<%@ Property Name=\"SourceTables\" Type=\"SchemaExplorer.TableSchemaCollection\" Default=\"\" Optional=\"False\" Category=\"\"%> \n\n\n整体代码如下：\n\n```csharp\n<%@ CodeTemplate Language=\"C#\" ResponseEncoding=\"UTF-8\" \nTargetLanguage=\"Text\" Src=\"\" Inherits=\"\" Debug=\"False\" \nDescription=\"Template description here.\" Output=\"None\"%>\n<%@ Property Name=\"SourceTables\" \nType=\"SchemaExplorer.TableSchemaCollection\" Default=\"\" \nOptional=\"False\" Category=\"\"%> \n<%@ Register Name=\"SE\" Template=\"CreatSingleTable.cst\" \nMergeProperties=\"False\" ExcludeProperties=\"\" %> \n<%@ Property Name=\"RootNamespace\" Default=\"Net.Itcast.CN\" \nType=\"System.String\" Optional=\"False\"%>\n<%@ Assembly Name=\"SchemaExplorer\" %> \n<%@ Assembly Name=\"System.Data\" %>\n<%@ Import Namespace=\"SchemaExplorer\" %> \n<%@ Import Namespace=\"System.Data\" %> \n<%@ Import Namespace=\"System.Collections\" %> \n<script runat=\"template\">\n\tprivate string _outputDirectory = String.Empty;\n\t[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), \n\ttypeof(System.Drawing.Design.UITypeEditor))] \n\t[Description(\"The directory to output the results to.\")]\n\tpublic string OutputDirectory \n\t{\n\t\tget\n\t\t{\t\t\n\t\t\treturn _outputDirectory;\n\t\t}\n\t\tset\n\t\t{\n\t\t\tif (value != null && !value.EndsWith(\"\\\\\"))\n\t\t\t{\n\t\t\t\tvalue += \"\\\\\";\n\t\t    }\n\t\t\t_outputDirectory = value;\n\t\t} \n\t}\n</script>\n\n<% \nforeach(TableSchema ts in SourceTables) \n{ \nSE s = new SE(); \n   s.SourceTable = ts; \n   s.RootNamespace = RootNamespace;\n   s.OutputDirectory = OutputDirectory;\n   s.Render(this.Response); \n} \n%> \n<script runat=\"template\"> \n</script> \n\n```\n\n前面一部分还是一样的声明，\n\n<%@ Property Name=\"SourceTables\" Type=\"SchemaExplorer.TableSchemaCollection\" Default=\"\" Optional=\"False\" Category=\"\"%> \n\n这一句把选项类型修改成可多选的（既 集合）。\n效果如下图：\n![3](http://7xrayk.com1.z0.glb.clouddn.com/20160228-4.png)\n\n\n\n```csharp\n<% \nforeach(TableSchema ts in SourceTables) \n{ \nSE s = new SE(); \n   s.SourceTable = ts; \n   s.RootNamespace = RootNamespace;\n   s.OutputDirectory = OutputDirectory;\n   s.Render(this.Response); \n} \n%> \n<script runat=\"template\"> \n</script> \n\n```\n\n\n这一段代码便是获取刚得到的表集合，遍历集合然后依次调用之前的单表生成模板。\n\n\n到这里差不多已经完成了我要的效果，选择多表，实现一次生成所有的表对应的model/dal/bll。\n\n\n这个效果基本就是我要的了，但是后来又发现，model里面的字段居然没有注释，我在建表的时候写了字段注释的呀。\n\n打开model的cst文件之后发现，模板并没有做注释这个工作。\n代码如下：\n\n```csharp\n<%@ CodeTemplate Language=\"C#\" TargetLanguage=\"C#\" \nSrc=\"ToolsCodeTemplate.cs\" Inherits=\"ToolsCodeTemplate\"%>\n<%@ Property Name=\"TargetTable\" Type=\"SchemaExplorer.TableSchema\" \nCategory=\"Context\" Description=\"TargetTable that the object is \nbased on.\" %>\n<%@ Property Name=\"ModelsNamespace\" Default=\"Model\" \nType=\"System.String\" Category=\"Context\" Description=\"TargetTable \nthat the object is based on.\" %>\n<%@ Assembly Name=\"SchemaExplorer\" %>\n<%@ Assembly Name=\"System.Data\" %>\n<%@ Import Namespace=\"SchemaExplorer\" %>\n<%@ Import Namespace=\"System.Data\" %>\n<% PrintHeader(); %>\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace <%= ModelsNamespace %>\n{\t\n\t[Serializable()]\n\tpublic class <%= GetModelClassName() %>\n\t{\n\t    <% \n\t\tforeach (ColumnSchema column in TargetTable.Columns)\n\t   {\n\t\t%>\n\t\t\tprivate <%= GetPropertyType(column) %>  _<%= \n\t\t\tGetPropertyName(column) %>;\t\t\t\n\t\t<%\n\t\t}\n\t\t%>\n\t    \n\t\t<% \n\t\tforeach (ColumnSchema column in TargetTable.Columns)\n\t\t{\n\t\t%>\n\t\t\tpublic <%= GetPropertyType(column) %> <%= \n\t\t\tGetPropertyName(column) %>\n\t\t\t{\n\t\t\t\t get { return _<%= GetPropertyName(column) %>; }\n\t             set { _<%= GetPropertyName(column) %> = value; }\n\t\t\t}\n\t\t<%\n\t\t}\n\t\t%>\t\n\t}\n}\n<script runat=\"template\">\npublic string GetModelClassName()\n{\n\treturn GetModelClassName(TargetTable);\n}\n\npublic override string GetFileName()\n{\n\treturn this.GetModelClassName(this.TargetTable) + \".cs\";\n}\n\n</script>\n```\n\n获取表中字段名使用的是GetPropertyName(column)，咦，在哪实现了这个东西呢？回去翻一下文件，哦，还有一个ToolsCodeTemplate.cs文一直没管呢。\n\n果然，GetPropertyName(column)在这里。\n\n```csharp\npublic string GetPropertyName(ColumnSchema column)\n{\n   return GetNameFromDBFieldName(column);\n}\npublic string GetNameFromDBFieldName(ColumnSchema column)\n{\n\treturn column.Name;\n}\n\n```\n读取列名就是这么简单，那么我们对应写一个函数读取一下列注释，然后再model里面调用一下不好了。\n\n又查了一下资料，\n\n```csharp\n    public string GetColumnComment(ColumnSchema column)\n    {\n         return column.Description;\n    }\n\n```\n嗯，理论上这样是可以的...\n然而，我想多了。倒腾了好久，这个属性值都是空的...\ngoogle了一圈之后发现，原来是SchemaExplorer.MySQLSchemaProvider.dll 里面压根没实现读取列注释的实现....\n\n\n不过也有对应的解决方法：\n\n[完美解决CodeSmith无法获取MySQL表及列Description说明注释的方案](http://www.cnblogs.com/LonelyShadow/p/4147743.html)\n\n把DLL替换一下就好了。\n\n最后附上模板连接:[CodeSmith-for-MySQL-Template](https://github.com/liguobao/CodeSmith-for-MySQL-Template)\n\n\n\n注：\n\n1. 模板会把MySQL的表名前三个字符截取掉，建议把表明设置为tbl开头，或者自行修改模板文件。\n2. 想让字段注释生效记得替换SchemaExplorer.MySQLSchemaProvider.dll(替换前记得备份！)\n\n","source":"_posts/CodeSmith-to-MySQL.md","raw":"---\nlayout: post\ntitle: CodeSmith for MySQL template\ncategory: CodeSmith\ndate: 2016-03-28 00:00:00\ntags:\n- codesmith\n---\n\n\n对于.NET平台上的代码生成器来说，codesmith是一个非常好的选择。\n\n<br> \n以前在学院实验室用的都是SQL server数据库，老师给的一套codesmith模板用来生成model/DAL/BLL很是方便。\n<br> \n不过后来放弃SQL server 投入MySQL之后，刚开始都是手写SQL，还是很痛苦的。\n<br> \n再后来又去找MySQL codesmith模板,这个对应的资料就不多了。不过最后还是找到了一套不错的，凑合能用。起初也懒，codesmith语法不熟，就没想过去修改一下了。\n<br> 最近又要用到这套东西，于是决定还是去修改一番，更便于使用。\n\n这个文章就主要讲一下修改过程，顺便说一下codesmith的简单语法。\n\n\n先说一下操作步骤：\n\n把模板的文件夹扔到codesmith模板文件的路径下，接着打开Codesmith，找到刚扔过去的文件夹，选择Main.cst,右键-execute-选择对应的MySQL库-选中表。\n<br>（注：codesmith连接MySQL有问题的话，\n<br>移步这里解决 [CodeSmith 连接MySQL数据库报“can't find .net framework data provider”](http://codelover.link/2016/02/25/CodeSmith%E8%BF%9E%E6%8E%A5MySQL%E6%8A%A5%E9%94%99%E2%80%9C%E6%89%BE%E4%B8%8D%E5%88%B0%E8%AF%B7%E6%B1%82%E7%9A%84%20.Net%20Framework%20Data%20Provider%E3%80%82%E5%8F%AF%E8%83%BD%E6%B2%A1%E6%9C%89%E5%AE%89%E8%A3%85%E3%80%82%E2%80%9D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/)\n\n如下图：\n![1](http://7xrayk.com1.z0.glb.clouddn.com/20160228-1.png)\n\n\n\n然后点击Generate就能顺利生成model/dal/bll了。\n\n\n生成代码结构如下：\n![2](http://7xrayk.com1.z0.glb.clouddn.com/20160228-2.png)\n\n\n\n<p>这样操作没什么问题，顺利生成了我们要的model/dal/bll了，然后....我懒嘛。\n每次都要把表一个个选一次，麻不麻烦啊。然后就想了，能不能改一下模板呢。于是便开始google相关资料了。找到了几个相关文章，参考这就开始改造了。\n先看看原来的Main.cst里面写了撒。\n\n```csharp\n<%@ CodeTemplate Language=\"C#\" ResponseEncoding=\"UTF-8\" \nTargetLanguage=\"Text\" Src=\"\" Inherits=\"\" Debug=\"False\" \nDescription=\"Template description here.\" \n Output=\"None\"%>\n<%@ Register Name=\"Models\" Template=\"DBMad.Models.cst\" \n\tMergeProperties=\"False\" ExcludeProperties=\"\" %>\t\n<%@ Register Name=\"DAL\" Template=\"DBMad.DAL.cst\" \nMergeProperties=\"False\" ExcludeProperties=\"\" %> \n<%@ Register Name=\"BLL\" Template=\"DBMad.BLL.cst\" \nMergeProperties=\"False\" ExcludeProperties=\"\" %>\n\n<%@ Property Name=\"SourceTable\" \nType=\"SchemaExplorer.TableSchema\" Optional=\"False\"%>\n<%@ Property Name=\"RootNamespace\" Default=\"Net.Itcast.CN\" \nType=\"System.String\" Optional=\"False\"%>\n\n<%@ Assembly Name=\"SchemaExplorer\" %>\n<%@ Assembly Name=\"System.Data\" %>\n<%@ Import Namespace=\"SchemaExplorer\" %>\n<%@ Import Namespace=\"System.Data\" %>\n<script runat=\"template\">\n\tprivate string _outputDirectory = String.Empty;\n\t[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), \n\ttypeof(System.Drawing.Design.UITypeEditor))] \n\t[Description(\"The directory to output the results to.\")]\n\tpublic string OutputDirectory \n\t{\n\t\tget\n\t\t{\t\t\n\t\t\treturn _outputDirectory;\n\t\t}\n\t\tset\n\t\t{\n\t\t\tif (value != null && !value.EndsWith(\"\\\\\"))\n\t\t\t{\n\t\t\t\tvalue += \"\\\\\";\n\t\t    }\n\t\t\t_outputDirectory = value;\n\t\t} \n\t}\n</script>\n```\n\n\n这一段基本就是在声明选项以及引用命名空间，表现出来的便是我们看到的下图：\n\n![1](http://7xrayk.com1.z0.glb.clouddn.com/20160228-1.png)\n\n\n```csharp\n\n<%\n    Models model = this.Create<Models>();\n\tmodel.ModelsNamespace = this.RootNamespace+\".Model\";\n\tmodel.TargetTable = this.SourceTable;\n\tmodel.RenderToFile(this.OutputDirectory+\"Model/\"+model.GetFileName(),true);\n\t\n\n   DAL dal = this.Create<DAL>();\n   dal.TargetTable = this.SourceTable;\n   dal.ModelsNamespace = model.ModelsNamespace;\n   dal.DALClassNameSurfix = \"DAL\";\n   dal.DALNamespace =this.RootNamespace+\".DAL\";\n   dal.RenderToFile(this.OutputDirectory+\"DAL/\"\n   +dal.GetFileName(),true);\n\n   BLL bll = this.Create<BLL>();\n   bll.ModelsNamespace = model.ModelsNamespace;\n   bll.DALClassNameSurfix = dal.DALClassNameSurfix;\n   bll.DALNamespace = dal.DALNamespace;\n   bll.BLLClassNameSurfix = \"BLL\";\n   bll.BLLNamespace = this.RootNamespace+\".BLL\";\n   bll.TargetTable = this.SourceTable;\n   bll.RenderToFile(this.OutputDirectory+\"BLL/\"\n   +bll.GetFileName(),true);\n\n   Response.Write(\"ok,see \"+this.OutputDirectory);\n%>\n```\n\n这一段就是我们点击Generate之后执行的代码，基本功能就是调用\nDBMad.Models.cst,DBMad.DAL.cst,DBMad.BLL.cst。\n因为在上面声明数据源的时候，使用了SchemaExplorer.TableSchema，导致我们选择表的时候不能多选。代码如下：\n\n<%@ Property Name=\"SourceTable\" Type=\"SchemaExplorer.TableSchema\" Optional=\"False\"%>\n\n这样一想，这个Main.cst就是一个可以处理单表的生成模板了，我们只要自己写一个可以多选表的模板，然后循环调用这个模板去生成，不就完事了？\n\n找了一下资料，发现只需要把上面的选项Type改一下，便可以多选表了。\n\n如下：\n\n<%@ Property Name=\"SourceTables\" Type=\"SchemaExplorer.TableSchemaCollection\" Default=\"\" Optional=\"False\" Category=\"\"%> \n\n\n整体代码如下：\n\n```csharp\n<%@ CodeTemplate Language=\"C#\" ResponseEncoding=\"UTF-8\" \nTargetLanguage=\"Text\" Src=\"\" Inherits=\"\" Debug=\"False\" \nDescription=\"Template description here.\" Output=\"None\"%>\n<%@ Property Name=\"SourceTables\" \nType=\"SchemaExplorer.TableSchemaCollection\" Default=\"\" \nOptional=\"False\" Category=\"\"%> \n<%@ Register Name=\"SE\" Template=\"CreatSingleTable.cst\" \nMergeProperties=\"False\" ExcludeProperties=\"\" %> \n<%@ Property Name=\"RootNamespace\" Default=\"Net.Itcast.CN\" \nType=\"System.String\" Optional=\"False\"%>\n<%@ Assembly Name=\"SchemaExplorer\" %> \n<%@ Assembly Name=\"System.Data\" %>\n<%@ Import Namespace=\"SchemaExplorer\" %> \n<%@ Import Namespace=\"System.Data\" %> \n<%@ Import Namespace=\"System.Collections\" %> \n<script runat=\"template\">\n\tprivate string _outputDirectory = String.Empty;\n\t[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), \n\ttypeof(System.Drawing.Design.UITypeEditor))] \n\t[Description(\"The directory to output the results to.\")]\n\tpublic string OutputDirectory \n\t{\n\t\tget\n\t\t{\t\t\n\t\t\treturn _outputDirectory;\n\t\t}\n\t\tset\n\t\t{\n\t\t\tif (value != null && !value.EndsWith(\"\\\\\"))\n\t\t\t{\n\t\t\t\tvalue += \"\\\\\";\n\t\t    }\n\t\t\t_outputDirectory = value;\n\t\t} \n\t}\n</script>\n\n<% \nforeach(TableSchema ts in SourceTables) \n{ \nSE s = new SE(); \n   s.SourceTable = ts; \n   s.RootNamespace = RootNamespace;\n   s.OutputDirectory = OutputDirectory;\n   s.Render(this.Response); \n} \n%> \n<script runat=\"template\"> \n</script> \n\n```\n\n前面一部分还是一样的声明，\n\n<%@ Property Name=\"SourceTables\" Type=\"SchemaExplorer.TableSchemaCollection\" Default=\"\" Optional=\"False\" Category=\"\"%> \n\n这一句把选项类型修改成可多选的（既 集合）。\n效果如下图：\n![3](http://7xrayk.com1.z0.glb.clouddn.com/20160228-4.png)\n\n\n\n```csharp\n<% \nforeach(TableSchema ts in SourceTables) \n{ \nSE s = new SE(); \n   s.SourceTable = ts; \n   s.RootNamespace = RootNamespace;\n   s.OutputDirectory = OutputDirectory;\n   s.Render(this.Response); \n} \n%> \n<script runat=\"template\"> \n</script> \n\n```\n\n\n这一段代码便是获取刚得到的表集合，遍历集合然后依次调用之前的单表生成模板。\n\n\n到这里差不多已经完成了我要的效果，选择多表，实现一次生成所有的表对应的model/dal/bll。\n\n\n这个效果基本就是我要的了，但是后来又发现，model里面的字段居然没有注释，我在建表的时候写了字段注释的呀。\n\n打开model的cst文件之后发现，模板并没有做注释这个工作。\n代码如下：\n\n```csharp\n<%@ CodeTemplate Language=\"C#\" TargetLanguage=\"C#\" \nSrc=\"ToolsCodeTemplate.cs\" Inherits=\"ToolsCodeTemplate\"%>\n<%@ Property Name=\"TargetTable\" Type=\"SchemaExplorer.TableSchema\" \nCategory=\"Context\" Description=\"TargetTable that the object is \nbased on.\" %>\n<%@ Property Name=\"ModelsNamespace\" Default=\"Model\" \nType=\"System.String\" Category=\"Context\" Description=\"TargetTable \nthat the object is based on.\" %>\n<%@ Assembly Name=\"SchemaExplorer\" %>\n<%@ Assembly Name=\"System.Data\" %>\n<%@ Import Namespace=\"SchemaExplorer\" %>\n<%@ Import Namespace=\"System.Data\" %>\n<% PrintHeader(); %>\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace <%= ModelsNamespace %>\n{\t\n\t[Serializable()]\n\tpublic class <%= GetModelClassName() %>\n\t{\n\t    <% \n\t\tforeach (ColumnSchema column in TargetTable.Columns)\n\t   {\n\t\t%>\n\t\t\tprivate <%= GetPropertyType(column) %>  _<%= \n\t\t\tGetPropertyName(column) %>;\t\t\t\n\t\t<%\n\t\t}\n\t\t%>\n\t    \n\t\t<% \n\t\tforeach (ColumnSchema column in TargetTable.Columns)\n\t\t{\n\t\t%>\n\t\t\tpublic <%= GetPropertyType(column) %> <%= \n\t\t\tGetPropertyName(column) %>\n\t\t\t{\n\t\t\t\t get { return _<%= GetPropertyName(column) %>; }\n\t             set { _<%= GetPropertyName(column) %> = value; }\n\t\t\t}\n\t\t<%\n\t\t}\n\t\t%>\t\n\t}\n}\n<script runat=\"template\">\npublic string GetModelClassName()\n{\n\treturn GetModelClassName(TargetTable);\n}\n\npublic override string GetFileName()\n{\n\treturn this.GetModelClassName(this.TargetTable) + \".cs\";\n}\n\n</script>\n```\n\n获取表中字段名使用的是GetPropertyName(column)，咦，在哪实现了这个东西呢？回去翻一下文件，哦，还有一个ToolsCodeTemplate.cs文一直没管呢。\n\n果然，GetPropertyName(column)在这里。\n\n```csharp\npublic string GetPropertyName(ColumnSchema column)\n{\n   return GetNameFromDBFieldName(column);\n}\npublic string GetNameFromDBFieldName(ColumnSchema column)\n{\n\treturn column.Name;\n}\n\n```\n读取列名就是这么简单，那么我们对应写一个函数读取一下列注释，然后再model里面调用一下不好了。\n\n又查了一下资料，\n\n```csharp\n    public string GetColumnComment(ColumnSchema column)\n    {\n         return column.Description;\n    }\n\n```\n嗯，理论上这样是可以的...\n然而，我想多了。倒腾了好久，这个属性值都是空的...\ngoogle了一圈之后发现，原来是SchemaExplorer.MySQLSchemaProvider.dll 里面压根没实现读取列注释的实现....\n\n\n不过也有对应的解决方法：\n\n[完美解决CodeSmith无法获取MySQL表及列Description说明注释的方案](http://www.cnblogs.com/LonelyShadow/p/4147743.html)\n\n把DLL替换一下就好了。\n\n最后附上模板连接:[CodeSmith-for-MySQL-Template](https://github.com/liguobao/CodeSmith-for-MySQL-Template)\n\n\n\n注：\n\n1. 模板会把MySQL的表名前三个字符截取掉，建议把表明设置为tbl开头，或者自行修改模板文件。\n2. 想让字段注释生效记得替换SchemaExplorer.MySQLSchemaProvider.dll(替换前记得备份！)\n\n","slug":"CodeSmith-to-MySQL","published":1,"updated":"2016-10-15T05:20:24.644Z","comments":1,"photos":[],"link":"","_id":"cj0dyumvx000e6kunl9r3gphh","content":"<p>对于.NET平台上的代码生成器来说，codesmith是一个非常好的选择。</p>\n<p><br><br>以前在学院实验室用的都是SQL server数据库，老师给的一套codesmith模板用来生成model/DAL/BLL很是方便。<br><br><br>不过后来放弃SQL server 投入MySQL之后，刚开始都是手写SQL，还是很痛苦的。<br><br><br>再后来又去找MySQL codesmith模板,这个对应的资料就不多了。不过最后还是找到了一套不错的，凑合能用。起初也懒，codesmith语法不熟，就没想过去修改一下了。<br><br> 最近又要用到这套东西，于是决定还是去修改一番，更便于使用。</p>\n<p>这个文章就主要讲一下修改过程，顺便说一下codesmith的简单语法。</p>\n<p>先说一下操作步骤：</p>\n<p>把模板的文件夹扔到codesmith模板文件的路径下，接着打开Codesmith，找到刚扔过去的文件夹，选择Main.cst,右键-execute-选择对应的MySQL库-选中表。<br><br>（注：codesmith连接MySQL有问题的话，<br><br>移步这里解决 <a href=\"http://codelover.link/2016/02/25/CodeSmith%E8%BF%9E%E6%8E%A5MySQL%E6%8A%A5%E9%94%99%E2%80%9C%E6%89%BE%E4%B8%8D%E5%88%B0%E8%AF%B7%E6%B1%82%E7%9A%84%20.Net%20Framework%20Data%20Provider%E3%80%82%E5%8F%AF%E8%83%BD%E6%B2%A1%E6%9C%89%E5%AE%89%E8%A3%85%E3%80%82%E2%80%9D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/\">CodeSmith 连接MySQL数据库报“can’t find .net framework data provider”</a></p>\n<p>如下图：<br><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/20160228-1.png\" alt=\"1\"></p>\n<p>然后点击Generate就能顺利生成model/dal/bll了。</p>\n<p>生成代码结构如下：<br><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/20160228-2.png\" alt=\"2\"></p>\n<p></p><p>这样操作没什么问题，顺利生成了我们要的model/dal/bll了，然后….我懒嘛。<br>每次都要把表一个个选一次，麻不麻烦啊。然后就想了，能不能改一下模板呢。于是便开始google相关资料了。找到了几个相关文章，参考这就开始改造了。<br>先看看原来的Main.cst里面写了撒。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%@ CodeTemplate Language=<span class=\"string\">\"C#\"</span> ResponseEncoding=<span class=\"string\">\"UTF-8\"</span> </div><div class=\"line\">TargetLanguage=<span class=\"string\">\"Text\"</span> Src=<span class=\"string\">\"\"</span> Inherits=<span class=\"string\">\"\"</span> Debug=<span class=\"string\">\"False\"</span> </div><div class=\"line\">Description=<span class=\"string\">\"Template description here.\"</span> </div><div class=\"line\"> Output=<span class=\"string\">\"None\"</span>%&gt;</div><div class=\"line\">&lt;%@ Register Name=<span class=\"string\">\"Models\"</span> Template=<span class=\"string\">\"DBMad.Models.cst\"</span> </div><div class=\"line\">\tMergeProperties=<span class=\"string\">\"False\"</span> ExcludeProperties=<span class=\"string\">\"\"</span> %&gt;\t</div><div class=\"line\">&lt;%@ Register Name=<span class=\"string\">\"DAL\"</span> Template=<span class=\"string\">\"DBMad.DAL.cst\"</span> </div><div class=\"line\">MergeProperties=<span class=\"string\">\"False\"</span> ExcludeProperties=<span class=\"string\">\"\"</span> %&gt; </div><div class=\"line\">&lt;%@ Register Name=<span class=\"string\">\"BLL\"</span> Template=<span class=\"string\">\"DBMad.BLL.cst\"</span> </div><div class=\"line\">MergeProperties=<span class=\"string\">\"False\"</span> ExcludeProperties=<span class=\"string\">\"\"</span> %&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;%@ Property Name=<span class=\"string\">\"SourceTable\"</span> </div><div class=\"line\">Type=<span class=\"string\">\"SchemaExplorer.TableSchema\"</span> Optional=<span class=\"string\">\"False\"</span>%&gt;</div><div class=\"line\">&lt;%@ Property Name=<span class=\"string\">\"RootNamespace\"</span> Default=<span class=\"string\">\"Net.Itcast.CN\"</span> </div><div class=\"line\">Type=<span class=\"string\">\"System.String\"</span> Optional=<span class=\"string\">\"False\"</span>%&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;%@ Assembly Name=<span class=\"string\">\"SchemaExplorer\"</span> %&gt;</div><div class=\"line\">&lt;%@ Assembly Name=<span class=\"string\">\"System.Data\"</span> %&gt;</div><div class=\"line\">&lt;%@ Import Namespace=<span class=\"string\">\"SchemaExplorer\"</span> %&gt;</div><div class=\"line\">&lt;%@ Import Namespace=<span class=\"string\">\"System.Data\"</span> %&gt;</div><div class=\"line\">&lt;script runat=<span class=\"string\">\"template\"</span>&gt;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _outputDirectory = String.Empty;</div><div class=\"line\">\t[Editor(<span class=\"keyword\">typeof</span>(System.Windows.Forms.Design.FolderNameEditor), </div><div class=\"line\">\t<span class=\"keyword\">typeof</span>(System.Drawing.Design.UITypeEditor))] </div><div class=\"line\">\t[Description(<span class=\"string\">\"The directory to output the results to.\"</span>)]</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">string</span> OutputDirectory </div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">get</span></div><div class=\"line\">\t\t&#123;\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> _outputDirectory;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">set</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> != <span class=\"literal\">null</span> &amp;&amp; !<span class=\"keyword\">value</span>.EndsWith(<span class=\"string\">\"\\\\\"</span>))</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">value</span> += <span class=\"string\">\"\\\\\"</span>;</div><div class=\"line\">\t\t    &#125;</div><div class=\"line\">\t\t\t_outputDirectory = <span class=\"keyword\">value</span>;</div><div class=\"line\">\t\t&#125; </div><div class=\"line\">\t&#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>这一段基本就是在声明选项以及引用命名空间，表现出来的便是我们看到的下图：</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/20160228-1.png\" alt=\"1\"></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;%</div><div class=\"line\">    Models model = <span class=\"keyword\">this</span>.Create&lt;Models&gt;();</div><div class=\"line\">\tmodel.ModelsNamespace = <span class=\"keyword\">this</span>.RootNamespace+<span class=\"string\">\".Model\"</span>;</div><div class=\"line\">\tmodel.TargetTable = <span class=\"keyword\">this</span>.SourceTable;</div><div class=\"line\">\tmodel.RenderToFile(<span class=\"keyword\">this</span>.OutputDirectory+<span class=\"string\">\"Model/\"</span>+model.GetFileName(),<span class=\"literal\">true</span>);</div><div class=\"line\">\t</div><div class=\"line\"></div><div class=\"line\">   DAL dal = <span class=\"keyword\">this</span>.Create&lt;DAL&gt;();</div><div class=\"line\">   dal.TargetTable = <span class=\"keyword\">this</span>.SourceTable;</div><div class=\"line\">   dal.ModelsNamespace = model.ModelsNamespace;</div><div class=\"line\">   dal.DALClassNameSurfix = <span class=\"string\">\"DAL\"</span>;</div><div class=\"line\">   dal.DALNamespace =<span class=\"keyword\">this</span>.RootNamespace+<span class=\"string\">\".DAL\"</span>;</div><div class=\"line\">   dal.RenderToFile(<span class=\"keyword\">this</span>.OutputDirectory+<span class=\"string\">\"DAL/\"</span></div><div class=\"line\">   +dal.GetFileName(),<span class=\"literal\">true</span>);</div><div class=\"line\"></div><div class=\"line\">   BLL bll = <span class=\"keyword\">this</span>.Create&lt;BLL&gt;();</div><div class=\"line\">   bll.ModelsNamespace = model.ModelsNamespace;</div><div class=\"line\">   bll.DALClassNameSurfix = dal.DALClassNameSurfix;</div><div class=\"line\">   bll.DALNamespace = dal.DALNamespace;</div><div class=\"line\">   bll.BLLClassNameSurfix = <span class=\"string\">\"BLL\"</span>;</div><div class=\"line\">   bll.BLLNamespace = <span class=\"keyword\">this</span>.RootNamespace+<span class=\"string\">\".BLL\"</span>;</div><div class=\"line\">   bll.TargetTable = <span class=\"keyword\">this</span>.SourceTable;</div><div class=\"line\">   bll.RenderToFile(<span class=\"keyword\">this</span>.OutputDirectory+<span class=\"string\">\"BLL/\"</span></div><div class=\"line\">   +bll.GetFileName(),<span class=\"literal\">true</span>);</div><div class=\"line\"></div><div class=\"line\">   Response.Write(<span class=\"string\">\"ok,see \"</span>+<span class=\"keyword\">this</span>.OutputDirectory);</div><div class=\"line\">%&gt;</div></pre></td></tr></table></figure>\n<p>这一段就是我们点击Generate之后执行的代码，基本功能就是调用<br>DBMad.Models.cst,DBMad.DAL.cst,DBMad.BLL.cst。<br>因为在上面声明数据源的时候，使用了SchemaExplorer.TableSchema，导致我们选择表的时候不能多选。代码如下：</p>\n<p>&lt;%@ Property Name=”SourceTable” Type=”SchemaExplorer.TableSchema” Optional=”False”%&gt;</p>\n<p>这样一想，这个Main.cst就是一个可以处理单表的生成模板了，我们只要自己写一个可以多选表的模板，然后循环调用这个模板去生成，不就完事了？</p>\n<p>找了一下资料，发现只需要把上面的选项Type改一下，便可以多选表了。</p>\n<p>如下：</p>\n<p>&lt;%@ Property Name=”SourceTables” Type=”SchemaExplorer.TableSchemaCollection” Default=”” Optional=”False” Category=””%&gt; </p>\n<p>整体代码如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%@ CodeTemplate Language=<span class=\"string\">\"C#\"</span> ResponseEncoding=<span class=\"string\">\"UTF-8\"</span> </div><div class=\"line\">TargetLanguage=<span class=\"string\">\"Text\"</span> Src=<span class=\"string\">\"\"</span> Inherits=<span class=\"string\">\"\"</span> Debug=<span class=\"string\">\"False\"</span> </div><div class=\"line\">Description=<span class=\"string\">\"Template description here.\"</span> Output=<span class=\"string\">\"None\"</span>%&gt;</div><div class=\"line\">&lt;%@ Property Name=<span class=\"string\">\"SourceTables\"</span> </div><div class=\"line\">Type=<span class=\"string\">\"SchemaExplorer.TableSchemaCollection\"</span> Default=<span class=\"string\">\"\"</span> </div><div class=\"line\">Optional=<span class=\"string\">\"False\"</span> Category=<span class=\"string\">\"\"</span>%&gt; </div><div class=\"line\">&lt;%@ Register Name=<span class=\"string\">\"SE\"</span> Template=<span class=\"string\">\"CreatSingleTable.cst\"</span> </div><div class=\"line\">MergeProperties=<span class=\"string\">\"False\"</span> ExcludeProperties=<span class=\"string\">\"\"</span> %&gt; </div><div class=\"line\">&lt;%@ Property Name=<span class=\"string\">\"RootNamespace\"</span> Default=<span class=\"string\">\"Net.Itcast.CN\"</span> </div><div class=\"line\">Type=<span class=\"string\">\"System.String\"</span> Optional=<span class=\"string\">\"False\"</span>%&gt;</div><div class=\"line\">&lt;%@ Assembly Name=<span class=\"string\">\"SchemaExplorer\"</span> %&gt; </div><div class=\"line\">&lt;%@ Assembly Name=<span class=\"string\">\"System.Data\"</span> %&gt;</div><div class=\"line\">&lt;%@ Import Namespace=<span class=\"string\">\"SchemaExplorer\"</span> %&gt; </div><div class=\"line\">&lt;%@ Import Namespace=<span class=\"string\">\"System.Data\"</span> %&gt; </div><div class=\"line\">&lt;%@ Import Namespace=<span class=\"string\">\"System.Collections\"</span> %&gt; </div><div class=\"line\">&lt;script runat=<span class=\"string\">\"template\"</span>&gt;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _outputDirectory = String.Empty;</div><div class=\"line\">\t[Editor(<span class=\"keyword\">typeof</span>(System.Windows.Forms.Design.FolderNameEditor), </div><div class=\"line\">\t<span class=\"keyword\">typeof</span>(System.Drawing.Design.UITypeEditor))] </div><div class=\"line\">\t[Description(<span class=\"string\">\"The directory to output the results to.\"</span>)]</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">string</span> OutputDirectory </div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">get</span></div><div class=\"line\">\t\t&#123;\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> _outputDirectory;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">set</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> != <span class=\"literal\">null</span> &amp;&amp; !<span class=\"keyword\">value</span>.EndsWith(<span class=\"string\">\"\\\\\"</span>))</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">value</span> += <span class=\"string\">\"\\\\\"</span>;</div><div class=\"line\">\t\t    &#125;</div><div class=\"line\">\t\t\t_outputDirectory = <span class=\"keyword\">value</span>;</div><div class=\"line\">\t\t&#125; </div><div class=\"line\">\t&#125;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;% </div><div class=\"line\"><span class=\"keyword\">foreach</span>(TableSchema ts <span class=\"keyword\">in</span> SourceTables) </div><div class=\"line\">&#123; </div><div class=\"line\">SE s = <span class=\"keyword\">new</span> SE(); </div><div class=\"line\">   s.SourceTable = ts; </div><div class=\"line\">   s.RootNamespace = RootNamespace;</div><div class=\"line\">   s.OutputDirectory = OutputDirectory;</div><div class=\"line\">   s.Render(<span class=\"keyword\">this</span>.Response); </div><div class=\"line\">&#125; </div><div class=\"line\">%&gt; </div><div class=\"line\">&lt;script runat=<span class=\"string\">\"template\"</span>&gt; </div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>前面一部分还是一样的声明，</p>\n<p>&lt;%@ Property Name=”SourceTables” Type=”SchemaExplorer.TableSchemaCollection” Default=”” Optional=”False” Category=””%&gt; </p>\n<p>这一句把选项类型修改成可多选的（既 集合）。<br>效果如下图：<br><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/20160228-4.png\" alt=\"3\"></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% </div><div class=\"line\"><span class=\"keyword\">foreach</span>(TableSchema ts <span class=\"keyword\">in</span> SourceTables) </div><div class=\"line\">&#123; </div><div class=\"line\">SE s = <span class=\"keyword\">new</span> SE(); </div><div class=\"line\">   s.SourceTable = ts; </div><div class=\"line\">   s.RootNamespace = RootNamespace;</div><div class=\"line\">   s.OutputDirectory = OutputDirectory;</div><div class=\"line\">   s.Render(<span class=\"keyword\">this</span>.Response); </div><div class=\"line\">&#125; </div><div class=\"line\">%&gt; </div><div class=\"line\">&lt;script runat=<span class=\"string\">\"template\"</span>&gt; </div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>这一段代码便是获取刚得到的表集合，遍历集合然后依次调用之前的单表生成模板。</p>\n<p>到这里差不多已经完成了我要的效果，选择多表，实现一次生成所有的表对应的model/dal/bll。</p>\n<p>这个效果基本就是我要的了，但是后来又发现，model里面的字段居然没有注释，我在建表的时候写了字段注释的呀。</p>\n<p>打开model的cst文件之后发现，模板并没有做注释这个工作。<br>代码如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%@ CodeTemplate Language=\"C#\" TargetLanguage=\"C#\" </div><div class=\"line\">Src=\"ToolsCodeTemplate.cs\" Inherits=\"ToolsCodeTemplate\"%&gt;</div><div class=\"line\">&lt;%@ Property Name=\"TargetTable\" Type=\"SchemaExplorer.TableSchema\" </div><div class=\"line\">Category=\"Context\" Description=\"TargetTable that the object is </div><div class=\"line\">based on.\" %&gt;</div><div class=\"line\">&lt;%@ Property Name=\"ModelsNamespace\" Default=\"Model\" </div><div class=\"line\">Type=\"System.String\" Category=\"Context\" Description=\"TargetTable </div><div class=\"line\">that the object is based on.\" %&gt;</div><div class=\"line\">&lt;%@ Assembly Name=\"SchemaExplorer\" %&gt;</div><div class=\"line\">&lt;%@ Assembly Name=\"System.Data\" %&gt;</div><div class=\"line\">&lt;%@ Import Namespace=\"SchemaExplorer\" %&gt;</div><div class=\"line\">&lt;%@ Import Namespace=\"System.Data\" %&gt;</div><div class=\"line\">&lt;% PrintHeader(); %&gt;</div><div class=\"line\">using System;</div><div class=\"line\">using System.Collections.Generic;</div><div class=\"line\">using System.Text;</div><div class=\"line\"></div><div class=\"line\">namespace &lt;%= ModelsNamespace %&gt;</div><div class=\"line\">&#123;\t</div><div class=\"line\">\t[Serializable()]</div><div class=\"line\">\tpublic class &lt;%= GetModelClassName() %&gt;</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t    &lt;% </div><div class=\"line\">\t\tforeach (ColumnSchema column in TargetTable.Columns)</div><div class=\"line\">\t   &#123;</div><div class=\"line\">\t\t%&gt;</div><div class=\"line\">\t\t\tprivate &lt;%= GetPropertyType(column) %&gt;  _&lt;%= </div><div class=\"line\">\t\t\tGetPropertyName(column) %&gt;;\t\t\t</div><div class=\"line\">\t\t&lt;%</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t%&gt;</div><div class=\"line\">\t    </div><div class=\"line\">\t\t&lt;% </div><div class=\"line\">\t\tforeach (ColumnSchema column in TargetTable.Columns)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t%&gt;</div><div class=\"line\">\t\t\tpublic &lt;%= GetPropertyType(column) %&gt; &lt;%= </div><div class=\"line\">\t\t\tGetPropertyName(column) %&gt;</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t get &#123; return _&lt;%= GetPropertyName(column) %&gt;; &#125;</div><div class=\"line\">\t             set &#123; _&lt;%= GetPropertyName(column) %&gt; = value; &#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&lt;%</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t%&gt;\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;script runat=\"template\"&gt;</div><div class=\"line\">public string GetModelClassName()</div><div class=\"line\">&#123;</div><div class=\"line\">\treturn GetModelClassName(TargetTable);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">public override string GetFileName()</div><div class=\"line\">&#123;</div><div class=\"line\">\treturn this.GetModelClassName(this.TargetTable) + \".cs\";</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>获取表中字段名使用的是GetPropertyName(column)，咦，在哪实现了这个东西呢？回去翻一下文件，哦，还有一个ToolsCodeTemplate.cs文一直没管呢。</p>\n<p>果然，GetPropertyName(column)在这里。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GetPropertyName</span>(<span class=\"params\">ColumnSchema column</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> GetNameFromDBFieldName(column);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GetNameFromDBFieldName</span>(<span class=\"params\">ColumnSchema column</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> column.Name;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>读取列名就是这么简单，那么我们对应写一个函数读取一下列注释，然后再model里面调用一下不好了。</p>\n<p>又查了一下资料，</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GetColumnComment</span>(<span class=\"params\">ColumnSchema column</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> column.Description;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>嗯，理论上这样是可以的…<br>然而，我想多了。倒腾了好久，这个属性值都是空的…<br>google了一圈之后发现，原来是SchemaExplorer.MySQLSchemaProvider.dll 里面压根没实现读取列注释的实现….</p>\n<p>不过也有对应的解决方法：</p>\n<p><a href=\"http://www.cnblogs.com/LonelyShadow/p/4147743.html\" target=\"_blank\" rel=\"external\">完美解决CodeSmith无法获取MySQL表及列Description说明注释的方案</a></p>\n<p>把DLL替换一下就好了。</p>\n<p>最后附上模板连接:<a href=\"https://github.com/liguobao/CodeSmith-for-MySQL-Template\" target=\"_blank\" rel=\"external\">CodeSmith-for-MySQL-Template</a></p>\n<p>注：</p>\n<ol>\n<li>模板会把MySQL的表名前三个字符截取掉，建议把表明设置为tbl开头，或者自行修改模板文件。</li>\n<li>想让字段注释生效记得替换SchemaExplorer.MySQLSchemaProvider.dll(替换前记得备份！)</li>\n</ol>\n","excerpt":"","more":"<p>对于.NET平台上的代码生成器来说，codesmith是一个非常好的选择。</p>\n<p><br><br>以前在学院实验室用的都是SQL server数据库，老师给的一套codesmith模板用来生成model/DAL/BLL很是方便。<br><br><br>不过后来放弃SQL server 投入MySQL之后，刚开始都是手写SQL，还是很痛苦的。<br><br><br>再后来又去找MySQL codesmith模板,这个对应的资料就不多了。不过最后还是找到了一套不错的，凑合能用。起初也懒，codesmith语法不熟，就没想过去修改一下了。<br><br> 最近又要用到这套东西，于是决定还是去修改一番，更便于使用。</p>\n<p>这个文章就主要讲一下修改过程，顺便说一下codesmith的简单语法。</p>\n<p>先说一下操作步骤：</p>\n<p>把模板的文件夹扔到codesmith模板文件的路径下，接着打开Codesmith，找到刚扔过去的文件夹，选择Main.cst,右键-execute-选择对应的MySQL库-选中表。<br><br>（注：codesmith连接MySQL有问题的话，<br><br>移步这里解决 <a href=\"http://codelover.link/2016/02/25/CodeSmith%E8%BF%9E%E6%8E%A5MySQL%E6%8A%A5%E9%94%99%E2%80%9C%E6%89%BE%E4%B8%8D%E5%88%B0%E8%AF%B7%E6%B1%82%E7%9A%84%20.Net%20Framework%20Data%20Provider%E3%80%82%E5%8F%AF%E8%83%BD%E6%B2%A1%E6%9C%89%E5%AE%89%E8%A3%85%E3%80%82%E2%80%9D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/\">CodeSmith 连接MySQL数据库报“can’t find .net framework data provider”</a></p>\n<p>如下图：<br><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/20160228-1.png\" alt=\"1\"></p>\n<p>然后点击Generate就能顺利生成model/dal/bll了。</p>\n<p>生成代码结构如下：<br><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/20160228-2.png\" alt=\"2\"></p>\n<p><p>这样操作没什么问题，顺利生成了我们要的model/dal/bll了，然后….我懒嘛。<br>每次都要把表一个个选一次，麻不麻烦啊。然后就想了，能不能改一下模板呢。于是便开始google相关资料了。找到了几个相关文章，参考这就开始改造了。<br>先看看原来的Main.cst里面写了撒。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%@ CodeTemplate Language=<span class=\"string\">\"C#\"</span> ResponseEncoding=<span class=\"string\">\"UTF-8\"</span> </div><div class=\"line\">TargetLanguage=<span class=\"string\">\"Text\"</span> Src=<span class=\"string\">\"\"</span> Inherits=<span class=\"string\">\"\"</span> Debug=<span class=\"string\">\"False\"</span> </div><div class=\"line\">Description=<span class=\"string\">\"Template description here.\"</span> </div><div class=\"line\"> Output=<span class=\"string\">\"None\"</span>%&gt;</div><div class=\"line\">&lt;%@ Register Name=<span class=\"string\">\"Models\"</span> Template=<span class=\"string\">\"DBMad.Models.cst\"</span> </div><div class=\"line\">\tMergeProperties=<span class=\"string\">\"False\"</span> ExcludeProperties=<span class=\"string\">\"\"</span> %&gt;\t</div><div class=\"line\">&lt;%@ Register Name=<span class=\"string\">\"DAL\"</span> Template=<span class=\"string\">\"DBMad.DAL.cst\"</span> </div><div class=\"line\">MergeProperties=<span class=\"string\">\"False\"</span> ExcludeProperties=<span class=\"string\">\"\"</span> %&gt; </div><div class=\"line\">&lt;%@ Register Name=<span class=\"string\">\"BLL\"</span> Template=<span class=\"string\">\"DBMad.BLL.cst\"</span> </div><div class=\"line\">MergeProperties=<span class=\"string\">\"False\"</span> ExcludeProperties=<span class=\"string\">\"\"</span> %&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;%@ Property Name=<span class=\"string\">\"SourceTable\"</span> </div><div class=\"line\">Type=<span class=\"string\">\"SchemaExplorer.TableSchema\"</span> Optional=<span class=\"string\">\"False\"</span>%&gt;</div><div class=\"line\">&lt;%@ Property Name=<span class=\"string\">\"RootNamespace\"</span> Default=<span class=\"string\">\"Net.Itcast.CN\"</span> </div><div class=\"line\">Type=<span class=\"string\">\"System.String\"</span> Optional=<span class=\"string\">\"False\"</span>%&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;%@ Assembly Name=<span class=\"string\">\"SchemaExplorer\"</span> %&gt;</div><div class=\"line\">&lt;%@ Assembly Name=<span class=\"string\">\"System.Data\"</span> %&gt;</div><div class=\"line\">&lt;%@ Import Namespace=<span class=\"string\">\"SchemaExplorer\"</span> %&gt;</div><div class=\"line\">&lt;%@ Import Namespace=<span class=\"string\">\"System.Data\"</span> %&gt;</div><div class=\"line\">&lt;script runat=<span class=\"string\">\"template\"</span>&gt;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _outputDirectory = String.Empty;</div><div class=\"line\">\t[Editor(<span class=\"keyword\">typeof</span>(System.Windows.Forms.Design.FolderNameEditor), </div><div class=\"line\">\t<span class=\"keyword\">typeof</span>(System.Drawing.Design.UITypeEditor))] </div><div class=\"line\">\t[Description(<span class=\"string\">\"The directory to output the results to.\"</span>)]</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">string</span> OutputDirectory </div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">get</span></div><div class=\"line\">\t\t&#123;\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> _outputDirectory;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">set</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> != <span class=\"literal\">null</span> &amp;&amp; !<span class=\"keyword\">value</span>.EndsWith(<span class=\"string\">\"\\\\\"</span>))</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">value</span> += <span class=\"string\">\"\\\\\"</span>;</div><div class=\"line\">\t\t    &#125;</div><div class=\"line\">\t\t\t_outputDirectory = <span class=\"keyword\">value</span>;</div><div class=\"line\">\t\t&#125; </div><div class=\"line\">\t&#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>这一段基本就是在声明选项以及引用命名空间，表现出来的便是我们看到的下图：</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/20160228-1.png\" alt=\"1\"></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;%</div><div class=\"line\">    Models model = <span class=\"keyword\">this</span>.Create&lt;Models&gt;();</div><div class=\"line\">\tmodel.ModelsNamespace = <span class=\"keyword\">this</span>.RootNamespace+<span class=\"string\">\".Model\"</span>;</div><div class=\"line\">\tmodel.TargetTable = <span class=\"keyword\">this</span>.SourceTable;</div><div class=\"line\">\tmodel.RenderToFile(<span class=\"keyword\">this</span>.OutputDirectory+<span class=\"string\">\"Model/\"</span>+model.GetFileName(),<span class=\"literal\">true</span>);</div><div class=\"line\">\t</div><div class=\"line\"></div><div class=\"line\">   DAL dal = <span class=\"keyword\">this</span>.Create&lt;DAL&gt;();</div><div class=\"line\">   dal.TargetTable = <span class=\"keyword\">this</span>.SourceTable;</div><div class=\"line\">   dal.ModelsNamespace = model.ModelsNamespace;</div><div class=\"line\">   dal.DALClassNameSurfix = <span class=\"string\">\"DAL\"</span>;</div><div class=\"line\">   dal.DALNamespace =<span class=\"keyword\">this</span>.RootNamespace+<span class=\"string\">\".DAL\"</span>;</div><div class=\"line\">   dal.RenderToFile(<span class=\"keyword\">this</span>.OutputDirectory+<span class=\"string\">\"DAL/\"</span></div><div class=\"line\">   +dal.GetFileName(),<span class=\"literal\">true</span>);</div><div class=\"line\"></div><div class=\"line\">   BLL bll = <span class=\"keyword\">this</span>.Create&lt;BLL&gt;();</div><div class=\"line\">   bll.ModelsNamespace = model.ModelsNamespace;</div><div class=\"line\">   bll.DALClassNameSurfix = dal.DALClassNameSurfix;</div><div class=\"line\">   bll.DALNamespace = dal.DALNamespace;</div><div class=\"line\">   bll.BLLClassNameSurfix = <span class=\"string\">\"BLL\"</span>;</div><div class=\"line\">   bll.BLLNamespace = <span class=\"keyword\">this</span>.RootNamespace+<span class=\"string\">\".BLL\"</span>;</div><div class=\"line\">   bll.TargetTable = <span class=\"keyword\">this</span>.SourceTable;</div><div class=\"line\">   bll.RenderToFile(<span class=\"keyword\">this</span>.OutputDirectory+<span class=\"string\">\"BLL/\"</span></div><div class=\"line\">   +bll.GetFileName(),<span class=\"literal\">true</span>);</div><div class=\"line\"></div><div class=\"line\">   Response.Write(<span class=\"string\">\"ok,see \"</span>+<span class=\"keyword\">this</span>.OutputDirectory);</div><div class=\"line\">%&gt;</div></pre></td></tr></table></figure>\n<p>这一段就是我们点击Generate之后执行的代码，基本功能就是调用<br>DBMad.Models.cst,DBMad.DAL.cst,DBMad.BLL.cst。<br>因为在上面声明数据源的时候，使用了SchemaExplorer.TableSchema，导致我们选择表的时候不能多选。代码如下：</p>\n<p>&lt;%@ Property Name=”SourceTable” Type=”SchemaExplorer.TableSchema” Optional=”False”%&gt;</p>\n<p>这样一想，这个Main.cst就是一个可以处理单表的生成模板了，我们只要自己写一个可以多选表的模板，然后循环调用这个模板去生成，不就完事了？</p>\n<p>找了一下资料，发现只需要把上面的选项Type改一下，便可以多选表了。</p>\n<p>如下：</p>\n<p>&lt;%@ Property Name=”SourceTables” Type=”SchemaExplorer.TableSchemaCollection” Default=”” Optional=”False” Category=””%&gt; </p>\n<p>整体代码如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%@ CodeTemplate Language=<span class=\"string\">\"C#\"</span> ResponseEncoding=<span class=\"string\">\"UTF-8\"</span> </div><div class=\"line\">TargetLanguage=<span class=\"string\">\"Text\"</span> Src=<span class=\"string\">\"\"</span> Inherits=<span class=\"string\">\"\"</span> Debug=<span class=\"string\">\"False\"</span> </div><div class=\"line\">Description=<span class=\"string\">\"Template description here.\"</span> Output=<span class=\"string\">\"None\"</span>%&gt;</div><div class=\"line\">&lt;%@ Property Name=<span class=\"string\">\"SourceTables\"</span> </div><div class=\"line\">Type=<span class=\"string\">\"SchemaExplorer.TableSchemaCollection\"</span> Default=<span class=\"string\">\"\"</span> </div><div class=\"line\">Optional=<span class=\"string\">\"False\"</span> Category=<span class=\"string\">\"\"</span>%&gt; </div><div class=\"line\">&lt;%@ Register Name=<span class=\"string\">\"SE\"</span> Template=<span class=\"string\">\"CreatSingleTable.cst\"</span> </div><div class=\"line\">MergeProperties=<span class=\"string\">\"False\"</span> ExcludeProperties=<span class=\"string\">\"\"</span> %&gt; </div><div class=\"line\">&lt;%@ Property Name=<span class=\"string\">\"RootNamespace\"</span> Default=<span class=\"string\">\"Net.Itcast.CN\"</span> </div><div class=\"line\">Type=<span class=\"string\">\"System.String\"</span> Optional=<span class=\"string\">\"False\"</span>%&gt;</div><div class=\"line\">&lt;%@ Assembly Name=<span class=\"string\">\"SchemaExplorer\"</span> %&gt; </div><div class=\"line\">&lt;%@ Assembly Name=<span class=\"string\">\"System.Data\"</span> %&gt;</div><div class=\"line\">&lt;%@ Import Namespace=<span class=\"string\">\"SchemaExplorer\"</span> %&gt; </div><div class=\"line\">&lt;%@ Import Namespace=<span class=\"string\">\"System.Data\"</span> %&gt; </div><div class=\"line\">&lt;%@ Import Namespace=<span class=\"string\">\"System.Collections\"</span> %&gt; </div><div class=\"line\">&lt;script runat=<span class=\"string\">\"template\"</span>&gt;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _outputDirectory = String.Empty;</div><div class=\"line\">\t[Editor(<span class=\"keyword\">typeof</span>(System.Windows.Forms.Design.FolderNameEditor), </div><div class=\"line\">\t<span class=\"keyword\">typeof</span>(System.Drawing.Design.UITypeEditor))] </div><div class=\"line\">\t[Description(<span class=\"string\">\"The directory to output the results to.\"</span>)]</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">string</span> OutputDirectory </div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">get</span></div><div class=\"line\">\t\t&#123;\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> _outputDirectory;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">set</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> != <span class=\"literal\">null</span> &amp;&amp; !<span class=\"keyword\">value</span>.EndsWith(<span class=\"string\">\"\\\\\"</span>))</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">value</span> += <span class=\"string\">\"\\\\\"</span>;</div><div class=\"line\">\t\t    &#125;</div><div class=\"line\">\t\t\t_outputDirectory = <span class=\"keyword\">value</span>;</div><div class=\"line\">\t\t&#125; </div><div class=\"line\">\t&#125;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;% </div><div class=\"line\"><span class=\"keyword\">foreach</span>(TableSchema ts <span class=\"keyword\">in</span> SourceTables) </div><div class=\"line\">&#123; </div><div class=\"line\">SE s = <span class=\"keyword\">new</span> SE(); </div><div class=\"line\">   s.SourceTable = ts; </div><div class=\"line\">   s.RootNamespace = RootNamespace;</div><div class=\"line\">   s.OutputDirectory = OutputDirectory;</div><div class=\"line\">   s.Render(<span class=\"keyword\">this</span>.Response); </div><div class=\"line\">&#125; </div><div class=\"line\">%&gt; </div><div class=\"line\">&lt;script runat=<span class=\"string\">\"template\"</span>&gt; </div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>前面一部分还是一样的声明，</p>\n<p>&lt;%@ Property Name=”SourceTables” Type=”SchemaExplorer.TableSchemaCollection” Default=”” Optional=”False” Category=””%&gt; </p>\n<p>这一句把选项类型修改成可多选的（既 集合）。<br>效果如下图：<br><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/20160228-4.png\" alt=\"3\"></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% </div><div class=\"line\"><span class=\"keyword\">foreach</span>(TableSchema ts <span class=\"keyword\">in</span> SourceTables) </div><div class=\"line\">&#123; </div><div class=\"line\">SE s = <span class=\"keyword\">new</span> SE(); </div><div class=\"line\">   s.SourceTable = ts; </div><div class=\"line\">   s.RootNamespace = RootNamespace;</div><div class=\"line\">   s.OutputDirectory = OutputDirectory;</div><div class=\"line\">   s.Render(<span class=\"keyword\">this</span>.Response); </div><div class=\"line\">&#125; </div><div class=\"line\">%&gt; </div><div class=\"line\">&lt;script runat=<span class=\"string\">\"template\"</span>&gt; </div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>这一段代码便是获取刚得到的表集合，遍历集合然后依次调用之前的单表生成模板。</p>\n<p>到这里差不多已经完成了我要的效果，选择多表，实现一次生成所有的表对应的model/dal/bll。</p>\n<p>这个效果基本就是我要的了，但是后来又发现，model里面的字段居然没有注释，我在建表的时候写了字段注释的呀。</p>\n<p>打开model的cst文件之后发现，模板并没有做注释这个工作。<br>代码如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%@ CodeTemplate Language=\"C#\" TargetLanguage=\"C#\" </div><div class=\"line\">Src=\"ToolsCodeTemplate.cs\" Inherits=\"ToolsCodeTemplate\"%&gt;</div><div class=\"line\">&lt;%@ Property Name=\"TargetTable\" Type=\"SchemaExplorer.TableSchema\" </div><div class=\"line\">Category=\"Context\" Description=\"TargetTable that the object is </div><div class=\"line\">based on.\" %&gt;</div><div class=\"line\">&lt;%@ Property Name=\"ModelsNamespace\" Default=\"Model\" </div><div class=\"line\">Type=\"System.String\" Category=\"Context\" Description=\"TargetTable </div><div class=\"line\">that the object is based on.\" %&gt;</div><div class=\"line\">&lt;%@ Assembly Name=\"SchemaExplorer\" %&gt;</div><div class=\"line\">&lt;%@ Assembly Name=\"System.Data\" %&gt;</div><div class=\"line\">&lt;%@ Import Namespace=\"SchemaExplorer\" %&gt;</div><div class=\"line\">&lt;%@ Import Namespace=\"System.Data\" %&gt;</div><div class=\"line\">&lt;% PrintHeader(); %&gt;</div><div class=\"line\">using System;</div><div class=\"line\">using System.Collections.Generic;</div><div class=\"line\">using System.Text;</div><div class=\"line\"></div><div class=\"line\">namespace &lt;%= ModelsNamespace %&gt;</div><div class=\"line\">&#123;\t</div><div class=\"line\">\t[Serializable()]</div><div class=\"line\">\tpublic class &lt;%= GetModelClassName() %&gt;</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t    &lt;% </div><div class=\"line\">\t\tforeach (ColumnSchema column in TargetTable.Columns)</div><div class=\"line\">\t   &#123;</div><div class=\"line\">\t\t%&gt;</div><div class=\"line\">\t\t\tprivate &lt;%= GetPropertyType(column) %&gt;  _&lt;%= </div><div class=\"line\">\t\t\tGetPropertyName(column) %&gt;;\t\t\t</div><div class=\"line\">\t\t&lt;%</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t%&gt;</div><div class=\"line\">\t    </div><div class=\"line\">\t\t&lt;% </div><div class=\"line\">\t\tforeach (ColumnSchema column in TargetTable.Columns)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t%&gt;</div><div class=\"line\">\t\t\tpublic &lt;%= GetPropertyType(column) %&gt; &lt;%= </div><div class=\"line\">\t\t\tGetPropertyName(column) %&gt;</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t get &#123; return _&lt;%= GetPropertyName(column) %&gt;; &#125;</div><div class=\"line\">\t             set &#123; _&lt;%= GetPropertyName(column) %&gt; = value; &#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&lt;%</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t%&gt;\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;script runat=\"template\"&gt;</div><div class=\"line\">public string GetModelClassName()</div><div class=\"line\">&#123;</div><div class=\"line\">\treturn GetModelClassName(TargetTable);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">public override string GetFileName()</div><div class=\"line\">&#123;</div><div class=\"line\">\treturn this.GetModelClassName(this.TargetTable) + \".cs\";</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>获取表中字段名使用的是GetPropertyName(column)，咦，在哪实现了这个东西呢？回去翻一下文件，哦，还有一个ToolsCodeTemplate.cs文一直没管呢。</p>\n<p>果然，GetPropertyName(column)在这里。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GetPropertyName</span>(<span class=\"params\">ColumnSchema column</span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> GetNameFromDBFieldName(column);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GetNameFromDBFieldName</span>(<span class=\"params\">ColumnSchema column</span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> column.Name;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>读取列名就是这么简单，那么我们对应写一个函数读取一下列注释，然后再model里面调用一下不好了。</p>\n<p>又查了一下资料，</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GetColumnComment</span>(<span class=\"params\">ColumnSchema column</span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> column.Description;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>嗯，理论上这样是可以的…<br>然而，我想多了。倒腾了好久，这个属性值都是空的…<br>google了一圈之后发现，原来是SchemaExplorer.MySQLSchemaProvider.dll 里面压根没实现读取列注释的实现….</p>\n<p>不过也有对应的解决方法：</p>\n<p><a href=\"http://www.cnblogs.com/LonelyShadow/p/4147743.html\">完美解决CodeSmith无法获取MySQL表及列Description说明注释的方案</a></p>\n<p>把DLL替换一下就好了。</p>\n<p>最后附上模板连接:<a href=\"https://github.com/liguobao/CodeSmith-for-MySQL-Template\">CodeSmith-for-MySQL-Template</a></p>\n<p>注：</p>\n<ol>\n<li>模板会把MySQL的表名前三个字符截取掉，建议把表明设置为tbl开头，或者自行修改模板文件。</li>\n<li>想让字段注释生效记得替换SchemaExplorer.MySQLSchemaProvider.dll(替换前记得备份！)</li>\n</ol>\n"},{"layout":"post","title":"C#.NET托管堆和垃圾回收","date":"2016-03-24T16:00:00.000Z","_content":"\n###托管堆基础\n 简述：每个程序都要使用这样或那样的资源，包括文件、内存缓冲区、屏幕空间、网络连接.....事实上，在面向对象的环境中，每个类型都代表可供程序使用的一种资源。要使用这些资源，必须为代表资源的类型分配内存。\n \n 以下是访问一个资源所需步骤：\n\n1. 调用IL指令newobj，为代表资源的类型分配内存。(C# new操作符)\n2. 初始化内存，设置资源的初始状态。（一般指构造函数）\n3. 访问类型的成员来使用资源。（使用成员变量、方法、属性等）\n4. 摧毁资源的状态以进行清除。（Dispose？？？）\n5. 释放内存。（GC） \n\n\n###从托管堆分配资源\n\nCLR要求所有的对象都从托管堆分配。\n进程初始化，CLR划出一个地址空间区域作为托管堆。CLR还要维护一个指针，姑且叫NextObjPtr，该指针指向下一个对象在堆中的分配位置。刚开始的时候， NextObjPtr 设为地址空间区域的基地址。\n一个区域被非垃圾对象填满后，CLR会分配更多的区域。\n\n\n这一个过程一直重复，直至整个进程地址空间被填满。所以，应用程序内存收进程的虚拟地址空间的限制。\n\n\n32位进程最多能分配1.5GB，64位进程最多能分配8T。\n注：进程内存大小的相关资料\n\n[Memory Support and Windows Operating Systems](https://msdn.microsoft.com/zh-cn/library/windows/hardware/Dn613959(v=vs.85).aspx)\n\n[进程地址空间](https://msdn.microsoft.com/zh-cn/library/ms189334.aspx)\n\n[ 32位模式下C/C++程序可用最大内存](http://blog.csdn.net/yusiguyuan/article/details/12405799)\n\n\n\n \n###C# 的new操作符导致CLR执行以下操作：\n \n \n1、计算类型的字段（以及从基类型继承的字段）所需要的字节数。\n\n\n2、加上对象的开销所需的字节数。每个对象都有两个开销字段：类型对象指针和同步块索引。对于32位应用程序，这两个字段各需要32位，所以每个对象需要增加8字节。对于64位应用程序，这两个字段各需要64位，所以每个对象要增加16字节。\n\n\n3、CLR检查区域中是否有分配对象所需的字节数。如果托管堆有足够的可用空间，就在NetxObjPtr指针指向的地址处放入对象，为对象分配的字节会被清零。接着调用类型的构造器（为this参数传递NextObjPtr），new操作符返回对象引用。就在返回这个对象引用之前，NextObjPtr指针的值会加上这个对象占用的字节数来得到一个新值，即下个对象放入托管堆时的地址。如下图：\n\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/i3rlSCPAcnT9pL0El0BptPIBpuvnxHpBw9Nkp*UqIjw!/o/dJMAAAAAAAAA&ek=1&kp=1&pt=0&bo=LwKNAC8CjQADACU!&su=1199793361&sce=0-12-12&rf=2-9)\n\n\n\n\n\n###垃圾回收算法\n####CLR使用引用跟踪算法。\n引用跟踪算法只关心引用类型的变量，因为只有这种变量才能引用堆上面的对象；\n值类型变量直接包含值类型实例。引用类型变量可在许多场合使用，包括类的静态和实例字段，或者方法的参数和局部变量。这里我们将所有引用类型的变量都称为根。\nCLR开始GC时，首先暂停所有的线程。(这样可以防止线程在CLR检查期间访问对象并更改其状态。) 然后CLR进入GC标记阶段。在这个阶段，CLR遍历堆中的所有对象，将同步块索引字段中的一位设为0。这表明所有的对象都应删除。然后，CLR检查所有的活动根，查看他们引用了哪些对象。这正是CLR的GC被称作引用跟踪GC的原因。如果一个根包含null，CLR忽略这个根并继续检查下一个根。\n下图展示一个堆，其中包含几个对象。\n![图片1](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/eVBVeXGrNAfoWfyRgl4aC2RRSGgiDpmbrocv4lTSJMA!/o/dJIAAAAAAAAA&ek=1&kp=1&pt=0&bo=gAIFAYACBQEDACU!&su=1176931729&sce=0-12-12&rf=2-9)\n \n \n \n应用程序的根直接引用对象A 、C、D 、F。所有的对象都已经被标记。标记对象D时，GC发现这个对象含有一个引用对象H的字段，造成对象H也被标记。标记过程会持续，直至应用程序的所有根所有检查完毕。\n检查完毕后，堆中的对象要么已标记，要么未标记。已标记的对象不能被垃圾回收，因为至少有一个根在引用它。我们说这种对象是可达的，因为应用程序可以通过引用它的变量抵达它。 未标记的对象是不可达的，因为应用程序中不存在使对象能被再次访问的根。\n\n\n\n\nCLR知道哪些对象可以幸存，哪些可以被删除后，进入GC的压缩（类似于碎片整理）阶段。在压缩阶段，CLR对堆中已标记的对象进行“乾坤大挪移”，整理所有幸存下来的对象，使他们占用连续的内存。\n\n\n这样做的好处在于：\n\n\n1、所有幸存对象在内存中紧挨在一起，恢复了引用的“局部性”，减少了应用程序的工作集，从而提升了将来访问这些对象时的性能；\n\n\n2、经过整理后，可用空间也是连续的，整个地址空间区段得到了解放，允许其他东西进驻。\n\n\n\n在内存中移动了对象之后有一个问题亟待解决。引用幸存对象的根现在引用的还是对象最初在内存中的位置，而非移动后的位置。被暂停的线程恢复执行时，将访问旧的内存位置，会造成内存损坏。 这显然是不能容忍的，所以作为压缩阶段的一部分，CLR还要从每个根减去所引用对象在内存中偏移的字节数。这样就能保证每个根还是引用和之前一样的对象，只是对象在内存中变换了位置。\n如图：\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/FyP2yk1O6kMsq3.u4e4x3qrAxpwbajgSHOd4QHTJOhE!/o/dJIAAAAAAAAA&ek=1&kp=1&pt=0&bo=TQI*AU0CPwEDACU!&su=1202148209&sce=0-12-12&rf=2-9)\n\n\n\n\n\n\n\n\n##代：提升性能 (待续)\nCLR的GC是基于代的垃圾回收器，它对你的代码做出了以下几点假设：\n\n\n1、对象越新，生存周期越短。\n\n\n2、对象越老，生存周期越长。\n\n\n3、回收堆的一部分 ，速度快于回收整个堆。\n\n\n大量研究表明，这些假设对于现今大多数的应用程序都是成立的，它们影响了垃圾回收器的实现方式。这里将解释代的工作原理。\n\n托管堆在初始化时不包括对象。添加到堆的对象成为第0代对象。简单来说，第0代对象就是那些新构造的对象，垃圾回收器从未检查过它们。如下图，新启动的应用程序，分配了5个对象（从A到E）。过了一会，C和E变得不可达了。\n\n\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/77WJus7lssJpEJ2RZREQoNx.5CL31HLdboJbAgCqS0E!/o/dJMAAAAAAAAA&ek=1&kp=1&pt=0&bo=tQIVAbUCFQEDACU!&su=172682065&sce=0-12-12&rf=2-9)\n\nCLR初始化第0代对象选择一个预算容量。如果分配一个新对象造成第0代超预算，就必须启动一次GC。假设对象A到E刚好用完了第0代的空间，那么分配对象F就必须启动GC。GC之后存活的对象现场成为第1代对象。如下图：\n\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/GEDzaV4pNFNQUuDwl2EQrv*eD9Sk9OJCzx5SpRRI2fk!/o/dGUBAAAAAAAA&ek=1&kp=1&pt=0&bo=OAL5ADgC.QADACU!&su=1155276897&sce=0-12-12&rf=2-9)\n一次GC之后，第0代就不包含任何对象。和前面一样，新对象会分配到第0代。新分配对象F到对象K都到了第0代。\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/Op0QokzBTNYCFR6zzm2tpc2V7U70IsIJTeWrd0UAUb0!/o/dGUBAAAAAAAA&ek=1&kp=1&pt=0&bo=yAJeAcgCXgEDACU!&su=1124261217&sce=0-12-12&rf=2-9)\n\n之后，程序继续运行，B、H、J变得不可达，它们的内存将在某一个时刻回收。\n\n假设现在新分配对象L会造成第0代超出预算,造成必须启动垃圾回收。\n\n\n开始垃圾回收时,垃圾回收器必须决定检查哪些代。前面说过,CLR初始化时会为第0代对象选择预算.事实上,它还必须为第1代选择预算.\n\n\n开始一次垃圾回收时,垃圾回收器还会检查第一代占用了多少内存。在本例中,由于第1代占用内存远少于预算,所以垃圾回收器只检查第0代对象。回顾之前基于代的垃圾回收器做出的第一个假设：对象越新，生存期越短。 因此，第0代包含更多的垃圾的可能性更大，能回收更多的内存。由于忽略第1代中的对象，所以加快了垃圾回收速度。\n\n\n\n\n显然，忽略第1代中的对象能提升垃圾回收器的性能。但对性能有更大提振作用的是现在不必遍历托管堆中的每个对象。如果根或对象引用了老一代的某个对象，垃圾回收器就可以忽略老对象内部的所有引用，能在更短的时间内构造好可达对象图。当然，如果老对象的字段也可能引用新对象。为了确保对老对象的已更新字段进行检查，垃圾回收器利用了JIT编译器内部的一个机制。这个机制在对象的引用字段发生变化时，会设置一个对应的标志位。这样，垃圾回收器就知道自上一次垃圾回收以来，哪些老对象（如果有的话）已被写入。只有字段发生变化的老对象才需要检查是否引用了第0代中的任何新对象。\n\n\n\n基于代的垃圾回收器还假设越老的对象活得越长。也就是说，第1代对象在应用程序中有可能是继续可达的。如果垃圾回收器检查第1代的对象，很有可能找不到多少垃圾，结果是也回收不了多少内存。因此，对第1代进行垃圾回收很可能是浪费时间的。如果第一代真有垃圾，垃圾将留在那里。如下图：\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/Do.yRCBJEnaOfZaUOdxj4II9*pX2BEcX2QmIG6NQPBE!/o/dGUBAAAAAAAA&ek=1&kp=1&pt=0&bo=qAI5AagCOQEDACU!&su=187009937&sce=0-12-12&rf=2-9)\n\n程序继续运行，继续往第0代分配对象，同时程序停止对第1代某对象的使用。\n\n\n如下图：\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/YEqIM16xFsSgXdvEzgrerLnKw7fEItnrSqEzlaYnUfE!/o/dGUBAAAAAAAA&ek=1&kp=1&pt=0&bo=egJPAXoCTwEDACU!&su=1118118497&sce=0-12-12&rf=2-9)\n分配对象P导致第0代超预算，开始GC。第1代的所有对象占据内存仍小于预算，垃圾回收器再次决定只回收第0代。忽略第1代中的垃圾对象。如下图：\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/EcdSNU5AatqRERWtVdlJ7LiIPHHXe8.mklN.0hHDK9U!/o/dJQAAAAAAAAA&ek=1&kp=1&pt=0&bo=aAIxAWgCMQEDACU!&su=1214124305&sce=0-12-12&rf=2-9)\n\n\n程序继续运行，假设第一代的增长导致它的全部对象占用了全部预算。这时候应用程序分配对象P到对象S，使第0代对象达到它的预算总和。如下图：\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/6dB68RIUYrqMZ4p0VIY3REJZPg.g3ybkZFIazJ3h.CQ!/o/dJIAAAAAAAAA&ek=1&kp=1&pt=0&bo=jwIiAY8CIgEDACU!&su=177976657&sce=0-12-12&rf=2-9)\n\n\n这时候，应用程序准备分配对象T，由于第一代已满，所以必须开始GC。但这一次垃圾回收器发现第一代占用了太多内存，以至于用完了预算。由于前几次对第0代进行GC时，第1代中可能已经有很多对象变得不可达。所以这次垃圾回收器决定检查第1代和第0代中的所有对象。两代都被垃圾回收后，堆的情况如下图：\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/bxdZDsZi2Y6FSDWs7RXNPkkJK8dCzMD.cfnjwNY2Mjs!/o/dJIAAAAAAAAA&ek=1&kp=1&pt=0&bo=tgI2AbYCNgEDACU!&su=197762641&sce=0-12-12&rf=2-9)\n\n\n\n托管堆只支持三代：第0代、第1代和第2代。\n\n\nCLR初始化时，会为每一代选择预算。\n\n\n然而，CLR的垃圾回收是自调节的。\n\n\n这意味着垃圾回收器会在执行垃圾回收的过程了解程序的行为。\n\n\n例如：假设应用程序构造了许多对象，但每个对象的时间都很短。\n在这种情况下，对第0代的垃圾回收会回收到大量的内存。事实上，第0代的所有对象都可能被回收。\n\n\n\n如果垃圾回收器发现在回收第0代后存活下来的对象很少，就可能减少第0代的预算。已分配空间的减少意味着垃圾回收将更频繁地发生，但垃圾回收器每次做的事情也减少，这减少了进程的工作集。\n\n\n\n另一方面，如果垃圾回收器回收了第0代，发现还有很多对象存活，没多少内存可以被回收，就会增大第0代的预算。\n\n同样的启发性算法调整预算适用于了第1代和第2代的预算。\n\n引自：《CLR VIA C# -21章》\n\n\n[自动内存管理](https://msdn.microsoft.com/zh-cn/library/vstudio/f144e03t(v=vs.100).aspx)\n\n\n[垃圾回收的基础](https://msdn.microsoft.com/zh-cn/library/vstudio/ee787088(v=vs.100).aspx)\n\n\n[代数](https://msdn.microsoft.com/zh-cn/library/vstudio/ee787088(v=vs.100).aspx#generations )","source":"_posts/GC-1.md","raw":"---\nlayout: post\ntitle: C#.NET托管堆和垃圾回收\ncategory: GC\ndate: 2016-03-25 00:00:00\n---\n\n###托管堆基础\n 简述：每个程序都要使用这样或那样的资源，包括文件、内存缓冲区、屏幕空间、网络连接.....事实上，在面向对象的环境中，每个类型都代表可供程序使用的一种资源。要使用这些资源，必须为代表资源的类型分配内存。\n \n 以下是访问一个资源所需步骤：\n\n1. 调用IL指令newobj，为代表资源的类型分配内存。(C# new操作符)\n2. 初始化内存，设置资源的初始状态。（一般指构造函数）\n3. 访问类型的成员来使用资源。（使用成员变量、方法、属性等）\n4. 摧毁资源的状态以进行清除。（Dispose？？？）\n5. 释放内存。（GC） \n\n\n###从托管堆分配资源\n\nCLR要求所有的对象都从托管堆分配。\n进程初始化，CLR划出一个地址空间区域作为托管堆。CLR还要维护一个指针，姑且叫NextObjPtr，该指针指向下一个对象在堆中的分配位置。刚开始的时候， NextObjPtr 设为地址空间区域的基地址。\n一个区域被非垃圾对象填满后，CLR会分配更多的区域。\n\n\n这一个过程一直重复，直至整个进程地址空间被填满。所以，应用程序内存收进程的虚拟地址空间的限制。\n\n\n32位进程最多能分配1.5GB，64位进程最多能分配8T。\n注：进程内存大小的相关资料\n\n[Memory Support and Windows Operating Systems](https://msdn.microsoft.com/zh-cn/library/windows/hardware/Dn613959(v=vs.85).aspx)\n\n[进程地址空间](https://msdn.microsoft.com/zh-cn/library/ms189334.aspx)\n\n[ 32位模式下C/C++程序可用最大内存](http://blog.csdn.net/yusiguyuan/article/details/12405799)\n\n\n\n \n###C# 的new操作符导致CLR执行以下操作：\n \n \n1、计算类型的字段（以及从基类型继承的字段）所需要的字节数。\n\n\n2、加上对象的开销所需的字节数。每个对象都有两个开销字段：类型对象指针和同步块索引。对于32位应用程序，这两个字段各需要32位，所以每个对象需要增加8字节。对于64位应用程序，这两个字段各需要64位，所以每个对象要增加16字节。\n\n\n3、CLR检查区域中是否有分配对象所需的字节数。如果托管堆有足够的可用空间，就在NetxObjPtr指针指向的地址处放入对象，为对象分配的字节会被清零。接着调用类型的构造器（为this参数传递NextObjPtr），new操作符返回对象引用。就在返回这个对象引用之前，NextObjPtr指针的值会加上这个对象占用的字节数来得到一个新值，即下个对象放入托管堆时的地址。如下图：\n\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/i3rlSCPAcnT9pL0El0BptPIBpuvnxHpBw9Nkp*UqIjw!/o/dJMAAAAAAAAA&ek=1&kp=1&pt=0&bo=LwKNAC8CjQADACU!&su=1199793361&sce=0-12-12&rf=2-9)\n\n\n\n\n\n###垃圾回收算法\n####CLR使用引用跟踪算法。\n引用跟踪算法只关心引用类型的变量，因为只有这种变量才能引用堆上面的对象；\n值类型变量直接包含值类型实例。引用类型变量可在许多场合使用，包括类的静态和实例字段，或者方法的参数和局部变量。这里我们将所有引用类型的变量都称为根。\nCLR开始GC时，首先暂停所有的线程。(这样可以防止线程在CLR检查期间访问对象并更改其状态。) 然后CLR进入GC标记阶段。在这个阶段，CLR遍历堆中的所有对象，将同步块索引字段中的一位设为0。这表明所有的对象都应删除。然后，CLR检查所有的活动根，查看他们引用了哪些对象。这正是CLR的GC被称作引用跟踪GC的原因。如果一个根包含null，CLR忽略这个根并继续检查下一个根。\n下图展示一个堆，其中包含几个对象。\n![图片1](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/eVBVeXGrNAfoWfyRgl4aC2RRSGgiDpmbrocv4lTSJMA!/o/dJIAAAAAAAAA&ek=1&kp=1&pt=0&bo=gAIFAYACBQEDACU!&su=1176931729&sce=0-12-12&rf=2-9)\n \n \n \n应用程序的根直接引用对象A 、C、D 、F。所有的对象都已经被标记。标记对象D时，GC发现这个对象含有一个引用对象H的字段，造成对象H也被标记。标记过程会持续，直至应用程序的所有根所有检查完毕。\n检查完毕后，堆中的对象要么已标记，要么未标记。已标记的对象不能被垃圾回收，因为至少有一个根在引用它。我们说这种对象是可达的，因为应用程序可以通过引用它的变量抵达它。 未标记的对象是不可达的，因为应用程序中不存在使对象能被再次访问的根。\n\n\n\n\nCLR知道哪些对象可以幸存，哪些可以被删除后，进入GC的压缩（类似于碎片整理）阶段。在压缩阶段，CLR对堆中已标记的对象进行“乾坤大挪移”，整理所有幸存下来的对象，使他们占用连续的内存。\n\n\n这样做的好处在于：\n\n\n1、所有幸存对象在内存中紧挨在一起，恢复了引用的“局部性”，减少了应用程序的工作集，从而提升了将来访问这些对象时的性能；\n\n\n2、经过整理后，可用空间也是连续的，整个地址空间区段得到了解放，允许其他东西进驻。\n\n\n\n在内存中移动了对象之后有一个问题亟待解决。引用幸存对象的根现在引用的还是对象最初在内存中的位置，而非移动后的位置。被暂停的线程恢复执行时，将访问旧的内存位置，会造成内存损坏。 这显然是不能容忍的，所以作为压缩阶段的一部分，CLR还要从每个根减去所引用对象在内存中偏移的字节数。这样就能保证每个根还是引用和之前一样的对象，只是对象在内存中变换了位置。\n如图：\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/FyP2yk1O6kMsq3.u4e4x3qrAxpwbajgSHOd4QHTJOhE!/o/dJIAAAAAAAAA&ek=1&kp=1&pt=0&bo=TQI*AU0CPwEDACU!&su=1202148209&sce=0-12-12&rf=2-9)\n\n\n\n\n\n\n\n\n##代：提升性能 (待续)\nCLR的GC是基于代的垃圾回收器，它对你的代码做出了以下几点假设：\n\n\n1、对象越新，生存周期越短。\n\n\n2、对象越老，生存周期越长。\n\n\n3、回收堆的一部分 ，速度快于回收整个堆。\n\n\n大量研究表明，这些假设对于现今大多数的应用程序都是成立的，它们影响了垃圾回收器的实现方式。这里将解释代的工作原理。\n\n托管堆在初始化时不包括对象。添加到堆的对象成为第0代对象。简单来说，第0代对象就是那些新构造的对象，垃圾回收器从未检查过它们。如下图，新启动的应用程序，分配了5个对象（从A到E）。过了一会，C和E变得不可达了。\n\n\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/77WJus7lssJpEJ2RZREQoNx.5CL31HLdboJbAgCqS0E!/o/dJMAAAAAAAAA&ek=1&kp=1&pt=0&bo=tQIVAbUCFQEDACU!&su=172682065&sce=0-12-12&rf=2-9)\n\nCLR初始化第0代对象选择一个预算容量。如果分配一个新对象造成第0代超预算，就必须启动一次GC。假设对象A到E刚好用完了第0代的空间，那么分配对象F就必须启动GC。GC之后存活的对象现场成为第1代对象。如下图：\n\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/GEDzaV4pNFNQUuDwl2EQrv*eD9Sk9OJCzx5SpRRI2fk!/o/dGUBAAAAAAAA&ek=1&kp=1&pt=0&bo=OAL5ADgC.QADACU!&su=1155276897&sce=0-12-12&rf=2-9)\n一次GC之后，第0代就不包含任何对象。和前面一样，新对象会分配到第0代。新分配对象F到对象K都到了第0代。\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/Op0QokzBTNYCFR6zzm2tpc2V7U70IsIJTeWrd0UAUb0!/o/dGUBAAAAAAAA&ek=1&kp=1&pt=0&bo=yAJeAcgCXgEDACU!&su=1124261217&sce=0-12-12&rf=2-9)\n\n之后，程序继续运行，B、H、J变得不可达，它们的内存将在某一个时刻回收。\n\n假设现在新分配对象L会造成第0代超出预算,造成必须启动垃圾回收。\n\n\n开始垃圾回收时,垃圾回收器必须决定检查哪些代。前面说过,CLR初始化时会为第0代对象选择预算.事实上,它还必须为第1代选择预算.\n\n\n开始一次垃圾回收时,垃圾回收器还会检查第一代占用了多少内存。在本例中,由于第1代占用内存远少于预算,所以垃圾回收器只检查第0代对象。回顾之前基于代的垃圾回收器做出的第一个假设：对象越新，生存期越短。 因此，第0代包含更多的垃圾的可能性更大，能回收更多的内存。由于忽略第1代中的对象，所以加快了垃圾回收速度。\n\n\n\n\n显然，忽略第1代中的对象能提升垃圾回收器的性能。但对性能有更大提振作用的是现在不必遍历托管堆中的每个对象。如果根或对象引用了老一代的某个对象，垃圾回收器就可以忽略老对象内部的所有引用，能在更短的时间内构造好可达对象图。当然，如果老对象的字段也可能引用新对象。为了确保对老对象的已更新字段进行检查，垃圾回收器利用了JIT编译器内部的一个机制。这个机制在对象的引用字段发生变化时，会设置一个对应的标志位。这样，垃圾回收器就知道自上一次垃圾回收以来，哪些老对象（如果有的话）已被写入。只有字段发生变化的老对象才需要检查是否引用了第0代中的任何新对象。\n\n\n\n基于代的垃圾回收器还假设越老的对象活得越长。也就是说，第1代对象在应用程序中有可能是继续可达的。如果垃圾回收器检查第1代的对象，很有可能找不到多少垃圾，结果是也回收不了多少内存。因此，对第1代进行垃圾回收很可能是浪费时间的。如果第一代真有垃圾，垃圾将留在那里。如下图：\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/Do.yRCBJEnaOfZaUOdxj4II9*pX2BEcX2QmIG6NQPBE!/o/dGUBAAAAAAAA&ek=1&kp=1&pt=0&bo=qAI5AagCOQEDACU!&su=187009937&sce=0-12-12&rf=2-9)\n\n程序继续运行，继续往第0代分配对象，同时程序停止对第1代某对象的使用。\n\n\n如下图：\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/YEqIM16xFsSgXdvEzgrerLnKw7fEItnrSqEzlaYnUfE!/o/dGUBAAAAAAAA&ek=1&kp=1&pt=0&bo=egJPAXoCTwEDACU!&su=1118118497&sce=0-12-12&rf=2-9)\n分配对象P导致第0代超预算，开始GC。第1代的所有对象占据内存仍小于预算，垃圾回收器再次决定只回收第0代。忽略第1代中的垃圾对象。如下图：\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/EcdSNU5AatqRERWtVdlJ7LiIPHHXe8.mklN.0hHDK9U!/o/dJQAAAAAAAAA&ek=1&kp=1&pt=0&bo=aAIxAWgCMQEDACU!&su=1214124305&sce=0-12-12&rf=2-9)\n\n\n程序继续运行，假设第一代的增长导致它的全部对象占用了全部预算。这时候应用程序分配对象P到对象S，使第0代对象达到它的预算总和。如下图：\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/6dB68RIUYrqMZ4p0VIY3REJZPg.g3ybkZFIazJ3h.CQ!/o/dJIAAAAAAAAA&ek=1&kp=1&pt=0&bo=jwIiAY8CIgEDACU!&su=177976657&sce=0-12-12&rf=2-9)\n\n\n这时候，应用程序准备分配对象T，由于第一代已满，所以必须开始GC。但这一次垃圾回收器发现第一代占用了太多内存，以至于用完了预算。由于前几次对第0代进行GC时，第1代中可能已经有很多对象变得不可达。所以这次垃圾回收器决定检查第1代和第0代中的所有对象。两代都被垃圾回收后，堆的情况如下图：\n![](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/bxdZDsZi2Y6FSDWs7RXNPkkJK8dCzMD.cfnjwNY2Mjs!/o/dJIAAAAAAAAA&ek=1&kp=1&pt=0&bo=tgI2AbYCNgEDACU!&su=197762641&sce=0-12-12&rf=2-9)\n\n\n\n托管堆只支持三代：第0代、第1代和第2代。\n\n\nCLR初始化时，会为每一代选择预算。\n\n\n然而，CLR的垃圾回收是自调节的。\n\n\n这意味着垃圾回收器会在执行垃圾回收的过程了解程序的行为。\n\n\n例如：假设应用程序构造了许多对象，但每个对象的时间都很短。\n在这种情况下，对第0代的垃圾回收会回收到大量的内存。事实上，第0代的所有对象都可能被回收。\n\n\n\n如果垃圾回收器发现在回收第0代后存活下来的对象很少，就可能减少第0代的预算。已分配空间的减少意味着垃圾回收将更频繁地发生，但垃圾回收器每次做的事情也减少，这减少了进程的工作集。\n\n\n\n另一方面，如果垃圾回收器回收了第0代，发现还有很多对象存活，没多少内存可以被回收，就会增大第0代的预算。\n\n同样的启发性算法调整预算适用于了第1代和第2代的预算。\n\n引自：《CLR VIA C# -21章》\n\n\n[自动内存管理](https://msdn.microsoft.com/zh-cn/library/vstudio/f144e03t(v=vs.100).aspx)\n\n\n[垃圾回收的基础](https://msdn.microsoft.com/zh-cn/library/vstudio/ee787088(v=vs.100).aspx)\n\n\n[代数](https://msdn.microsoft.com/zh-cn/library/vstudio/ee787088(v=vs.100).aspx#generations )","slug":"GC-1","published":1,"updated":"2016-10-15T05:20:24.657Z","comments":1,"photos":[],"link":"","_id":"cj0dyumvz000g6kunk897t59o","content":"<p>###托管堆基础<br> 简述：每个程序都要使用这样或那样的资源，包括文件、内存缓冲区、屏幕空间、网络连接…..事实上，在面向对象的环境中，每个类型都代表可供程序使用的一种资源。要使用这些资源，必须为代表资源的类型分配内存。</p>\n<p> 以下是访问一个资源所需步骤：</p>\n<ol>\n<li>调用IL指令newobj，为代表资源的类型分配内存。(C# new操作符)</li>\n<li>初始化内存，设置资源的初始状态。（一般指构造函数）</li>\n<li>访问类型的成员来使用资源。（使用成员变量、方法、属性等）</li>\n<li>摧毁资源的状态以进行清除。（Dispose？？？）</li>\n<li>释放内存。（GC） </li>\n</ol>\n<p>###从托管堆分配资源</p>\n<p>CLR要求所有的对象都从托管堆分配。<br>进程初始化，CLR划出一个地址空间区域作为托管堆。CLR还要维护一个指针，姑且叫NextObjPtr，该指针指向下一个对象在堆中的分配位置。刚开始的时候， NextObjPtr 设为地址空间区域的基地址。<br>一个区域被非垃圾对象填满后，CLR会分配更多的区域。</p>\n<p>这一个过程一直重复，直至整个进程地址空间被填满。所以，应用程序内存收进程的虚拟地址空间的限制。</p>\n<p>32位进程最多能分配1.5GB，64位进程最多能分配8T。<br>注：进程内存大小的相关资料</p>\n<p><a href=\"https://msdn.microsoft.com/zh-cn/library/windows/hardware/Dn613959(v=vs.85\" target=\"_blank\" rel=\"external\">Memory Support and Windows Operating Systems</a>.aspx)</p>\n<p><a href=\"https://msdn.microsoft.com/zh-cn/library/ms189334.aspx\" target=\"_blank\" rel=\"external\">进程地址空间</a></p>\n<p><a href=\"http://blog.csdn.net/yusiguyuan/article/details/12405799\" target=\"_blank\" rel=\"external\"> 32位模式下C/C++程序可用最大内存</a></p>\n<p>###C# 的new操作符导致CLR执行以下操作：</p>\n<p>1、计算类型的字段（以及从基类型继承的字段）所需要的字节数。</p>\n<p>2、加上对象的开销所需的字节数。每个对象都有两个开销字段：类型对象指针和同步块索引。对于32位应用程序，这两个字段各需要32位，所以每个对象需要增加8字节。对于64位应用程序，这两个字段各需要64位，所以每个对象要增加16字节。</p>\n<p>3、CLR检查区域中是否有分配对象所需的字节数。如果托管堆有足够的可用空间，就在NetxObjPtr指针指向的地址处放入对象，为对象分配的字节会被清零。接着调用类型的构造器（为this参数传递NextObjPtr），new操作符返回对象引用。就在返回这个对象引用之前，NextObjPtr指针的值会加上这个对象占用的字节数来得到一个新值，即下个对象放入托管堆时的地址。如下图：</p>\n<p><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/i3rlSCPAcnT9pL0El0BptPIBpuvnxHpBw9Nkp*UqIjw!/o/dJMAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=LwKNAC8CjQADACU!&amp;su=1199793361&amp;sce=0-12-12&amp;rf=2-9\" alt=\"\"></p>\n<p>###垃圾回收算法</p>\n<p>####CLR使用引用跟踪算法。<br>引用跟踪算法只关心引用类型的变量，因为只有这种变量才能引用堆上面的对象；<br>值类型变量直接包含值类型实例。引用类型变量可在许多场合使用，包括类的静态和实例字段，或者方法的参数和局部变量。这里我们将所有引用类型的变量都称为根。<br>CLR开始GC时，首先暂停所有的线程。(这样可以防止线程在CLR检查期间访问对象并更改其状态。) 然后CLR进入GC标记阶段。在这个阶段，CLR遍历堆中的所有对象，将同步块索引字段中的一位设为0。这表明所有的对象都应删除。然后，CLR检查所有的活动根，查看他们引用了哪些对象。这正是CLR的GC被称作引用跟踪GC的原因。如果一个根包含null，CLR忽略这个根并继续检查下一个根。<br>下图展示一个堆，其中包含几个对象。<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/eVBVeXGrNAfoWfyRgl4aC2RRSGgiDpmbrocv4lTSJMA!/o/dJIAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=gAIFAYACBQEDACU!&amp;su=1176931729&amp;sce=0-12-12&amp;rf=2-9\" alt=\"图片1\"></p>\n<p>应用程序的根直接引用对象A 、C、D 、F。所有的对象都已经被标记。标记对象D时，GC发现这个对象含有一个引用对象H的字段，造成对象H也被标记。标记过程会持续，直至应用程序的所有根所有检查完毕。<br>检查完毕后，堆中的对象要么已标记，要么未标记。已标记的对象不能被垃圾回收，因为至少有一个根在引用它。我们说这种对象是可达的，因为应用程序可以通过引用它的变量抵达它。 未标记的对象是不可达的，因为应用程序中不存在使对象能被再次访问的根。</p>\n<p>CLR知道哪些对象可以幸存，哪些可以被删除后，进入GC的压缩（类似于碎片整理）阶段。在压缩阶段，CLR对堆中已标记的对象进行“乾坤大挪移”，整理所有幸存下来的对象，使他们占用连续的内存。</p>\n<p>这样做的好处在于：</p>\n<p>1、所有幸存对象在内存中紧挨在一起，恢复了引用的“局部性”，减少了应用程序的工作集，从而提升了将来访问这些对象时的性能；</p>\n<p>2、经过整理后，可用空间也是连续的，整个地址空间区段得到了解放，允许其他东西进驻。</p>\n<p>在内存中移动了对象之后有一个问题亟待解决。引用幸存对象的根现在引用的还是对象最初在内存中的位置，而非移动后的位置。被暂停的线程恢复执行时，将访问旧的内存位置，会造成内存损坏。 这显然是不能容忍的，所以作为压缩阶段的一部分，CLR还要从每个根减去所引用对象在内存中偏移的字节数。这样就能保证每个根还是引用和之前一样的对象，只是对象在内存中变换了位置。<br>如图：<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/FyP2yk1O6kMsq3.u4e4x3qrAxpwbajgSHOd4QHTJOhE!/o/dJIAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=TQI*AU0CPwEDACU!&amp;su=1202148209&amp;sce=0-12-12&amp;rf=2-9\" alt=\"\"></p>\n<p>##代：提升性能 (待续)<br>CLR的GC是基于代的垃圾回收器，它对你的代码做出了以下几点假设：</p>\n<p>1、对象越新，生存周期越短。</p>\n<p>2、对象越老，生存周期越长。</p>\n<p>3、回收堆的一部分 ，速度快于回收整个堆。</p>\n<p>大量研究表明，这些假设对于现今大多数的应用程序都是成立的，它们影响了垃圾回收器的实现方式。这里将解释代的工作原理。</p>\n<p>托管堆在初始化时不包括对象。添加到堆的对象成为第0代对象。简单来说，第0代对象就是那些新构造的对象，垃圾回收器从未检查过它们。如下图，新启动的应用程序，分配了5个对象（从A到E）。过了一会，C和E变得不可达了。</p>\n<p><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/77WJus7lssJpEJ2RZREQoNx.5CL31HLdboJbAgCqS0E!/o/dJMAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=tQIVAbUCFQEDACU!&amp;su=172682065&amp;sce=0-12-12&amp;rf=2-9\" alt=\"\"></p>\n<p>CLR初始化第0代对象选择一个预算容量。如果分配一个新对象造成第0代超预算，就必须启动一次GC。假设对象A到E刚好用完了第0代的空间，那么分配对象F就必须启动GC。GC之后存活的对象现场成为第1代对象。如下图：</p>\n<p><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/GEDzaV4pNFNQUuDwl2EQrv*eD9Sk9OJCzx5SpRRI2fk!/o/dGUBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=OAL5ADgC.QADACU!&amp;su=1155276897&amp;sce=0-12-12&amp;rf=2-9\" alt=\"\"><br>一次GC之后，第0代就不包含任何对象。和前面一样，新对象会分配到第0代。新分配对象F到对象K都到了第0代。<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/Op0QokzBTNYCFR6zzm2tpc2V7U70IsIJTeWrd0UAUb0!/o/dGUBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=yAJeAcgCXgEDACU!&amp;su=1124261217&amp;sce=0-12-12&amp;rf=2-9\" alt=\"\"></p>\n<p>之后，程序继续运行，B、H、J变得不可达，它们的内存将在某一个时刻回收。</p>\n<p>假设现在新分配对象L会造成第0代超出预算,造成必须启动垃圾回收。</p>\n<p>开始垃圾回收时,垃圾回收器必须决定检查哪些代。前面说过,CLR初始化时会为第0代对象选择预算.事实上,它还必须为第1代选择预算.</p>\n<p>开始一次垃圾回收时,垃圾回收器还会检查第一代占用了多少内存。在本例中,由于第1代占用内存远少于预算,所以垃圾回收器只检查第0代对象。回顾之前基于代的垃圾回收器做出的第一个假设：对象越新，生存期越短。 因此，第0代包含更多的垃圾的可能性更大，能回收更多的内存。由于忽略第1代中的对象，所以加快了垃圾回收速度。</p>\n<p>显然，忽略第1代中的对象能提升垃圾回收器的性能。但对性能有更大提振作用的是现在不必遍历托管堆中的每个对象。如果根或对象引用了老一代的某个对象，垃圾回收器就可以忽略老对象内部的所有引用，能在更短的时间内构造好可达对象图。当然，如果老对象的字段也可能引用新对象。为了确保对老对象的已更新字段进行检查，垃圾回收器利用了JIT编译器内部的一个机制。这个机制在对象的引用字段发生变化时，会设置一个对应的标志位。这样，垃圾回收器就知道自上一次垃圾回收以来，哪些老对象（如果有的话）已被写入。只有字段发生变化的老对象才需要检查是否引用了第0代中的任何新对象。</p>\n<p>基于代的垃圾回收器还假设越老的对象活得越长。也就是说，第1代对象在应用程序中有可能是继续可达的。如果垃圾回收器检查第1代的对象，很有可能找不到多少垃圾，结果是也回收不了多少内存。因此，对第1代进行垃圾回收很可能是浪费时间的。如果第一代真有垃圾，垃圾将留在那里。如下图：<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/Do.yRCBJEnaOfZaUOdxj4II9*pX2BEcX2QmIG6NQPBE!/o/dGUBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=qAI5AagCOQEDACU!&amp;su=187009937&amp;sce=0-12-12&amp;rf=2-9\" alt=\"\"></p>\n<p>程序继续运行，继续往第0代分配对象，同时程序停止对第1代某对象的使用。</p>\n<p>如下图：<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/YEqIM16xFsSgXdvEzgrerLnKw7fEItnrSqEzlaYnUfE!/o/dGUBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=egJPAXoCTwEDACU!&amp;su=1118118497&amp;sce=0-12-12&amp;rf=2-9\" alt=\"\"><br>分配对象P导致第0代超预算，开始GC。第1代的所有对象占据内存仍小于预算，垃圾回收器再次决定只回收第0代。忽略第1代中的垃圾对象。如下图：<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/EcdSNU5AatqRERWtVdlJ7LiIPHHXe8.mklN.0hHDK9U!/o/dJQAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=aAIxAWgCMQEDACU!&amp;su=1214124305&amp;sce=0-12-12&amp;rf=2-9\" alt=\"\"></p>\n<p>程序继续运行，假设第一代的增长导致它的全部对象占用了全部预算。这时候应用程序分配对象P到对象S，使第0代对象达到它的预算总和。如下图：<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/6dB68RIUYrqMZ4p0VIY3REJZPg.g3ybkZFIazJ3h.CQ!/o/dJIAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=jwIiAY8CIgEDACU!&amp;su=177976657&amp;sce=0-12-12&amp;rf=2-9\" alt=\"\"></p>\n<p>这时候，应用程序准备分配对象T，由于第一代已满，所以必须开始GC。但这一次垃圾回收器发现第一代占用了太多内存，以至于用完了预算。由于前几次对第0代进行GC时，第1代中可能已经有很多对象变得不可达。所以这次垃圾回收器决定检查第1代和第0代中的所有对象。两代都被垃圾回收后，堆的情况如下图：<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/bxdZDsZi2Y6FSDWs7RXNPkkJK8dCzMD.cfnjwNY2Mjs!/o/dJIAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=tgI2AbYCNgEDACU!&amp;su=197762641&amp;sce=0-12-12&amp;rf=2-9\" alt=\"\"></p>\n<p>托管堆只支持三代：第0代、第1代和第2代。</p>\n<p>CLR初始化时，会为每一代选择预算。</p>\n<p>然而，CLR的垃圾回收是自调节的。</p>\n<p>这意味着垃圾回收器会在执行垃圾回收的过程了解程序的行为。</p>\n<p>例如：假设应用程序构造了许多对象，但每个对象的时间都很短。<br>在这种情况下，对第0代的垃圾回收会回收到大量的内存。事实上，第0代的所有对象都可能被回收。</p>\n<p>如果垃圾回收器发现在回收第0代后存活下来的对象很少，就可能减少第0代的预算。已分配空间的减少意味着垃圾回收将更频繁地发生，但垃圾回收器每次做的事情也减少，这减少了进程的工作集。</p>\n<p>另一方面，如果垃圾回收器回收了第0代，发现还有很多对象存活，没多少内存可以被回收，就会增大第0代的预算。</p>\n<p>同样的启发性算法调整预算适用于了第1代和第2代的预算。</p>\n<p>引自：《CLR VIA C# -21章》</p>\n<p><a href=\"https://msdn.microsoft.com/zh-cn/library/vstudio/f144e03t(v=vs.100\" target=\"_blank\" rel=\"external\">自动内存管理</a>.aspx)</p>\n<p><a href=\"https://msdn.microsoft.com/zh-cn/library/vstudio/ee787088(v=vs.100\" target=\"_blank\" rel=\"external\">垃圾回收的基础</a>.aspx)</p>\n<p><a href=\"https://msdn.microsoft.com/zh-cn/library/vstudio/ee787088(v=vs.100\" target=\"_blank\" rel=\"external\">代数</a>.aspx#generations )</p>\n","excerpt":"","more":"<p>###托管堆基础<br> 简述：每个程序都要使用这样或那样的资源，包括文件、内存缓冲区、屏幕空间、网络连接…..事实上，在面向对象的环境中，每个类型都代表可供程序使用的一种资源。要使用这些资源，必须为代表资源的类型分配内存。</p>\n<p> 以下是访问一个资源所需步骤：</p>\n<ol>\n<li>调用IL指令newobj，为代表资源的类型分配内存。(C# new操作符)</li>\n<li>初始化内存，设置资源的初始状态。（一般指构造函数）</li>\n<li>访问类型的成员来使用资源。（使用成员变量、方法、属性等）</li>\n<li>摧毁资源的状态以进行清除。（Dispose？？？）</li>\n<li>释放内存。（GC） </li>\n</ol>\n<p>###从托管堆分配资源</p>\n<p>CLR要求所有的对象都从托管堆分配。<br>进程初始化，CLR划出一个地址空间区域作为托管堆。CLR还要维护一个指针，姑且叫NextObjPtr，该指针指向下一个对象在堆中的分配位置。刚开始的时候， NextObjPtr 设为地址空间区域的基地址。<br>一个区域被非垃圾对象填满后，CLR会分配更多的区域。</p>\n<p>这一个过程一直重复，直至整个进程地址空间被填满。所以，应用程序内存收进程的虚拟地址空间的限制。</p>\n<p>32位进程最多能分配1.5GB，64位进程最多能分配8T。<br>注：进程内存大小的相关资料</p>\n<p><a href=\"https://msdn.microsoft.com/zh-cn/library/windows/hardware/Dn613959(v=vs.85\">Memory Support and Windows Operating Systems</a>.aspx)</p>\n<p><a href=\"https://msdn.microsoft.com/zh-cn/library/ms189334.aspx\">进程地址空间</a></p>\n<p><a href=\"http://blog.csdn.net/yusiguyuan/article/details/12405799\"> 32位模式下C/C++程序可用最大内存</a></p>\n<p>###C# 的new操作符导致CLR执行以下操作：</p>\n<p>1、计算类型的字段（以及从基类型继承的字段）所需要的字节数。</p>\n<p>2、加上对象的开销所需的字节数。每个对象都有两个开销字段：类型对象指针和同步块索引。对于32位应用程序，这两个字段各需要32位，所以每个对象需要增加8字节。对于64位应用程序，这两个字段各需要64位，所以每个对象要增加16字节。</p>\n<p>3、CLR检查区域中是否有分配对象所需的字节数。如果托管堆有足够的可用空间，就在NetxObjPtr指针指向的地址处放入对象，为对象分配的字节会被清零。接着调用类型的构造器（为this参数传递NextObjPtr），new操作符返回对象引用。就在返回这个对象引用之前，NextObjPtr指针的值会加上这个对象占用的字节数来得到一个新值，即下个对象放入托管堆时的地址。如下图：</p>\n<p><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/i3rlSCPAcnT9pL0El0BptPIBpuvnxHpBw9Nkp*UqIjw!/o/dJMAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=LwKNAC8CjQADACU!&amp;su=1199793361&amp;sce=0-12-12&amp;rf=2-9\" alt=\"\"></p>\n<p>###垃圾回收算法</p>\n<p>####CLR使用引用跟踪算法。<br>引用跟踪算法只关心引用类型的变量，因为只有这种变量才能引用堆上面的对象；<br>值类型变量直接包含值类型实例。引用类型变量可在许多场合使用，包括类的静态和实例字段，或者方法的参数和局部变量。这里我们将所有引用类型的变量都称为根。<br>CLR开始GC时，首先暂停所有的线程。(这样可以防止线程在CLR检查期间访问对象并更改其状态。) 然后CLR进入GC标记阶段。在这个阶段，CLR遍历堆中的所有对象，将同步块索引字段中的一位设为0。这表明所有的对象都应删除。然后，CLR检查所有的活动根，查看他们引用了哪些对象。这正是CLR的GC被称作引用跟踪GC的原因。如果一个根包含null，CLR忽略这个根并继续检查下一个根。<br>下图展示一个堆，其中包含几个对象。<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/eVBVeXGrNAfoWfyRgl4aC2RRSGgiDpmbrocv4lTSJMA!/o/dJIAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=gAIFAYACBQEDACU!&amp;su=1176931729&amp;sce=0-12-12&amp;rf=2-9\" alt=\"图片1\"></p>\n<p>应用程序的根直接引用对象A 、C、D 、F。所有的对象都已经被标记。标记对象D时，GC发现这个对象含有一个引用对象H的字段，造成对象H也被标记。标记过程会持续，直至应用程序的所有根所有检查完毕。<br>检查完毕后，堆中的对象要么已标记，要么未标记。已标记的对象不能被垃圾回收，因为至少有一个根在引用它。我们说这种对象是可达的，因为应用程序可以通过引用它的变量抵达它。 未标记的对象是不可达的，因为应用程序中不存在使对象能被再次访问的根。</p>\n<p>CLR知道哪些对象可以幸存，哪些可以被删除后，进入GC的压缩（类似于碎片整理）阶段。在压缩阶段，CLR对堆中已标记的对象进行“乾坤大挪移”，整理所有幸存下来的对象，使他们占用连续的内存。</p>\n<p>这样做的好处在于：</p>\n<p>1、所有幸存对象在内存中紧挨在一起，恢复了引用的“局部性”，减少了应用程序的工作集，从而提升了将来访问这些对象时的性能；</p>\n<p>2、经过整理后，可用空间也是连续的，整个地址空间区段得到了解放，允许其他东西进驻。</p>\n<p>在内存中移动了对象之后有一个问题亟待解决。引用幸存对象的根现在引用的还是对象最初在内存中的位置，而非移动后的位置。被暂停的线程恢复执行时，将访问旧的内存位置，会造成内存损坏。 这显然是不能容忍的，所以作为压缩阶段的一部分，CLR还要从每个根减去所引用对象在内存中偏移的字节数。这样就能保证每个根还是引用和之前一样的对象，只是对象在内存中变换了位置。<br>如图：<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/FyP2yk1O6kMsq3.u4e4x3qrAxpwbajgSHOd4QHTJOhE!/o/dJIAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=TQI*AU0CPwEDACU!&amp;su=1202148209&amp;sce=0-12-12&amp;rf=2-9\" alt=\"\"></p>\n<p>##代：提升性能 (待续)<br>CLR的GC是基于代的垃圾回收器，它对你的代码做出了以下几点假设：</p>\n<p>1、对象越新，生存周期越短。</p>\n<p>2、对象越老，生存周期越长。</p>\n<p>3、回收堆的一部分 ，速度快于回收整个堆。</p>\n<p>大量研究表明，这些假设对于现今大多数的应用程序都是成立的，它们影响了垃圾回收器的实现方式。这里将解释代的工作原理。</p>\n<p>托管堆在初始化时不包括对象。添加到堆的对象成为第0代对象。简单来说，第0代对象就是那些新构造的对象，垃圾回收器从未检查过它们。如下图，新启动的应用程序，分配了5个对象（从A到E）。过了一会，C和E变得不可达了。</p>\n<p><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/77WJus7lssJpEJ2RZREQoNx.5CL31HLdboJbAgCqS0E!/o/dJMAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=tQIVAbUCFQEDACU!&amp;su=172682065&amp;sce=0-12-12&amp;rf=2-9\" alt=\"\"></p>\n<p>CLR初始化第0代对象选择一个预算容量。如果分配一个新对象造成第0代超预算，就必须启动一次GC。假设对象A到E刚好用完了第0代的空间，那么分配对象F就必须启动GC。GC之后存活的对象现场成为第1代对象。如下图：</p>\n<p><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/GEDzaV4pNFNQUuDwl2EQrv*eD9Sk9OJCzx5SpRRI2fk!/o/dGUBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=OAL5ADgC.QADACU!&amp;su=1155276897&amp;sce=0-12-12&amp;rf=2-9\" alt=\"\"><br>一次GC之后，第0代就不包含任何对象。和前面一样，新对象会分配到第0代。新分配对象F到对象K都到了第0代。<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/Op0QokzBTNYCFR6zzm2tpc2V7U70IsIJTeWrd0UAUb0!/o/dGUBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=yAJeAcgCXgEDACU!&amp;su=1124261217&amp;sce=0-12-12&amp;rf=2-9\" alt=\"\"></p>\n<p>之后，程序继续运行，B、H、J变得不可达，它们的内存将在某一个时刻回收。</p>\n<p>假设现在新分配对象L会造成第0代超出预算,造成必须启动垃圾回收。</p>\n<p>开始垃圾回收时,垃圾回收器必须决定检查哪些代。前面说过,CLR初始化时会为第0代对象选择预算.事实上,它还必须为第1代选择预算.</p>\n<p>开始一次垃圾回收时,垃圾回收器还会检查第一代占用了多少内存。在本例中,由于第1代占用内存远少于预算,所以垃圾回收器只检查第0代对象。回顾之前基于代的垃圾回收器做出的第一个假设：对象越新，生存期越短。 因此，第0代包含更多的垃圾的可能性更大，能回收更多的内存。由于忽略第1代中的对象，所以加快了垃圾回收速度。</p>\n<p>显然，忽略第1代中的对象能提升垃圾回收器的性能。但对性能有更大提振作用的是现在不必遍历托管堆中的每个对象。如果根或对象引用了老一代的某个对象，垃圾回收器就可以忽略老对象内部的所有引用，能在更短的时间内构造好可达对象图。当然，如果老对象的字段也可能引用新对象。为了确保对老对象的已更新字段进行检查，垃圾回收器利用了JIT编译器内部的一个机制。这个机制在对象的引用字段发生变化时，会设置一个对应的标志位。这样，垃圾回收器就知道自上一次垃圾回收以来，哪些老对象（如果有的话）已被写入。只有字段发生变化的老对象才需要检查是否引用了第0代中的任何新对象。</p>\n<p>基于代的垃圾回收器还假设越老的对象活得越长。也就是说，第1代对象在应用程序中有可能是继续可达的。如果垃圾回收器检查第1代的对象，很有可能找不到多少垃圾，结果是也回收不了多少内存。因此，对第1代进行垃圾回收很可能是浪费时间的。如果第一代真有垃圾，垃圾将留在那里。如下图：<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/Do.yRCBJEnaOfZaUOdxj4II9*pX2BEcX2QmIG6NQPBE!/o/dGUBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=qAI5AagCOQEDACU!&amp;su=187009937&amp;sce=0-12-12&amp;rf=2-9\" alt=\"\"></p>\n<p>程序继续运行，继续往第0代分配对象，同时程序停止对第1代某对象的使用。</p>\n<p>如下图：<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/YEqIM16xFsSgXdvEzgrerLnKw7fEItnrSqEzlaYnUfE!/o/dGUBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=egJPAXoCTwEDACU!&amp;su=1118118497&amp;sce=0-12-12&amp;rf=2-9\" alt=\"\"><br>分配对象P导致第0代超预算，开始GC。第1代的所有对象占据内存仍小于预算，垃圾回收器再次决定只回收第0代。忽略第1代中的垃圾对象。如下图：<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/EcdSNU5AatqRERWtVdlJ7LiIPHHXe8.mklN.0hHDK9U!/o/dJQAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=aAIxAWgCMQEDACU!&amp;su=1214124305&amp;sce=0-12-12&amp;rf=2-9\" alt=\"\"></p>\n<p>程序继续运行，假设第一代的增长导致它的全部对象占用了全部预算。这时候应用程序分配对象P到对象S，使第0代对象达到它的预算总和。如下图：<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/6dB68RIUYrqMZ4p0VIY3REJZPg.g3ybkZFIazJ3h.CQ!/o/dJIAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=jwIiAY8CIgEDACU!&amp;su=177976657&amp;sce=0-12-12&amp;rf=2-9\" alt=\"\"></p>\n<p>这时候，应用程序准备分配对象T，由于第一代已满，所以必须开始GC。但这一次垃圾回收器发现第一代占用了太多内存，以至于用完了预算。由于前几次对第0代进行GC时，第1代中可能已经有很多对象变得不可达。所以这次垃圾回收器决定检查第1代和第0代中的所有对象。两代都被垃圾回收后，堆的情况如下图：<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/bxdZDsZi2Y6FSDWs7RXNPkkJK8dCzMD.cfnjwNY2Mjs!/o/dJIAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=tgI2AbYCNgEDACU!&amp;su=197762641&amp;sce=0-12-12&amp;rf=2-9\" alt=\"\"></p>\n<p>托管堆只支持三代：第0代、第1代和第2代。</p>\n<p>CLR初始化时，会为每一代选择预算。</p>\n<p>然而，CLR的垃圾回收是自调节的。</p>\n<p>这意味着垃圾回收器会在执行垃圾回收的过程了解程序的行为。</p>\n<p>例如：假设应用程序构造了许多对象，但每个对象的时间都很短。<br>在这种情况下，对第0代的垃圾回收会回收到大量的内存。事实上，第0代的所有对象都可能被回收。</p>\n<p>如果垃圾回收器发现在回收第0代后存活下来的对象很少，就可能减少第0代的预算。已分配空间的减少意味着垃圾回收将更频繁地发生，但垃圾回收器每次做的事情也减少，这减少了进程的工作集。</p>\n<p>另一方面，如果垃圾回收器回收了第0代，发现还有很多对象存活，没多少内存可以被回收，就会增大第0代的预算。</p>\n<p>同样的启发性算法调整预算适用于了第1代和第2代的预算。</p>\n<p>引自：《CLR VIA C# -21章》</p>\n<p><a href=\"https://msdn.microsoft.com/zh-cn/library/vstudio/f144e03t(v=vs.100\">自动内存管理</a>.aspx)</p>\n<p><a href=\"https://msdn.microsoft.com/zh-cn/library/vstudio/ee787088(v=vs.100\">垃圾回收的基础</a>.aspx)</p>\n<p><a href=\"https://msdn.microsoft.com/zh-cn/library/vstudio/ee787088(v=vs.100\">代数</a>.aspx#generations )</p>\n"},{"layout":"post","title":"C#.NET托管堆和垃圾回收(续)","date":"2016-03-19T16:00:00.000Z","_content":"\n\n##大对象\n CLR将对象分成大对象和小对象。目前认为85000字节或者更大的对象是大对象。CLR以不同方式对待大小对象。\n \n1. 大对象不是在小对象的地址空间分配的，而是在进程地址空间的其他地方分配。\n\n2. 目前版本的GC不“压缩”大对象，因为在内存中移动它们代价过高。但这可能在进程中的大对象之间造成地址空间碎片化，以至于抛出OutMemoryException。CLR将来的版本可能会压缩大对象。\n3. 大对象总是第2代，绝不可能是第0代或者第1代。所以只能为需要长时间存活的资源创建大对象。分配短时间存活的大对象会导致第2代被更频繁地回收，损失性能。大对象一般是大字符串（XML/JSON）或者用于I/O操作的字节数组（从文件/网络将字节读入缓冲区以便处理）。\n\n\n\n##垃圾回收模式 \n CLR启动时会选择一个GC模式，进程中之前该模式都不会改变。\n \n 有两个基本GC模式。\n\n###工作站 \n该模式针对客户端应用程序优化GC。GC造成的延时很低，应用程序线程挂起时间很短，避免用户感到焦虑。在该模式中,GC假定机器上运行的其他应用程序都不会消耗太多的CPU资源。\n\n###服务器 \n 该模式针对服务器端应用程序优化GC。被优化的主要是吞吐量和资源利用。GC假定机器上没有运行其他应用程序（无论客户端还是服务器应用程序），并假定机器的所有CPU都可以用来辅助完成GC。该模式造成托管堆被拆分成几个区域，每个CPU一个。开始垃圾回收时，垃圾回收器在每个CPU上运行一个特殊线程；每个线程都和其他线程并发回收它自己的区域。对于工作者线程行为一致的服务器应用程序，并发回收能很好进行。这个功能要求应用程序在多CPU计算机上运行，是线程能真正同时工作，从而得到性能上的提升。\n\n\n\n应用程序默认以“工作站”GC模式运行。寄宿了CLR的服务器应用程序（如ASP.NET ）可请求CLR加载服务器 GC.但如果应用程序在单处理器计算机上运行，CLR总是使用“工作站”GC模式。\n\n独立应用程序可以创建一个配置文件告诉CLR 使用CLR使用服务器回收器。配置文件要为应用程序添加gcServer元素。下面是一个示例配置文件：\n<configuration>\n       <runtime>\n             <gcServer enabled=\"true\">\n      </runtime>\n</configuration> \n可以使用GCSettings类的只读Boolean属性IsServerGC得到CLR是否处于“服务器”GC模式。\n\n\n\n除了这两种模式，GC还支持两种子模式：并发(默认)或者非并发。\n在并发方式中，垃圾回收器有一个额外的后台线程，它能在应用程序运行时并发标记对象。 程序运行时，垃圾回收器运行一个普通优先级的后台线程来查找不可达对象。找到之后，垃圾回收器再次挂起所以线程，判断是否要“压缩”内存。如决定压缩，内存会被压缩，根引用会被修正，应用程序线程恢复运行。这一次垃圾回收花费的时间比平常少，因为不可达对象集合已构造好了。但垃圾回收器也可能决定不压缩内存；事实上，垃圾回收器更倾向不压缩。可用内存多，垃圾回收器便不会压缩堆；这有利于增强性能，但会增大程序的工作集。使用并发垃圾回收器，应用程序消耗的内存通常比使用非并发垃圾回收器多。","source":"_posts/GC-2.md","raw":"---\nlayout: post\ntitle: C#.NET托管堆和垃圾回收(续)\ncategory: GC\ndate: 2016-03-20 00:00:00\n---\n\n\n##大对象\n CLR将对象分成大对象和小对象。目前认为85000字节或者更大的对象是大对象。CLR以不同方式对待大小对象。\n \n1. 大对象不是在小对象的地址空间分配的，而是在进程地址空间的其他地方分配。\n\n2. 目前版本的GC不“压缩”大对象，因为在内存中移动它们代价过高。但这可能在进程中的大对象之间造成地址空间碎片化，以至于抛出OutMemoryException。CLR将来的版本可能会压缩大对象。\n3. 大对象总是第2代，绝不可能是第0代或者第1代。所以只能为需要长时间存活的资源创建大对象。分配短时间存活的大对象会导致第2代被更频繁地回收，损失性能。大对象一般是大字符串（XML/JSON）或者用于I/O操作的字节数组（从文件/网络将字节读入缓冲区以便处理）。\n\n\n\n##垃圾回收模式 \n CLR启动时会选择一个GC模式，进程中之前该模式都不会改变。\n \n 有两个基本GC模式。\n\n###工作站 \n该模式针对客户端应用程序优化GC。GC造成的延时很低，应用程序线程挂起时间很短，避免用户感到焦虑。在该模式中,GC假定机器上运行的其他应用程序都不会消耗太多的CPU资源。\n\n###服务器 \n 该模式针对服务器端应用程序优化GC。被优化的主要是吞吐量和资源利用。GC假定机器上没有运行其他应用程序（无论客户端还是服务器应用程序），并假定机器的所有CPU都可以用来辅助完成GC。该模式造成托管堆被拆分成几个区域，每个CPU一个。开始垃圾回收时，垃圾回收器在每个CPU上运行一个特殊线程；每个线程都和其他线程并发回收它自己的区域。对于工作者线程行为一致的服务器应用程序，并发回收能很好进行。这个功能要求应用程序在多CPU计算机上运行，是线程能真正同时工作，从而得到性能上的提升。\n\n\n\n应用程序默认以“工作站”GC模式运行。寄宿了CLR的服务器应用程序（如ASP.NET ）可请求CLR加载服务器 GC.但如果应用程序在单处理器计算机上运行，CLR总是使用“工作站”GC模式。\n\n独立应用程序可以创建一个配置文件告诉CLR 使用CLR使用服务器回收器。配置文件要为应用程序添加gcServer元素。下面是一个示例配置文件：\n<configuration>\n       <runtime>\n             <gcServer enabled=\"true\">\n      </runtime>\n</configuration> \n可以使用GCSettings类的只读Boolean属性IsServerGC得到CLR是否处于“服务器”GC模式。\n\n\n\n除了这两种模式，GC还支持两种子模式：并发(默认)或者非并发。\n在并发方式中，垃圾回收器有一个额外的后台线程，它能在应用程序运行时并发标记对象。 程序运行时，垃圾回收器运行一个普通优先级的后台线程来查找不可达对象。找到之后，垃圾回收器再次挂起所以线程，判断是否要“压缩”内存。如决定压缩，内存会被压缩，根引用会被修正，应用程序线程恢复运行。这一次垃圾回收花费的时间比平常少，因为不可达对象集合已构造好了。但垃圾回收器也可能决定不压缩内存；事实上，垃圾回收器更倾向不压缩。可用内存多，垃圾回收器便不会压缩堆；这有利于增强性能，但会增大程序的工作集。使用并发垃圾回收器，应用程序消耗的内存通常比使用非并发垃圾回收器多。","slug":"GC-2","published":1,"updated":"2016-10-15T05:20:24.678Z","comments":1,"photos":[],"link":"","_id":"cj0dyumw3000i6kun2lpx4lom","content":"<p>##大对象<br> CLR将对象分成大对象和小对象。目前认为85000字节或者更大的对象是大对象。CLR以不同方式对待大小对象。</p>\n<ol>\n<li><p>大对象不是在小对象的地址空间分配的，而是在进程地址空间的其他地方分配。</p>\n</li>\n<li><p>目前版本的GC不“压缩”大对象，因为在内存中移动它们代价过高。但这可能在进程中的大对象之间造成地址空间碎片化，以至于抛出OutMemoryException。CLR将来的版本可能会压缩大对象。</p>\n</li>\n<li>大对象总是第2代，绝不可能是第0代或者第1代。所以只能为需要长时间存活的资源创建大对象。分配短时间存活的大对象会导致第2代被更频繁地回收，损失性能。大对象一般是大字符串（XML/JSON）或者用于I/O操作的字节数组（从文件/网络将字节读入缓冲区以便处理）。</li>\n</ol>\n<p>##垃圾回收模式<br> CLR启动时会选择一个GC模式，进程中之前该模式都不会改变。</p>\n<p> 有两个基本GC模式。</p>\n<p>###工作站<br>该模式针对客户端应用程序优化GC。GC造成的延时很低，应用程序线程挂起时间很短，避免用户感到焦虑。在该模式中,GC假定机器上运行的其他应用程序都不会消耗太多的CPU资源。</p>\n<p>###服务器<br> 该模式针对服务器端应用程序优化GC。被优化的主要是吞吐量和资源利用。GC假定机器上没有运行其他应用程序（无论客户端还是服务器应用程序），并假定机器的所有CPU都可以用来辅助完成GC。该模式造成托管堆被拆分成几个区域，每个CPU一个。开始垃圾回收时，垃圾回收器在每个CPU上运行一个特殊线程；每个线程都和其他线程并发回收它自己的区域。对于工作者线程行为一致的服务器应用程序，并发回收能很好进行。这个功能要求应用程序在多CPU计算机上运行，是线程能真正同时工作，从而得到性能上的提升。</p>\n<p>应用程序默认以“工作站”GC模式运行。寄宿了CLR的服务器应用程序（如ASP.NET ）可请求CLR加载服务器 GC.但如果应用程序在单处理器计算机上运行，CLR总是使用“工作站”GC模式。</p>\n<p>独立应用程序可以创建一个配置文件告诉CLR 使用CLR使用服务器回收器。配置文件要为应用程序添加gcServer元素。下面是一个示例配置文件：</p>\n<p><configuration><br>       <runtime><br>             <gcserver enabled=\"true\"><br>      </gcserver></runtime><br></configuration><br>可以使用GCSettings类的只读Boolean属性IsServerGC得到CLR是否处于“服务器”GC模式。</p>\n<p>除了这两种模式，GC还支持两种子模式：并发(默认)或者非并发。<br>在并发方式中，垃圾回收器有一个额外的后台线程，它能在应用程序运行时并发标记对象。 程序运行时，垃圾回收器运行一个普通优先级的后台线程来查找不可达对象。找到之后，垃圾回收器再次挂起所以线程，判断是否要“压缩”内存。如决定压缩，内存会被压缩，根引用会被修正，应用程序线程恢复运行。这一次垃圾回收花费的时间比平常少，因为不可达对象集合已构造好了。但垃圾回收器也可能决定不压缩内存；事实上，垃圾回收器更倾向不压缩。可用内存多，垃圾回收器便不会压缩堆；这有利于增强性能，但会增大程序的工作集。使用并发垃圾回收器，应用程序消耗的内存通常比使用非并发垃圾回收器多。</p>\n","excerpt":"","more":"<p>##大对象<br> CLR将对象分成大对象和小对象。目前认为85000字节或者更大的对象是大对象。CLR以不同方式对待大小对象。</p>\n<ol>\n<li><p>大对象不是在小对象的地址空间分配的，而是在进程地址空间的其他地方分配。</p>\n</li>\n<li><p>目前版本的GC不“压缩”大对象，因为在内存中移动它们代价过高。但这可能在进程中的大对象之间造成地址空间碎片化，以至于抛出OutMemoryException。CLR将来的版本可能会压缩大对象。</p>\n</li>\n<li>大对象总是第2代，绝不可能是第0代或者第1代。所以只能为需要长时间存活的资源创建大对象。分配短时间存活的大对象会导致第2代被更频繁地回收，损失性能。大对象一般是大字符串（XML/JSON）或者用于I/O操作的字节数组（从文件/网络将字节读入缓冲区以便处理）。</li>\n</ol>\n<p>##垃圾回收模式<br> CLR启动时会选择一个GC模式，进程中之前该模式都不会改变。</p>\n<p> 有两个基本GC模式。</p>\n<p>###工作站<br>该模式针对客户端应用程序优化GC。GC造成的延时很低，应用程序线程挂起时间很短，避免用户感到焦虑。在该模式中,GC假定机器上运行的其他应用程序都不会消耗太多的CPU资源。</p>\n<p>###服务器<br> 该模式针对服务器端应用程序优化GC。被优化的主要是吞吐量和资源利用。GC假定机器上没有运行其他应用程序（无论客户端还是服务器应用程序），并假定机器的所有CPU都可以用来辅助完成GC。该模式造成托管堆被拆分成几个区域，每个CPU一个。开始垃圾回收时，垃圾回收器在每个CPU上运行一个特殊线程；每个线程都和其他线程并发回收它自己的区域。对于工作者线程行为一致的服务器应用程序，并发回收能很好进行。这个功能要求应用程序在多CPU计算机上运行，是线程能真正同时工作，从而得到性能上的提升。</p>\n<p>应用程序默认以“工作站”GC模式运行。寄宿了CLR的服务器应用程序（如ASP.NET ）可请求CLR加载服务器 GC.但如果应用程序在单处理器计算机上运行，CLR总是使用“工作站”GC模式。</p>\n<p>独立应用程序可以创建一个配置文件告诉CLR 使用CLR使用服务器回收器。配置文件要为应用程序添加gcServer元素。下面是一个示例配置文件：</p>\n<p><configuration><br>       <runtime><br>             <gcServer enabled=\"true\"><br>      </runtime><br></configuration><br>可以使用GCSettings类的只读Boolean属性IsServerGC得到CLR是否处于“服务器”GC模式。</p>\n<p>除了这两种模式，GC还支持两种子模式：并发(默认)或者非并发。<br>在并发方式中，垃圾回收器有一个额外的后台线程，它能在应用程序运行时并发标记对象。 程序运行时，垃圾回收器运行一个普通优先级的后台线程来查找不可达对象。找到之后，垃圾回收器再次挂起所以线程，判断是否要“压缩”内存。如决定压缩，内存会被压缩，根引用会被修正，应用程序线程恢复运行。这一次垃圾回收花费的时间比平常少，因为不可达对象集合已构造好了。但垃圾回收器也可能决定不压缩内存；事实上，垃圾回收器更倾向不压缩。可用内存多，垃圾回收器便不会压缩堆；这有利于增强性能，但会增大程序的工作集。使用并发垃圾回收器，应用程序消耗的内存通常比使用非并发垃圾回收器多。</p>\n"},{"layout":"post","title":"Jexus支持HTTPS协议","date":"2016-04-19T16:00:00.000Z","_content":"\n众所周知，在HTTPS页面请求HTTP资料的时候，现代浏览器会拦截，提示用户是否继续，或者直接拦截，提示都不出来。\n\n\n最近给自己做了个快速书签工具，点击书签就直接把书签发送到服务器地址，然后保存到我的网站中。\n\n一开始一切都挺正常的，不过遇到了https的网站的时候，就跪掉了。\n\n开始的时候看到HTTPS证书是收费的，想想还是算了，反正凑合能用就是。前几天偶尔看到有一个免费申请HTTPS的开源软件，喵了一下看起来还不错，这几天有空了立马开干。下面有一个教程，我申请证书差不多就是按照这个来处理的。\n\n[用Let’s Encrypt获取免费证书](https://www.paulyang.cn/blog/archives/39?spm=5176.blog2666.yqblogcon1.12.Nu0TgL)\n\n\n关于这个Let's Encrypt，维基百科是这样介绍的：\n\n> Let's Encrypt 是一个将于2015年末推出的数字证书认证机构，将通过旨在消除当前手动创建和安装证书的复杂过程的自动化流程，为安全网站提供免费的SSL/TLS证书。  Let's Encrypt 是由互联网安全研究小组（ISRG，一个公益组织）提供的服务。主要赞助商包括电子前哨基金会，Mozilla基金会，Akamai以及思科。2015年4月9日，ISRG与Linux基金会宣布合作。用以实现这一新的数字证书认证机构的协议被称为自动证书管理环境（ACME）。  GitHub上有这一规范的草案，且提案的一个版本已作为一个Internet草案发布。Let's Encrypt 宣称这一过程将十分简单、自动化并且免费。  2015年8月7日，该服务更新其推出计划，预计将在2015年9月7日当周某时发布首个证书，随后向列入白名单的域名发行少量证书并逐渐扩大发行。若一切按计划进行，该服务预计将在2015年11月16日当周某时全面开始提供.\n\n\n整个项目在Github有代码，主要是通过客户端来为我们的网站生成https证书。\n首先我们先下载客户端，如下：\n```shell\ngit clone https://github.com/letsencrypt/letsencrypt.git\n\n```\n接着进入这个仓库内，执行下面代码：\n```shell\n./letsencrypt-auto certonly -a \nwebroot\\ --webroot-path 网站所在路径(如：/var/www/web/) \\ \n-d 你的域名(如：test.online) -d www.你的域名(如ww.test.online)\n\n```\n这里需要注意的事，我这里为了排版，给上面的命令加了换行，运行这个命令的时候记得把换行符去掉。\n换行符在webroot、-d 前面各有一个。\n\n一切顺利的话，我们在`/etc/letsencrypt/live/域名/`这个目录下能看到四个文件，分别是：\n\n1. 域名证书文件\n2. 签发域名证书的证书链文件\n3. 域名证书+证书链文件\n4. 私钥文件\n\n如下图：\n![letsencrypt文件](http://7xread.com1.z0.glb.clouddn.com/60e4f29a-6da5-40e1-ae32-453a3bbf2455)\n\n接着就是为网站设置证书了。\n\n\nJexus设置HTTPS要更改jws.conf文档以及网站的配置文档。\n\n操作步骤如下：\n\n1. 修改jws.conf\n进入Jexus文件夹中，打开 “jws.conf”，添加下面两句：\n\n```shell\n\tCertificateFile    = /etc/letsencrypt/live/域名/fullchain.pem\n\tCertificateKeyFile = /etc/letsencrypt/live/域名/privkey.pem\n```\n\n修改之后效果图如下：\n![图片描述](http://7xread.com1.z0.glb.clouddn.com/d306d9c5-6391-421d-86fc-053b97d1b489)\n\n\n2. 开启网站的HTTPS功能\n\n进入siteconf/文件夹，找到对应的网站conf文件，\n\n把网站服务端口改为443：\nport=443\n\n启用https：\nUseHttps=true\n\n修改之后的效果图如下：\n![图片描述](http://7xread.com1.z0.glb.clouddn.com/0800dc87-2500-42d2-a3c5-a75a2c819330)\n\n然后重启jexus即可。\n\n完了之后，通过HTTPS即可访问。\n\n最后上一个HTTPS证书的图证明一下这个是可行的。\n![图片描述](http://7xread.com1.z0.glb.clouddn.com/24842774-311e-4e55-a6b5-b88a89edc754)\n\n\n撒花，下次再见。\n\n\n\n","source":"_posts/Jexus-support-HTTPS.md","raw":"---\nlayout: post\ntitle: Jexus支持HTTPS协议\ncategory: jexus\ndate: 2016-04-20 00:00:00\n---\n\n众所周知，在HTTPS页面请求HTTP资料的时候，现代浏览器会拦截，提示用户是否继续，或者直接拦截，提示都不出来。\n\n\n最近给自己做了个快速书签工具，点击书签就直接把书签发送到服务器地址，然后保存到我的网站中。\n\n一开始一切都挺正常的，不过遇到了https的网站的时候，就跪掉了。\n\n开始的时候看到HTTPS证书是收费的，想想还是算了，反正凑合能用就是。前几天偶尔看到有一个免费申请HTTPS的开源软件，喵了一下看起来还不错，这几天有空了立马开干。下面有一个教程，我申请证书差不多就是按照这个来处理的。\n\n[用Let’s Encrypt获取免费证书](https://www.paulyang.cn/blog/archives/39?spm=5176.blog2666.yqblogcon1.12.Nu0TgL)\n\n\n关于这个Let's Encrypt，维基百科是这样介绍的：\n\n> Let's Encrypt 是一个将于2015年末推出的数字证书认证机构，将通过旨在消除当前手动创建和安装证书的复杂过程的自动化流程，为安全网站提供免费的SSL/TLS证书。  Let's Encrypt 是由互联网安全研究小组（ISRG，一个公益组织）提供的服务。主要赞助商包括电子前哨基金会，Mozilla基金会，Akamai以及思科。2015年4月9日，ISRG与Linux基金会宣布合作。用以实现这一新的数字证书认证机构的协议被称为自动证书管理环境（ACME）。  GitHub上有这一规范的草案，且提案的一个版本已作为一个Internet草案发布。Let's Encrypt 宣称这一过程将十分简单、自动化并且免费。  2015年8月7日，该服务更新其推出计划，预计将在2015年9月7日当周某时发布首个证书，随后向列入白名单的域名发行少量证书并逐渐扩大发行。若一切按计划进行，该服务预计将在2015年11月16日当周某时全面开始提供.\n\n\n整个项目在Github有代码，主要是通过客户端来为我们的网站生成https证书。\n首先我们先下载客户端，如下：\n```shell\ngit clone https://github.com/letsencrypt/letsencrypt.git\n\n```\n接着进入这个仓库内，执行下面代码：\n```shell\n./letsencrypt-auto certonly -a \nwebroot\\ --webroot-path 网站所在路径(如：/var/www/web/) \\ \n-d 你的域名(如：test.online) -d www.你的域名(如ww.test.online)\n\n```\n这里需要注意的事，我这里为了排版，给上面的命令加了换行，运行这个命令的时候记得把换行符去掉。\n换行符在webroot、-d 前面各有一个。\n\n一切顺利的话，我们在`/etc/letsencrypt/live/域名/`这个目录下能看到四个文件，分别是：\n\n1. 域名证书文件\n2. 签发域名证书的证书链文件\n3. 域名证书+证书链文件\n4. 私钥文件\n\n如下图：\n![letsencrypt文件](http://7xread.com1.z0.glb.clouddn.com/60e4f29a-6da5-40e1-ae32-453a3bbf2455)\n\n接着就是为网站设置证书了。\n\n\nJexus设置HTTPS要更改jws.conf文档以及网站的配置文档。\n\n操作步骤如下：\n\n1. 修改jws.conf\n进入Jexus文件夹中，打开 “jws.conf”，添加下面两句：\n\n```shell\n\tCertificateFile    = /etc/letsencrypt/live/域名/fullchain.pem\n\tCertificateKeyFile = /etc/letsencrypt/live/域名/privkey.pem\n```\n\n修改之后效果图如下：\n![图片描述](http://7xread.com1.z0.glb.clouddn.com/d306d9c5-6391-421d-86fc-053b97d1b489)\n\n\n2. 开启网站的HTTPS功能\n\n进入siteconf/文件夹，找到对应的网站conf文件，\n\n把网站服务端口改为443：\nport=443\n\n启用https：\nUseHttps=true\n\n修改之后的效果图如下：\n![图片描述](http://7xread.com1.z0.glb.clouddn.com/0800dc87-2500-42d2-a3c5-a75a2c819330)\n\n然后重启jexus即可。\n\n完了之后，通过HTTPS即可访问。\n\n最后上一个HTTPS证书的图证明一下这个是可行的。\n![图片描述](http://7xread.com1.z0.glb.clouddn.com/24842774-311e-4e55-a6b5-b88a89edc754)\n\n\n撒花，下次再见。\n\n\n\n","slug":"Jexus-support-HTTPS","published":1,"updated":"2016-10-15T05:20:24.707Z","comments":1,"photos":[],"link":"","_id":"cj0dyumw5000m6kundw934ksw","content":"<p>众所周知，在HTTPS页面请求HTTP资料的时候，现代浏览器会拦截，提示用户是否继续，或者直接拦截，提示都不出来。</p>\n<p>最近给自己做了个快速书签工具，点击书签就直接把书签发送到服务器地址，然后保存到我的网站中。</p>\n<p>一开始一切都挺正常的，不过遇到了https的网站的时候，就跪掉了。</p>\n<p>开始的时候看到HTTPS证书是收费的，想想还是算了，反正凑合能用就是。前几天偶尔看到有一个免费申请HTTPS的开源软件，喵了一下看起来还不错，这几天有空了立马开干。下面有一个教程，我申请证书差不多就是按照这个来处理的。</p>\n<p><a href=\"https://www.paulyang.cn/blog/archives/39?spm=5176.blog2666.yqblogcon1.12.Nu0TgL\" target=\"_blank\" rel=\"external\">用Let’s Encrypt获取免费证书</a></p>\n<p>关于这个Let’s Encrypt，维基百科是这样介绍的：</p>\n<blockquote>\n<p>Let’s Encrypt 是一个将于2015年末推出的数字证书认证机构，将通过旨在消除当前手动创建和安装证书的复杂过程的自动化流程，为安全网站提供免费的SSL/TLS证书。  Let’s Encrypt 是由互联网安全研究小组（ISRG，一个公益组织）提供的服务。主要赞助商包括电子前哨基金会，Mozilla基金会，Akamai以及思科。2015年4月9日，ISRG与Linux基金会宣布合作。用以实现这一新的数字证书认证机构的协议被称为自动证书管理环境（ACME）。  GitHub上有这一规范的草案，且提案的一个版本已作为一个Internet草案发布。Let’s Encrypt 宣称这一过程将十分简单、自动化并且免费。  2015年8月7日，该服务更新其推出计划，预计将在2015年9月7日当周某时发布首个证书，随后向列入白名单的域名发行少量证书并逐渐扩大发行。若一切按计划进行，该服务预计将在2015年11月16日当周某时全面开始提供.</p>\n</blockquote>\n<p>整个项目在Github有代码，主要是通过客户端来为我们的网站生成https证书。<br>首先我们先下载客户端，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/letsencrypt/letsencrypt.git</div></pre></td></tr></table></figure></p>\n<p>接着进入这个仓库内，执行下面代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">./letsencrypt-auto certonly -a </div><div class=\"line\">webroot\\ --webroot-path 网站所在路径(如：/var/www/web/) \\ </div><div class=\"line\">-d 你的域名(如：test.online) -d www.你的域名(如ww.test.online)</div></pre></td></tr></table></figure></p>\n<p>这里需要注意的事，我这里为了排版，给上面的命令加了换行，运行这个命令的时候记得把换行符去掉。<br>换行符在webroot、-d 前面各有一个。</p>\n<p>一切顺利的话，我们在<code>/etc/letsencrypt/live/域名/</code>这个目录下能看到四个文件，分别是：</p>\n<ol>\n<li>域名证书文件</li>\n<li>签发域名证书的证书链文件</li>\n<li>域名证书+证书链文件</li>\n<li>私钥文件</li>\n</ol>\n<p>如下图：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/60e4f29a-6da5-40e1-ae32-453a3bbf2455\" alt=\"letsencrypt文件\"></p>\n<p>接着就是为网站设置证书了。</p>\n<p>Jexus设置HTTPS要更改jws.conf文档以及网站的配置文档。</p>\n<p>操作步骤如下：</p>\n<ol>\n<li>修改jws.conf<br>进入Jexus文件夹中，打开 “jws.conf”，添加下面两句：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">CertificateFile    = /etc/letsencrypt/live/域名/fullchain.pem</div><div class=\"line\">CertificateKeyFile = /etc/letsencrypt/live/域名/privkey.pem</div></pre></td></tr></table></figure>\n<p>修改之后效果图如下：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/d306d9c5-6391-421d-86fc-053b97d1b489\" alt=\"图片描述\"></p>\n<ol>\n<li>开启网站的HTTPS功能</li>\n</ol>\n<p>进入siteconf/文件夹，找到对应的网站conf文件，</p>\n<p>把网站服务端口改为443：<br>port=443</p>\n<p>启用https：<br>UseHttps=true</p>\n<p>修改之后的效果图如下：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/0800dc87-2500-42d2-a3c5-a75a2c819330\" alt=\"图片描述\"></p>\n<p>然后重启jexus即可。</p>\n<p>完了之后，通过HTTPS即可访问。</p>\n<p>最后上一个HTTPS证书的图证明一下这个是可行的。<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/24842774-311e-4e55-a6b5-b88a89edc754\" alt=\"图片描述\"></p>\n<p>撒花，下次再见。</p>\n","excerpt":"","more":"<p>众所周知，在HTTPS页面请求HTTP资料的时候，现代浏览器会拦截，提示用户是否继续，或者直接拦截，提示都不出来。</p>\n<p>最近给自己做了个快速书签工具，点击书签就直接把书签发送到服务器地址，然后保存到我的网站中。</p>\n<p>一开始一切都挺正常的，不过遇到了https的网站的时候，就跪掉了。</p>\n<p>开始的时候看到HTTPS证书是收费的，想想还是算了，反正凑合能用就是。前几天偶尔看到有一个免费申请HTTPS的开源软件，喵了一下看起来还不错，这几天有空了立马开干。下面有一个教程，我申请证书差不多就是按照这个来处理的。</p>\n<p><a href=\"https://www.paulyang.cn/blog/archives/39?spm=5176.blog2666.yqblogcon1.12.Nu0TgL\">用Let’s Encrypt获取免费证书</a></p>\n<p>关于这个Let’s Encrypt，维基百科是这样介绍的：</p>\n<blockquote>\n<p>Let’s Encrypt 是一个将于2015年末推出的数字证书认证机构，将通过旨在消除当前手动创建和安装证书的复杂过程的自动化流程，为安全网站提供免费的SSL/TLS证书。  Let’s Encrypt 是由互联网安全研究小组（ISRG，一个公益组织）提供的服务。主要赞助商包括电子前哨基金会，Mozilla基金会，Akamai以及思科。2015年4月9日，ISRG与Linux基金会宣布合作。用以实现这一新的数字证书认证机构的协议被称为自动证书管理环境（ACME）。  GitHub上有这一规范的草案，且提案的一个版本已作为一个Internet草案发布。Let’s Encrypt 宣称这一过程将十分简单、自动化并且免费。  2015年8月7日，该服务更新其推出计划，预计将在2015年9月7日当周某时发布首个证书，随后向列入白名单的域名发行少量证书并逐渐扩大发行。若一切按计划进行，该服务预计将在2015年11月16日当周某时全面开始提供.</p>\n</blockquote>\n<p>整个项目在Github有代码，主要是通过客户端来为我们的网站生成https证书。<br>首先我们先下载客户端，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/letsencrypt/letsencrypt.git</div></pre></td></tr></table></figure></p>\n<p>接着进入这个仓库内，执行下面代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">./letsencrypt-auto certonly -a </div><div class=\"line\">webroot\\ --webroot-path 网站所在路径(如：/var/www/web/) \\ </div><div class=\"line\">-d 你的域名(如：test.online) -d www.你的域名(如ww.test.online)</div></pre></td></tr></table></figure></p>\n<p>这里需要注意的事，我这里为了排版，给上面的命令加了换行，运行这个命令的时候记得把换行符去掉。<br>换行符在webroot、-d 前面各有一个。</p>\n<p>一切顺利的话，我们在<code>/etc/letsencrypt/live/域名/</code>这个目录下能看到四个文件，分别是：</p>\n<ol>\n<li>域名证书文件</li>\n<li>签发域名证书的证书链文件</li>\n<li>域名证书+证书链文件</li>\n<li>私钥文件</li>\n</ol>\n<p>如下图：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/60e4f29a-6da5-40e1-ae32-453a3bbf2455\" alt=\"letsencrypt文件\"></p>\n<p>接着就是为网站设置证书了。</p>\n<p>Jexus设置HTTPS要更改jws.conf文档以及网站的配置文档。</p>\n<p>操作步骤如下：</p>\n<ol>\n<li>修改jws.conf<br>进入Jexus文件夹中，打开 “jws.conf”，添加下面两句：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">CertificateFile    = /etc/letsencrypt/live/域名/fullchain.pem</div><div class=\"line\">CertificateKeyFile = /etc/letsencrypt/live/域名/privkey.pem</div></pre></td></tr></table></figure>\n<p>修改之后效果图如下：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/d306d9c5-6391-421d-86fc-053b97d1b489\" alt=\"图片描述\"></p>\n<ol>\n<li>开启网站的HTTPS功能</li>\n</ol>\n<p>进入siteconf/文件夹，找到对应的网站conf文件，</p>\n<p>把网站服务端口改为443：<br>port=443</p>\n<p>启用https：<br>UseHttps=true</p>\n<p>修改之后的效果图如下：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/0800dc87-2500-42d2-a3c5-a75a2c819330\" alt=\"图片描述\"></p>\n<p>然后重启jexus即可。</p>\n<p>完了之后，通过HTTPS即可访问。</p>\n<p>最后上一个HTTPS证书的图证明一下这个是可行的。<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/24842774-311e-4e55-a6b5-b88a89edc754\" alt=\"图片描述\"></p>\n<p>撒花，下次再见。</p>\n"},{"layout":"post","title":".NET-join用法","date":"2016-03-02T16:00:00.000Z","_content":"\n\n#.NET   Join\n 连接：内连接、外连接、左连接、右连接。\nSQL的Join这里就不多说了，\n今天主要是看一下LINQ的Join用法，以及Enumerable.Join()的用法。\n\nJoin用于连接数据，首先就是数据之间有联系咯。\n \n先说Enumerable.Join()。\n参数类型如下：\n\t\t\tpublic static IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>\n\t\t\t(      \n\t\t\t         this IEnumerable<TOuter> outer,\n\t\t\t        IEnumerable<TInner> inner,\n\t\t\t        Func<TOuter, TKey> outerKeySelector,\n\t\t\t        Func<TInner, TKey> innerKeySelector,\n\t\t\t        Func<TOuter, TInner, TResult> resultSelector\n\t\t\t) \n类型参数\nTOuter\n第一个序列中的元素的类型。\nTInner\n第二个序列中的元素的类型。\nTKey\n键选择器函数返回的键的类型。\nTResult\n结果元素的类型。\n参数\nouter\n类型：System.Collections.Generic.IEnumerable<TOuter>\n要联接的第一个序列。\ninner\n类型：System.Collections.Generic.IEnumerable<TInner>\n要与第一个序列联接的序列。\nouterKeySelector\n类型：System.Func<TOuter, TKey>\n用于从第一个序列的每个元素提取联接键的函数。\ninnerKeySelector\n类型：System.Func<TInner, TKey>\n用于从第二个序列的每个元素提取联接键的函数。\nresultSelector\n类型：System.Func<TOuter, TInner, TResult>\n用于从两个匹配元素创建结果元素的函数。\n返回值\n类型：System.Collections.Generic.IEnumerable<TResult>\nIEnumerable&lt;T&gt; that has elements of type TResult that are obtained by performing an inner join on two sequences.\" xml:space=\"preserve\">一个具有 TResult 类型元素的 IEnumerable<T>，这些元素是通过对两个序列执行内部联接得来的。\n使用说明\n在 Visual Basic 和 C# 中，可以在 IEnumerable<TOuter> 类型的任何对象上将此方法作为实例方法来调用。当使用实例方法语法调用此方法时，请省略第一个参数。有关详细信息，请参阅 扩展方法 (Visual Basic) 或 扩展方法（C# 编程指南）。\n \n先上一个MSDN的例子。\n       \n         public static void JoinEx1()         \n         {\n\t       Person magnus = new Person { Name = \"Hedlund, Magnus\" };\n\t       Pet barley = new Pet { Name = \"Barley\", Owner = terry };\n\t       Person terry = new Person { Name = \"Adams, Terry\" };\n\t       Person charlotte = new Person { Name = \"Weiss, \n\t       Charlotte\" };\n\t       Pet boots = new Pet { Name = \"Boots\", Owner = terry };\n\t       Pet whiskers = new Pet { Name = \"Whiskers\", \n\t       Owner = charlotte};\n\t       Pet daisy = new Pet { Name = \"Daisy\", Owner = magnus };\n\n        List<Person> people = new List<Person> \n        { magnus, terry, charlotte };\n        List<Pet> pets = new List<Pet> \n        { barley, boots, whiskers, daisy };\n\n        // Create a list of Person-Pet pairs where \n        // each element is an anonymous type that contains a\n        // Pet's name and the name of the Person that owns the Pet.\n        var query =\n            people.Join(\n                        pets,//需要Join的另一个数据源\n              person => person,//自己用来比较的key， lambda 表达式\n         pet => pet.Owner,//另一个数据源用来比较的key， lambda 表达式\n    (person, pet) =>new { OwnerName = person.Name, Pet = pet.Name } \n                   //想要取出来的数据，支持匿名对象， lambda 表达式);\n        foreach (var obj in query)\n        {\n          Console.WriteLine( \"{0} - {1}\",obj.OwnerName,obj.Pet);\n        }\n    }\n\n LINQ的Join\n同样是上面的数据，如果换成LINQ的Join，写法如下：\n            var query = from person in people // 第一个数据源\n                      join pet in pets            //第二个数据源\n                      on person equals pet.Owner  //Join条件\n                      select  new { OwnerName = person.Name, Pet = pet.Name };  \n                      //要到得到的数据。\n\n\n上面两种写法得到的结果都是内链接结果，至于左连接、右连接、外连接....\n等我下次有心情再更新吧，再不走家里的键盘又要坏了。 \n\n一些资料链接：\nhttps://msdn.microsoft.com/zh-cn/library/bb311040.aspx\nhttps://msdn.microsoft.com/zh-cn/library/bb534675%28v=vs.110%29.aspx?f=255&MSPPError=-2147217396\nhttp://www.cnblogs.com/Ivony/archive/2008/08/18/1270555.html\nhttp://www.cnblogs.com/Ivony/archive/2008/08/28/1278643.html\nhttp://www.cnblogs.com/Ivony/archive/2008/10/14/1309807.html ; \n\n\nLINQ GroupJoin 实现左连接\nvar queryGroup = from person in people // 第一个数据源\n                                join pet in pets //第二个数据源\n                                on person equals pet.Owner into ps //加了into,华丽变身GroupJoin\n                                select new { OwnerName = person.Name, Pet = ps }; //要到得到的数据。 ","source":"_posts/Join.md","raw":"---\nlayout: post\ntitle: .NET-join用法\ncategory: .net\ndate: 2016-03-03 00:00:00\n---\n\n\n#.NET   Join\n 连接：内连接、外连接、左连接、右连接。\nSQL的Join这里就不多说了，\n今天主要是看一下LINQ的Join用法，以及Enumerable.Join()的用法。\n\nJoin用于连接数据，首先就是数据之间有联系咯。\n \n先说Enumerable.Join()。\n参数类型如下：\n\t\t\tpublic static IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>\n\t\t\t(      \n\t\t\t         this IEnumerable<TOuter> outer,\n\t\t\t        IEnumerable<TInner> inner,\n\t\t\t        Func<TOuter, TKey> outerKeySelector,\n\t\t\t        Func<TInner, TKey> innerKeySelector,\n\t\t\t        Func<TOuter, TInner, TResult> resultSelector\n\t\t\t) \n类型参数\nTOuter\n第一个序列中的元素的类型。\nTInner\n第二个序列中的元素的类型。\nTKey\n键选择器函数返回的键的类型。\nTResult\n结果元素的类型。\n参数\nouter\n类型：System.Collections.Generic.IEnumerable<TOuter>\n要联接的第一个序列。\ninner\n类型：System.Collections.Generic.IEnumerable<TInner>\n要与第一个序列联接的序列。\nouterKeySelector\n类型：System.Func<TOuter, TKey>\n用于从第一个序列的每个元素提取联接键的函数。\ninnerKeySelector\n类型：System.Func<TInner, TKey>\n用于从第二个序列的每个元素提取联接键的函数。\nresultSelector\n类型：System.Func<TOuter, TInner, TResult>\n用于从两个匹配元素创建结果元素的函数。\n返回值\n类型：System.Collections.Generic.IEnumerable<TResult>\nIEnumerable&lt;T&gt; that has elements of type TResult that are obtained by performing an inner join on two sequences.\" xml:space=\"preserve\">一个具有 TResult 类型元素的 IEnumerable<T>，这些元素是通过对两个序列执行内部联接得来的。\n使用说明\n在 Visual Basic 和 C# 中，可以在 IEnumerable<TOuter> 类型的任何对象上将此方法作为实例方法来调用。当使用实例方法语法调用此方法时，请省略第一个参数。有关详细信息，请参阅 扩展方法 (Visual Basic) 或 扩展方法（C# 编程指南）。\n \n先上一个MSDN的例子。\n       \n         public static void JoinEx1()         \n         {\n\t       Person magnus = new Person { Name = \"Hedlund, Magnus\" };\n\t       Pet barley = new Pet { Name = \"Barley\", Owner = terry };\n\t       Person terry = new Person { Name = \"Adams, Terry\" };\n\t       Person charlotte = new Person { Name = \"Weiss, \n\t       Charlotte\" };\n\t       Pet boots = new Pet { Name = \"Boots\", Owner = terry };\n\t       Pet whiskers = new Pet { Name = \"Whiskers\", \n\t       Owner = charlotte};\n\t       Pet daisy = new Pet { Name = \"Daisy\", Owner = magnus };\n\n        List<Person> people = new List<Person> \n        { magnus, terry, charlotte };\n        List<Pet> pets = new List<Pet> \n        { barley, boots, whiskers, daisy };\n\n        // Create a list of Person-Pet pairs where \n        // each element is an anonymous type that contains a\n        // Pet's name and the name of the Person that owns the Pet.\n        var query =\n            people.Join(\n                        pets,//需要Join的另一个数据源\n              person => person,//自己用来比较的key， lambda 表达式\n         pet => pet.Owner,//另一个数据源用来比较的key， lambda 表达式\n    (person, pet) =>new { OwnerName = person.Name, Pet = pet.Name } \n                   //想要取出来的数据，支持匿名对象， lambda 表达式);\n        foreach (var obj in query)\n        {\n          Console.WriteLine( \"{0} - {1}\",obj.OwnerName,obj.Pet);\n        }\n    }\n\n LINQ的Join\n同样是上面的数据，如果换成LINQ的Join，写法如下：\n            var query = from person in people // 第一个数据源\n                      join pet in pets            //第二个数据源\n                      on person equals pet.Owner  //Join条件\n                      select  new { OwnerName = person.Name, Pet = pet.Name };  \n                      //要到得到的数据。\n\n\n上面两种写法得到的结果都是内链接结果，至于左连接、右连接、外连接....\n等我下次有心情再更新吧，再不走家里的键盘又要坏了。 \n\n一些资料链接：\nhttps://msdn.microsoft.com/zh-cn/library/bb311040.aspx\nhttps://msdn.microsoft.com/zh-cn/library/bb534675%28v=vs.110%29.aspx?f=255&MSPPError=-2147217396\nhttp://www.cnblogs.com/Ivony/archive/2008/08/18/1270555.html\nhttp://www.cnblogs.com/Ivony/archive/2008/08/28/1278643.html\nhttp://www.cnblogs.com/Ivony/archive/2008/10/14/1309807.html ; \n\n\nLINQ GroupJoin 实现左连接\nvar queryGroup = from person in people // 第一个数据源\n                                join pet in pets //第二个数据源\n                                on person equals pet.Owner into ps //加了into,华丽变身GroupJoin\n                                select new { OwnerName = person.Name, Pet = ps }; //要到得到的数据。 ","slug":"Join","published":1,"updated":"2016-10-15T05:20:24.763Z","comments":1,"photos":[],"link":"","_id":"cj0dyumw9000p6kunhnl1861r","content":"<p>#.NET   Join<br> 连接：内连接、外连接、左连接、右连接。<br>SQL的Join这里就不多说了，<br>今天主要是看一下LINQ的Join用法，以及Enumerable.Join()的用法。</p>\n<p>Join用于连接数据，首先就是数据之间有联系咯。</p>\n<p>先说Enumerable.Join()。<br>参数类型如下：<br>            public static IEnumerable<tresult> Join<touter, tinner,=\"\" tkey,=\"\" tresult=\"\"><br>            (<br>                     this IEnumerable<touter> outer,<br>                    IEnumerable<tinner> inner,<br>                    Func<touter, tkey=\"\"> outerKeySelector,<br>                    Func<tinner, tkey=\"\"> innerKeySelector,<br>                    Func<touter, tinner,=\"\" tresult=\"\"> resultSelector<br>            )<br>类型参数<br>TOuter<br>第一个序列中的元素的类型。<br>TInner<br>第二个序列中的元素的类型。<br>TKey<br>键选择器函数返回的键的类型。<br>TResult<br>结果元素的类型。<br>参数<br>outer<br>类型：System.Collections.Generic.IEnumerable<touter><br>要联接的第一个序列。<br>inner<br>类型：System.Collections.Generic.IEnumerable<tinner><br>要与第一个序列联接的序列。<br>outerKeySelector<br>类型：System.Func<touter, tkey=\"\"><br>用于从第一个序列的每个元素提取联接键的函数。<br>innerKeySelector<br>类型：System.Func<tinner, tkey=\"\"><br>用于从第二个序列的每个元素提取联接键的函数。<br>resultSelector<br>类型：System.Func<touter, tinner,=\"\" tresult=\"\"><br>用于从两个匹配元素创建结果元素的函数。<br>返回值<br>类型：System.Collections.Generic.IEnumerable<tresult><br>IEnumerable&lt;T&gt; that has elements of type TResult that are obtained by performing an inner join on two sequences.” xml:space=”preserve”&gt;一个具有 TResult 类型元素的 IEnumerable<t>，这些元素是通过对两个序列执行内部联接得来的。<br>使用说明<br>在 Visual Basic 和 C# 中，可以在 IEnumerable<touter> 类型的任何对象上将此方法作为实例方法来调用。当使用实例方法语法调用此方法时，请省略第一个参数。有关详细信息，请参阅 扩展方法 (Visual Basic) 或 扩展方法（C# 编程指南）。</touter></t></tresult></touter,></tinner,></touter,></tinner></touter></touter,></tinner,></touter,></tinner></touter></touter,></tresult></p>\n<p>先上一个MSDN的例子。</p>\n<pre><code>     public static void JoinEx1()         \n     {\n       Person magnus = new Person { Name = &quot;Hedlund, Magnus&quot; };\n       Pet barley = new Pet { Name = &quot;Barley&quot;, Owner = terry };\n       Person terry = new Person { Name = &quot;Adams, Terry&quot; };\n       Person charlotte = new Person { Name = &quot;Weiss, \n       Charlotte&quot; };\n       Pet boots = new Pet { Name = &quot;Boots&quot;, Owner = terry };\n       Pet whiskers = new Pet { Name = &quot;Whiskers&quot;, \n       Owner = charlotte};\n       Pet daisy = new Pet { Name = &quot;Daisy&quot;, Owner = magnus };\n\n    List&lt;Person&gt; people = new List&lt;Person&gt; \n    { magnus, terry, charlotte };\n    List&lt;Pet&gt; pets = new List&lt;Pet&gt; \n    { barley, boots, whiskers, daisy };\n\n    // Create a list of Person-Pet pairs where \n    // each element is an anonymous type that contains a\n    // Pet&apos;s name and the name of the Person that owns the Pet.\n    var query =\n        people.Join(\n                    pets,//需要Join的另一个数据源\n          person =&gt; person,//自己用来比较的key， lambda 表达式\n     pet =&gt; pet.Owner,//另一个数据源用来比较的key， lambda 表达式\n(person, pet) =&gt;new { OwnerName = person.Name, Pet = pet.Name } \n               //想要取出来的数据，支持匿名对象， lambda 表达式);\n    foreach (var obj in query)\n    {\n      Console.WriteLine( &quot;{0} - {1}&quot;,obj.OwnerName,obj.Pet);\n    }\n}\n</code></pre><p> LINQ的Join<br>同样是上面的数据，如果换成LINQ的Join，写法如下：<br>            var query = from person in people // 第一个数据源<br>                      join pet in pets            //第二个数据源<br>                      on person equals pet.Owner  //Join条件<br>                      select  new { OwnerName = person.Name, Pet = pet.Name };<br>                      //要到得到的数据。</p>\n<p>上面两种写法得到的结果都是内链接结果，至于左连接、右连接、外连接….<br>等我下次有心情再更新吧，再不走家里的键盘又要坏了。 </p>\n<p>一些资料链接：<br><a href=\"https://msdn.microsoft.com/zh-cn/library/bb311040.aspx\" target=\"_blank\" rel=\"external\">https://msdn.microsoft.com/zh-cn/library/bb311040.aspx</a><br><a href=\"https://msdn.microsoft.com/zh-cn/library/bb534675%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396\" target=\"_blank\" rel=\"external\">https://msdn.microsoft.com/zh-cn/library/bb534675%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396</a><br><a href=\"http://www.cnblogs.com/Ivony/archive/2008/08/18/1270555.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/Ivony/archive/2008/08/18/1270555.html</a><br><a href=\"http://www.cnblogs.com/Ivony/archive/2008/08/28/1278643.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/Ivony/archive/2008/08/28/1278643.html</a><br><a href=\"http://www.cnblogs.com/Ivony/archive/2008/10/14/1309807.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/Ivony/archive/2008/10/14/1309807.html</a> ; </p>\n<p>LINQ GroupJoin 实现左连接<br>var queryGroup = from person in people // 第一个数据源<br>                                join pet in pets //第二个数据源<br>                                on person equals pet.Owner into ps //加了into,华丽变身GroupJoin<br>                                select new { OwnerName = person.Name, Pet = ps }; //要到得到的数据。 </p>\n","excerpt":"","more":"<p>#.NET   Join<br> 连接：内连接、外连接、左连接、右连接。<br>SQL的Join这里就不多说了，<br>今天主要是看一下LINQ的Join用法，以及Enumerable.Join()的用法。</p>\n<p>Join用于连接数据，首先就是数据之间有联系咯。</p>\n<p>先说Enumerable.Join()。<br>参数类型如下：<br>            public static IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult><br>            (<br>                     this IEnumerable<TOuter> outer,<br>                    IEnumerable<TInner> inner,<br>                    Func<TOuter, TKey> outerKeySelector,<br>                    Func<TInner, TKey> innerKeySelector,<br>                    Func<TOuter, TInner, TResult> resultSelector<br>            )<br>类型参数<br>TOuter<br>第一个序列中的元素的类型。<br>TInner<br>第二个序列中的元素的类型。<br>TKey<br>键选择器函数返回的键的类型。<br>TResult<br>结果元素的类型。<br>参数<br>outer<br>类型：System.Collections.Generic.IEnumerable<TOuter><br>要联接的第一个序列。<br>inner<br>类型：System.Collections.Generic.IEnumerable<TInner><br>要与第一个序列联接的序列。<br>outerKeySelector<br>类型：System.Func<TOuter, TKey><br>用于从第一个序列的每个元素提取联接键的函数。<br>innerKeySelector<br>类型：System.Func<TInner, TKey><br>用于从第二个序列的每个元素提取联接键的函数。<br>resultSelector<br>类型：System.Func<TOuter, TInner, TResult><br>用于从两个匹配元素创建结果元素的函数。<br>返回值<br>类型：System.Collections.Generic.IEnumerable<TResult><br>IEnumerable&lt;T&gt; that has elements of type TResult that are obtained by performing an inner join on two sequences.” xml:space=”preserve”&gt;一个具有 TResult 类型元素的 IEnumerable<T>，这些元素是通过对两个序列执行内部联接得来的。<br>使用说明<br>在 Visual Basic 和 C# 中，可以在 IEnumerable<TOuter> 类型的任何对象上将此方法作为实例方法来调用。当使用实例方法语法调用此方法时，请省略第一个参数。有关详细信息，请参阅 扩展方法 (Visual Basic) 或 扩展方法（C# 编程指南）。</p>\n<p>先上一个MSDN的例子。</p>\n<pre><code>     public static void JoinEx1()         \n     {\n       Person magnus = new Person { Name = &quot;Hedlund, Magnus&quot; };\n       Pet barley = new Pet { Name = &quot;Barley&quot;, Owner = terry };\n       Person terry = new Person { Name = &quot;Adams, Terry&quot; };\n       Person charlotte = new Person { Name = &quot;Weiss, \n       Charlotte&quot; };\n       Pet boots = new Pet { Name = &quot;Boots&quot;, Owner = terry };\n       Pet whiskers = new Pet { Name = &quot;Whiskers&quot;, \n       Owner = charlotte};\n       Pet daisy = new Pet { Name = &quot;Daisy&quot;, Owner = magnus };\n\n    List&lt;Person&gt; people = new List&lt;Person&gt; \n    { magnus, terry, charlotte };\n    List&lt;Pet&gt; pets = new List&lt;Pet&gt; \n    { barley, boots, whiskers, daisy };\n\n    // Create a list of Person-Pet pairs where \n    // each element is an anonymous type that contains a\n    // Pet&apos;s name and the name of the Person that owns the Pet.\n    var query =\n        people.Join(\n                    pets,//需要Join的另一个数据源\n          person =&gt; person,//自己用来比较的key， lambda 表达式\n     pet =&gt; pet.Owner,//另一个数据源用来比较的key， lambda 表达式\n(person, pet) =&gt;new { OwnerName = person.Name, Pet = pet.Name } \n               //想要取出来的数据，支持匿名对象， lambda 表达式);\n    foreach (var obj in query)\n    {\n      Console.WriteLine( &quot;{0} - {1}&quot;,obj.OwnerName,obj.Pet);\n    }\n}\n</code></pre><p> LINQ的Join<br>同样是上面的数据，如果换成LINQ的Join，写法如下：<br>            var query = from person in people // 第一个数据源<br>                      join pet in pets            //第二个数据源<br>                      on person equals pet.Owner  //Join条件<br>                      select  new { OwnerName = person.Name, Pet = pet.Name };<br>                      //要到得到的数据。</p>\n<p>上面两种写法得到的结果都是内链接结果，至于左连接、右连接、外连接….<br>等我下次有心情再更新吧，再不走家里的键盘又要坏了。 </p>\n<p>一些资料链接：<br><a href=\"https://msdn.microsoft.com/zh-cn/library/bb311040.aspx\">https://msdn.microsoft.com/zh-cn/library/bb311040.aspx</a><br><a href=\"https://msdn.microsoft.com/zh-cn/library/bb534675%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396\">https://msdn.microsoft.com/zh-cn/library/bb534675%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396</a><br><a href=\"http://www.cnblogs.com/Ivony/archive/2008/08/18/1270555.html\">http://www.cnblogs.com/Ivony/archive/2008/08/18/1270555.html</a><br><a href=\"http://www.cnblogs.com/Ivony/archive/2008/08/28/1278643.html\">http://www.cnblogs.com/Ivony/archive/2008/08/28/1278643.html</a><br><a href=\"http://www.cnblogs.com/Ivony/archive/2008/10/14/1309807.html\">http://www.cnblogs.com/Ivony/archive/2008/10/14/1309807.html</a> ; </p>\n<p>LINQ GroupJoin 实现左连接<br>var queryGroup = from person in people // 第一个数据源<br>                                join pet in pets //第二个数据源<br>                                on person equals pet.Owner into ps //加了into,华丽变身GroupJoin<br>                                select new { OwnerName = person.Name, Pet = ps }; //要到得到的数据。 </p>\n"},{"layout":"post","title":"C#LINQ 优点 总结(转载)","date":"2016-03-14T16:00:00.000Z","_content":"\n\n原文链接：http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html\n\n这几天在读一本LINQ方面的书《Essential LINQ》,在这里和大家分享下。\n\n由于对LINQ的深入总结需要大量的篇幅，因此在这里分成几个部分来讲。\n\n（*我看《Essential LINQ》是英文版的，有些名词不能翻译成正统的中文解释请给予谅解）\n\nLINQ的优点：\n\nLINQ基本有以下七个优点，让我来一一举例说明：\n\n#####1.Integrated：所谓的Integrated（集成化），LINQ是从以下方面体现集成的：\n\n(1):把查询语法融入了C#(VB)这些语言中，让他变成了一种语法。这样就能和C#中的其他语法一样支持：\n\n语句高亮显示，类型检查，允许使用debugger调试\n\n(2):把以前复杂的查询前的工作都集成封装起来，让开发人员侧重于查询。\n\n(3):集成后的语法更加的清晰易懂，可读性较高。\n\n  \n```\n比较： \n//原来的格式\nSqlConnection sqlConn = new SqlConnection(connectionString);>\nsqlConn.Open();\nSqlCommand command = new SqlCommand();\ncommand.Connection = sqlConn;\ncommand.CommandText = \"Select * From Customer\";\nSqlDataReader dataReader = command.ExecuteReader(CommandBehavior.CloseConnection);\n \n//LINQ的格式\nNORTHWNDDataContext dc = new NORTHWNDDataContext();\nvar query = from c in dc.Customers\n            select c;\n```\n\n\n\n#####2.Unitive：所谓Unitive(统一化)就指不管对任何类型外部和内部数据源(对象集合,xlm,数据库数据)都使用统一的查询语法。\n\n使用统一化查询语言的好处在于以下几点：\n\n你不用因为要使用不太熟悉的数据源而花很多精力去了解它，你可以快速简单的使用LINQ语法对起查询。\n由于使用了统一的语法，可以使代码维护变的更加简单。\n以下代码体现了LINQ的统一化：\n```\n//数据源:对象集合\nvar query = from c in GetCustomers()\n            select c;\n \n//数据源:SQL\nvar query1 = from c in dc.Customers\n             select c;\n//数据源:XML\nvar query2 = from c in customers.Descendants(\"Customer\")\n             select c;\n```\n\n         \n#####3.Extensible：所谓Extensible(可扩展)指以下2个方面:\n\n(1).可查询数据源的扩展。 LINQ提供了个LINQ provider model，你可以为LINQ创建或提供provider让LINQ支持更多的数据源。\n\n(2).可扩展查询方法。开发者可以根据自己的需求为LINQ重写和扩展查询方法。\n\n以下是些第三方的LINQ provider：\n\nLINQ Extender, LINQ to JavaScript, LINQ to JSON, LINQ to MySQL, LINQ to Flickr, LINQ to Google\n\n \n\n#####4.Declarative：所谓Declarative(声明式)，简单的来说指的是开发人员只要告诉程序做什么，程序自己判断怎么做。\n\nDeclarative programming(声明式编程)的优点体现在以下2点：\n\n(1).提高了开发速度。因为开发者不用书写大量的代码来具体化执行步骤，只许告诉程序做什么。\n\n(2).提高代码优化空间。因为开发者不用参与干涉对程序执行的具体步骤，这样就提供给编译器更多的空间去优化代码。\n\n举例SQL来说，LINQ生成的SQL语句往往比一对SQL水平一般的开发者能写出更好的SQL语句。\n\n比较Declarative programming 与 Imperative programming：\n```\n//声明式编程\nList<List<int>> lists = new List<List<int>> { new List<int> { 1, 2, 3 }, new List<int> { 4, 5 } };\nvar query = from list in lists\n            from num in list\n            where num % 3 == 0\n            orderby num descending\n            select num;\n \n//命令式编程\nList<int> list1 = new List<int>();\nlist1.Add(1);\nlist1.Add(2);\nlist1.Add(3);\nList<int> list2 = new List<int>();\nlist2.Add(4);\nlist2.Add(5);\nList<List<int>> lists1 = new List<List<int>>();\nlists1.Add(list1);\nlists1.Add(list2);\n \nList<int> newList = new List<int>();\nforeach (var item in lists1)\n      foreach (var num in item)\n        if (num % 3 == 0)\n            newList.Add(num);\nnewList.Reverse();\n\n```\n\n#####5.Hierarchical：所谓Hierarchical(层次化)指使用面向对象的方式抽象数据。\n\nSQL是关系型数据库，它以关系的方式描述数据以数据的联系，但我们的程序设计成面向对象的因此我们在程序里得到的数据库数据往往都是\n\nrectangular grid（平面的显示数据）。但是LINQ通过所谓的O-R Mapping方式，把关系型转换成对象与对象方式描述数据。\n\n这样带来的好处是：开发者能直接以对象的方式去操作数据，对习惯面向对象的开发者来说面向对象模型更易理解。\n\n \n\n#####6.Composable：所谓Composable(可组成)指LINQ可以把一个复杂的查询拆分成多个简单查询。\n\nLINQ返回的结果都是基于接口：IEnumerable<T>，因此能对查询结果继续查询，而且LINQ具有延迟执行的特性因此拆分执行不会影响效率。\n\n优点在于：\n\n(1).方便调试。把复杂的查询拆分成简单的查询，然后逐个调试。\n\n(2).便于代码维护。把代码拆分后能使代码变的更易理解。\n\n以下代码体现了可组成性：\n```\n//以下代码体现了Composable\nList<List<int>> lists = new List<List<int>> { new List<int>\n { 1, 2, 3 }, new List<int> { 4, 5 } };\n \nvar query1 = from list in lists\n             from num in list\n             select num;\n \nvar query2 = from num in query1\n             where num % 3 == 0\n             select num;\n \nvar query3 = from num in query2\n             orderby num descending\n             select num;\n```\n\n \n\n######7.Transformative：所谓Transformative(可转换)指的是LINQ能把一种数据源的内容转换到其他数据源。\n\n方便用户做数据移植。\n\n以下代码体现了转换的特性：\n```\n//把关系型数据转换成XML型\n\tvar query = new XElement(\"Orders\",\n            from c in dc.Customers\n            where c.City == \"Paris\"\n            select new XElement(\"Order\",\n                new XAttribute(\"Address\", c.Address)));\n```\n\n以上就是LINQ的几大优点，很高兴能在这里和大家分享。有任何不足之处请给予补充和纠正，谢谢光临小舍。\n\n//2011/1/28 补充(LINQ TO SQL)\n\n在LINQ TO SQL 方面，如果使用LINQ TO SQL可以有效的防止SQL注入，LINQ TO SQL 会把注入的代码当做无用的参数处理。\n\n\nhttp://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html ","source":"_posts/LINQ-advantage.md","raw":"---\nlayout: post\ntitle: C#LINQ 优点 总结(转载)\ncategory: .net\ndate: 2016-03-15 00:00:00\n---\n\n\n原文链接：http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html\n\n这几天在读一本LINQ方面的书《Essential LINQ》,在这里和大家分享下。\n\n由于对LINQ的深入总结需要大量的篇幅，因此在这里分成几个部分来讲。\n\n（*我看《Essential LINQ》是英文版的，有些名词不能翻译成正统的中文解释请给予谅解）\n\nLINQ的优点：\n\nLINQ基本有以下七个优点，让我来一一举例说明：\n\n#####1.Integrated：所谓的Integrated（集成化），LINQ是从以下方面体现集成的：\n\n(1):把查询语法融入了C#(VB)这些语言中，让他变成了一种语法。这样就能和C#中的其他语法一样支持：\n\n语句高亮显示，类型检查，允许使用debugger调试\n\n(2):把以前复杂的查询前的工作都集成封装起来，让开发人员侧重于查询。\n\n(3):集成后的语法更加的清晰易懂，可读性较高。\n\n  \n```\n比较： \n//原来的格式\nSqlConnection sqlConn = new SqlConnection(connectionString);>\nsqlConn.Open();\nSqlCommand command = new SqlCommand();\ncommand.Connection = sqlConn;\ncommand.CommandText = \"Select * From Customer\";\nSqlDataReader dataReader = command.ExecuteReader(CommandBehavior.CloseConnection);\n \n//LINQ的格式\nNORTHWNDDataContext dc = new NORTHWNDDataContext();\nvar query = from c in dc.Customers\n            select c;\n```\n\n\n\n#####2.Unitive：所谓Unitive(统一化)就指不管对任何类型外部和内部数据源(对象集合,xlm,数据库数据)都使用统一的查询语法。\n\n使用统一化查询语言的好处在于以下几点：\n\n你不用因为要使用不太熟悉的数据源而花很多精力去了解它，你可以快速简单的使用LINQ语法对起查询。\n由于使用了统一的语法，可以使代码维护变的更加简单。\n以下代码体现了LINQ的统一化：\n```\n//数据源:对象集合\nvar query = from c in GetCustomers()\n            select c;\n \n//数据源:SQL\nvar query1 = from c in dc.Customers\n             select c;\n//数据源:XML\nvar query2 = from c in customers.Descendants(\"Customer\")\n             select c;\n```\n\n         \n#####3.Extensible：所谓Extensible(可扩展)指以下2个方面:\n\n(1).可查询数据源的扩展。 LINQ提供了个LINQ provider model，你可以为LINQ创建或提供provider让LINQ支持更多的数据源。\n\n(2).可扩展查询方法。开发者可以根据自己的需求为LINQ重写和扩展查询方法。\n\n以下是些第三方的LINQ provider：\n\nLINQ Extender, LINQ to JavaScript, LINQ to JSON, LINQ to MySQL, LINQ to Flickr, LINQ to Google\n\n \n\n#####4.Declarative：所谓Declarative(声明式)，简单的来说指的是开发人员只要告诉程序做什么，程序自己判断怎么做。\n\nDeclarative programming(声明式编程)的优点体现在以下2点：\n\n(1).提高了开发速度。因为开发者不用书写大量的代码来具体化执行步骤，只许告诉程序做什么。\n\n(2).提高代码优化空间。因为开发者不用参与干涉对程序执行的具体步骤，这样就提供给编译器更多的空间去优化代码。\n\n举例SQL来说，LINQ生成的SQL语句往往比一对SQL水平一般的开发者能写出更好的SQL语句。\n\n比较Declarative programming 与 Imperative programming：\n```\n//声明式编程\nList<List<int>> lists = new List<List<int>> { new List<int> { 1, 2, 3 }, new List<int> { 4, 5 } };\nvar query = from list in lists\n            from num in list\n            where num % 3 == 0\n            orderby num descending\n            select num;\n \n//命令式编程\nList<int> list1 = new List<int>();\nlist1.Add(1);\nlist1.Add(2);\nlist1.Add(3);\nList<int> list2 = new List<int>();\nlist2.Add(4);\nlist2.Add(5);\nList<List<int>> lists1 = new List<List<int>>();\nlists1.Add(list1);\nlists1.Add(list2);\n \nList<int> newList = new List<int>();\nforeach (var item in lists1)\n      foreach (var num in item)\n        if (num % 3 == 0)\n            newList.Add(num);\nnewList.Reverse();\n\n```\n\n#####5.Hierarchical：所谓Hierarchical(层次化)指使用面向对象的方式抽象数据。\n\nSQL是关系型数据库，它以关系的方式描述数据以数据的联系，但我们的程序设计成面向对象的因此我们在程序里得到的数据库数据往往都是\n\nrectangular grid（平面的显示数据）。但是LINQ通过所谓的O-R Mapping方式，把关系型转换成对象与对象方式描述数据。\n\n这样带来的好处是：开发者能直接以对象的方式去操作数据，对习惯面向对象的开发者来说面向对象模型更易理解。\n\n \n\n#####6.Composable：所谓Composable(可组成)指LINQ可以把一个复杂的查询拆分成多个简单查询。\n\nLINQ返回的结果都是基于接口：IEnumerable<T>，因此能对查询结果继续查询，而且LINQ具有延迟执行的特性因此拆分执行不会影响效率。\n\n优点在于：\n\n(1).方便调试。把复杂的查询拆分成简单的查询，然后逐个调试。\n\n(2).便于代码维护。把代码拆分后能使代码变的更易理解。\n\n以下代码体现了可组成性：\n```\n//以下代码体现了Composable\nList<List<int>> lists = new List<List<int>> { new List<int>\n { 1, 2, 3 }, new List<int> { 4, 5 } };\n \nvar query1 = from list in lists\n             from num in list\n             select num;\n \nvar query2 = from num in query1\n             where num % 3 == 0\n             select num;\n \nvar query3 = from num in query2\n             orderby num descending\n             select num;\n```\n\n \n\n######7.Transformative：所谓Transformative(可转换)指的是LINQ能把一种数据源的内容转换到其他数据源。\n\n方便用户做数据移植。\n\n以下代码体现了转换的特性：\n```\n//把关系型数据转换成XML型\n\tvar query = new XElement(\"Orders\",\n            from c in dc.Customers\n            where c.City == \"Paris\"\n            select new XElement(\"Order\",\n                new XAttribute(\"Address\", c.Address)));\n```\n\n以上就是LINQ的几大优点，很高兴能在这里和大家分享。有任何不足之处请给予补充和纠正，谢谢光临小舍。\n\n//2011/1/28 补充(LINQ TO SQL)\n\n在LINQ TO SQL 方面，如果使用LINQ TO SQL可以有效的防止SQL注入，LINQ TO SQL 会把注入的代码当做无用的参数处理。\n\n\nhttp://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html ","slug":"LINQ-advantage","published":1,"updated":"2016-10-15T05:20:24.794Z","comments":1,"photos":[],"link":"","_id":"cj0dyumwc000s6kundsnimt5q","content":"<p>原文链接：<a href=\"http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html</a></p>\n<p>这几天在读一本LINQ方面的书《Essential LINQ》,在这里和大家分享下。</p>\n<p>由于对LINQ的深入总结需要大量的篇幅，因此在这里分成几个部分来讲。</p>\n<p>（*我看《Essential LINQ》是英文版的，有些名词不能翻译成正统的中文解释请给予谅解）</p>\n<p>LINQ的优点：</p>\n<p>LINQ基本有以下七个优点，让我来一一举例说明：</p>\n<p>#####1.Integrated：所谓的Integrated（集成化），LINQ是从以下方面体现集成的：</p>\n<p>(1):把查询语法融入了C#(VB)这些语言中，让他变成了一种语法。这样就能和C#中的其他语法一样支持：</p>\n<p>语句高亮显示，类型检查，允许使用debugger调试</p>\n<p>(2):把以前复杂的查询前的工作都集成封装起来，让开发人员侧重于查询。</p>\n<p>(3):集成后的语法更加的清晰易懂，可读性较高。</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">比较： </div><div class=\"line\"><span class=\"comment\">//原来的格式</span></div><div class=\"line\">SqlConnection sqlConn = <span class=\"keyword\">new</span> SqlConnection(connectionString);&gt;</div><div class=\"line\">sqlConn.Open();</div><div class=\"line\">SqlCommand command = <span class=\"keyword\">new</span> SqlCommand();</div><div class=\"line\">command.Connection = sqlConn;</div><div class=\"line\">command.CommandText = <span class=\"string\">\"Select * From Customer\"</span>;</div><div class=\"line\">SqlDataReader dataReader = command.ExecuteReader(CommandBehavior.CloseConnection);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//LINQ的格式</span></div><div class=\"line\">NORTHWNDDataContext dc = <span class=\"keyword\">new</span> NORTHWNDDataContext();</div><div class=\"line\"><span class=\"keyword\">var</span> query = <span class=\"keyword\">from</span> c <span class=\"keyword\">in</span> dc.Customers</div><div class=\"line\">            <span class=\"keyword\">select</span> c;</div></pre></td></tr></table></figure>\n<p>#####2.Unitive：所谓Unitive(统一化)就指不管对任何类型外部和内部数据源(对象集合,xlm,数据库数据)都使用统一的查询语法。</p>\n<p>使用统一化查询语言的好处在于以下几点：</p>\n<p>你不用因为要使用不太熟悉的数据源而花很多精力去了解它，你可以快速简单的使用LINQ语法对起查询。<br>由于使用了统一的语法，可以使代码维护变的更加简单。<br>以下代码体现了LINQ的统一化：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//数据源:对象集合</span></div><div class=\"line\"><span class=\"keyword\">var</span> query = <span class=\"function\"><span class=\"keyword\">from</span> c <span class=\"keyword\">in</span> <span class=\"title\">GetCustomers</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">            <span class=\"keyword\">select</span> c;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//数据源:SQL</span></div><div class=\"line\"><span class=\"keyword\">var</span> query1 = <span class=\"keyword\">from</span> c <span class=\"keyword\">in</span> dc.Customers</div><div class=\"line\">             <span class=\"keyword\">select</span> c;</div><div class=\"line\"><span class=\"comment\">//数据源:XML</span></div><div class=\"line\"><span class=\"keyword\">var</span> query2 = <span class=\"keyword\">from</span> c <span class=\"keyword\">in</span> customers.Descendants(<span class=\"string\">\"Customer\"</span>)</div><div class=\"line\">             <span class=\"keyword\">select</span> c;</div></pre></td></tr></table></figure></p>\n<p>#####3.Extensible：所谓Extensible(可扩展)指以下2个方面:</p>\n<p>(1).可查询数据源的扩展。 LINQ提供了个LINQ provider model，你可以为LINQ创建或提供provider让LINQ支持更多的数据源。</p>\n<p>(2).可扩展查询方法。开发者可以根据自己的需求为LINQ重写和扩展查询方法。</p>\n<p>以下是些第三方的LINQ provider：</p>\n<p>LINQ Extender, LINQ to JavaScript, LINQ to JSON, LINQ to MySQL, LINQ to Flickr, LINQ to Google</p>\n<p>#####4.Declarative：所谓Declarative(声明式)，简单的来说指的是开发人员只要告诉程序做什么，程序自己判断怎么做。</p>\n<p>Declarative programming(声明式编程)的优点体现在以下2点：</p>\n<p>(1).提高了开发速度。因为开发者不用书写大量的代码来具体化执行步骤，只许告诉程序做什么。</p>\n<p>(2).提高代码优化空间。因为开发者不用参与干涉对程序执行的具体步骤，这样就提供给编译器更多的空间去优化代码。</p>\n<p>举例SQL来说，LINQ生成的SQL语句往往比一对SQL水平一般的开发者能写出更好的SQL语句。</p>\n<p>比较Declarative programming 与 Imperative programming：<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//声明式编程</span></div><div class=\"line\"><span class=\"built_in\">List</span>&lt;<span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt;&gt; lists = <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt;&gt; &#123; <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt; &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> &#125;, <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt; &#123; <span class=\"number\">4</span>, <span class=\"number\">5</span> &#125; &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> query = from list <span class=\"keyword\">in</span> lists</div><div class=\"line\">            from <span class=\"built_in\">num</span> <span class=\"keyword\">in</span> list</div><div class=\"line\">            where <span class=\"built_in\">num</span> % <span class=\"number\">3</span> == <span class=\"number\">0</span></div><div class=\"line\">            orderby <span class=\"built_in\">num</span> descending</div><div class=\"line\">            select <span class=\"built_in\">num</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//命令式编程</span></div><div class=\"line\"><span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt; list1 = <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt;();</div><div class=\"line\">list1.Add(<span class=\"number\">1</span>);</div><div class=\"line\">list1.Add(<span class=\"number\">2</span>);</div><div class=\"line\">list1.Add(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt; list2 = <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt;();</div><div class=\"line\">list2.Add(<span class=\"number\">4</span>);</div><div class=\"line\">list2.Add(<span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"built_in\">List</span>&lt;<span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt;&gt; lists1 = <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt;&gt;();</div><div class=\"line\">lists1.Add(list1);</div><div class=\"line\">lists1.Add(list2);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt; newList = <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt;();</div><div class=\"line\">foreach (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> lists1)</div><div class=\"line\">      foreach (<span class=\"keyword\">var</span> <span class=\"built_in\">num</span> <span class=\"keyword\">in</span> item)</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">num</span> % <span class=\"number\">3</span> == <span class=\"number\">0</span>)</div><div class=\"line\">            newList.Add(<span class=\"built_in\">num</span>);</div><div class=\"line\">newList.Reverse();</div></pre></td></tr></table></figure></p>\n<p>#####5.Hierarchical：所谓Hierarchical(层次化)指使用面向对象的方式抽象数据。</p>\n<p>SQL是关系型数据库，它以关系的方式描述数据以数据的联系，但我们的程序设计成面向对象的因此我们在程序里得到的数据库数据往往都是</p>\n<p>rectangular grid（平面的显示数据）。但是LINQ通过所谓的O-R Mapping方式，把关系型转换成对象与对象方式描述数据。</p>\n<p>这样带来的好处是：开发者能直接以对象的方式去操作数据，对习惯面向对象的开发者来说面向对象模型更易理解。</p>\n<p>#####6.Composable：所谓Composable(可组成)指LINQ可以把一个复杂的查询拆分成多个简单查询。</p>\n<p>LINQ返回的结果都是基于接口：IEnumerable<t>，因此能对查询结果继续查询，而且LINQ具有延迟执行的特性因此拆分执行不会影响效率。</t></p>\n<p>优点在于：</p>\n<p>(1).方便调试。把复杂的查询拆分成简单的查询，然后逐个调试。</p>\n<p>(2).便于代码维护。把代码拆分后能使代码变的更易理解。</p>\n<p>以下代码体现了可组成性：<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//以下代码体现了Composable</span></div><div class=\"line\"><span class=\"built_in\">List</span>&lt;<span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt;&gt; lists = <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt;&gt; &#123; <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt;</div><div class=\"line\"> &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> &#125;, <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt; &#123; <span class=\"number\">4</span>, <span class=\"number\">5</span> &#125; &#125;;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> query1 = from list <span class=\"keyword\">in</span> lists</div><div class=\"line\">             from <span class=\"built_in\">num</span> <span class=\"keyword\">in</span> list</div><div class=\"line\">             select <span class=\"built_in\">num</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> query2 = from <span class=\"built_in\">num</span> <span class=\"keyword\">in</span> query1</div><div class=\"line\">             where <span class=\"built_in\">num</span> % <span class=\"number\">3</span> == <span class=\"number\">0</span></div><div class=\"line\">             select <span class=\"built_in\">num</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> query3 = from <span class=\"built_in\">num</span> <span class=\"keyword\">in</span> query2</div><div class=\"line\">             orderby <span class=\"built_in\">num</span> descending</div><div class=\"line\">             select <span class=\"built_in\">num</span>;</div></pre></td></tr></table></figure></p>\n<p>######7.Transformative：所谓Transformative(可转换)指的是LINQ能把一种数据源的内容转换到其他数据源。</p>\n<p>方便用户做数据移植。</p>\n<p>以下代码体现了转换的特性：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//把关系型数据转换成XML型</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> query = <span class=\"keyword\">new</span> XElement(<span class=\"string\">\"Orders\"</span>,</div><div class=\"line\">            <span class=\"keyword\">from</span> c <span class=\"keyword\">in</span> dc.Customers</div><div class=\"line\">            <span class=\"keyword\">where</span> c.City == <span class=\"string\">\"Paris\"</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">select</span> new <span class=\"title\">XElement</span>(<span class=\"params\"><span class=\"string\">\"Order\"</span>,</span></span></div><div class=\"line\">                new XAttribute(<span class=\"string\">\"Address\"</span>, c.Address)));</div></pre></td></tr></table></figure></p>\n<p>以上就是LINQ的几大优点，很高兴能在这里和大家分享。有任何不足之处请给予补充和纠正，谢谢光临小舍。</p>\n<p>//2011/1/28 补充(LINQ TO SQL)</p>\n<p>在LINQ TO SQL 方面，如果使用LINQ TO SQL可以有效的防止SQL注入，LINQ TO SQL 会把注入的代码当做无用的参数处理。</p>\n<p><a href=\"http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html</a> </p>\n","excerpt":"","more":"<p>原文链接：<a href=\"http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html\">http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html</a></p>\n<p>这几天在读一本LINQ方面的书《Essential LINQ》,在这里和大家分享下。</p>\n<p>由于对LINQ的深入总结需要大量的篇幅，因此在这里分成几个部分来讲。</p>\n<p>（*我看《Essential LINQ》是英文版的，有些名词不能翻译成正统的中文解释请给予谅解）</p>\n<p>LINQ的优点：</p>\n<p>LINQ基本有以下七个优点，让我来一一举例说明：</p>\n<p>#####1.Integrated：所谓的Integrated（集成化），LINQ是从以下方面体现集成的：</p>\n<p>(1):把查询语法融入了C#(VB)这些语言中，让他变成了一种语法。这样就能和C#中的其他语法一样支持：</p>\n<p>语句高亮显示，类型检查，允许使用debugger调试</p>\n<p>(2):把以前复杂的查询前的工作都集成封装起来，让开发人员侧重于查询。</p>\n<p>(3):集成后的语法更加的清晰易懂，可读性较高。</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">比较： </div><div class=\"line\"><span class=\"comment\">//原来的格式</span></div><div class=\"line\">SqlConnection sqlConn = <span class=\"keyword\">new</span> SqlConnection(connectionString);&gt;</div><div class=\"line\">sqlConn.Open();</div><div class=\"line\">SqlCommand command = <span class=\"keyword\">new</span> SqlCommand();</div><div class=\"line\">command.Connection = sqlConn;</div><div class=\"line\">command.CommandText = <span class=\"string\">\"Select * From Customer\"</span>;</div><div class=\"line\">SqlDataReader dataReader = command.ExecuteReader(CommandBehavior.CloseConnection);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//LINQ的格式</span></div><div class=\"line\">NORTHWNDDataContext dc = <span class=\"keyword\">new</span> NORTHWNDDataContext();</div><div class=\"line\"><span class=\"keyword\">var</span> query = <span class=\"keyword\">from</span> c <span class=\"keyword\">in</span> dc.Customers</div><div class=\"line\">            <span class=\"keyword\">select</span> c;</div></pre></td></tr></table></figure>\n<p>#####2.Unitive：所谓Unitive(统一化)就指不管对任何类型外部和内部数据源(对象集合,xlm,数据库数据)都使用统一的查询语法。</p>\n<p>使用统一化查询语言的好处在于以下几点：</p>\n<p>你不用因为要使用不太熟悉的数据源而花很多精力去了解它，你可以快速简单的使用LINQ语法对起查询。<br>由于使用了统一的语法，可以使代码维护变的更加简单。<br>以下代码体现了LINQ的统一化：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//数据源:对象集合</span></div><div class=\"line\"><span class=\"keyword\">var</span> query = <span class=\"function\"><span class=\"keyword\">from</span> c <span class=\"keyword\">in</span> <span class=\"title\">GetCustomers</span>(<span class=\"params\"></span>)</div><div class=\"line\">            <span class=\"keyword\">select</span> c</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//数据源:SQL</span></div><div class=\"line\"><span class=\"keyword\">var</span> query1 = <span class=\"keyword\">from</span> c <span class=\"keyword\">in</span> dc.Customers</div><div class=\"line\">             <span class=\"keyword\">select</span> c;</div><div class=\"line\"><span class=\"comment\">//数据源:XML</span></div><div class=\"line\"><span class=\"keyword\">var</span> query2 = <span class=\"keyword\">from</span> c <span class=\"keyword\">in</span> customers.Descendants(<span class=\"string\">\"Customer\"</span>)</div><div class=\"line\">             <span class=\"keyword\">select</span> c;</div></pre></td></tr></table></figure></p>\n<p>#####3.Extensible：所谓Extensible(可扩展)指以下2个方面:</p>\n<p>(1).可查询数据源的扩展。 LINQ提供了个LINQ provider model，你可以为LINQ创建或提供provider让LINQ支持更多的数据源。</p>\n<p>(2).可扩展查询方法。开发者可以根据自己的需求为LINQ重写和扩展查询方法。</p>\n<p>以下是些第三方的LINQ provider：</p>\n<p>LINQ Extender, LINQ to JavaScript, LINQ to JSON, LINQ to MySQL, LINQ to Flickr, LINQ to Google</p>\n<p>#####4.Declarative：所谓Declarative(声明式)，简单的来说指的是开发人员只要告诉程序做什么，程序自己判断怎么做。</p>\n<p>Declarative programming(声明式编程)的优点体现在以下2点：</p>\n<p>(1).提高了开发速度。因为开发者不用书写大量的代码来具体化执行步骤，只许告诉程序做什么。</p>\n<p>(2).提高代码优化空间。因为开发者不用参与干涉对程序执行的具体步骤，这样就提供给编译器更多的空间去优化代码。</p>\n<p>举例SQL来说，LINQ生成的SQL语句往往比一对SQL水平一般的开发者能写出更好的SQL语句。</p>\n<p>比较Declarative programming 与 Imperative programming：<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//声明式编程</span></div><div class=\"line\"><span class=\"built_in\">List</span>&lt;<span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt;&gt; lists = <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt;&gt; &#123; <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt; &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> &#125;, <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt; &#123; <span class=\"number\">4</span>, <span class=\"number\">5</span> &#125; &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> query = from list <span class=\"keyword\">in</span> lists</div><div class=\"line\">            from <span class=\"built_in\">num</span> <span class=\"keyword\">in</span> list</div><div class=\"line\">            where <span class=\"built_in\">num</span> % <span class=\"number\">3</span> == <span class=\"number\">0</span></div><div class=\"line\">            orderby <span class=\"built_in\">num</span> descending</div><div class=\"line\">            select <span class=\"built_in\">num</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//命令式编程</span></div><div class=\"line\"><span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt; list1 = <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt;();</div><div class=\"line\">list1.Add(<span class=\"number\">1</span>);</div><div class=\"line\">list1.Add(<span class=\"number\">2</span>);</div><div class=\"line\">list1.Add(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt; list2 = <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt;();</div><div class=\"line\">list2.Add(<span class=\"number\">4</span>);</div><div class=\"line\">list2.Add(<span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"built_in\">List</span>&lt;<span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt;&gt; lists1 = <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt;&gt;();</div><div class=\"line\">lists1.Add(list1);</div><div class=\"line\">lists1.Add(list2);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt; newList = <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt;();</div><div class=\"line\">foreach (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> lists1)</div><div class=\"line\">      foreach (<span class=\"keyword\">var</span> <span class=\"built_in\">num</span> <span class=\"keyword\">in</span> item)</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">num</span> % <span class=\"number\">3</span> == <span class=\"number\">0</span>)</div><div class=\"line\">            newList.Add(<span class=\"built_in\">num</span>);</div><div class=\"line\">newList.Reverse();</div></pre></td></tr></table></figure></p>\n<p>#####5.Hierarchical：所谓Hierarchical(层次化)指使用面向对象的方式抽象数据。</p>\n<p>SQL是关系型数据库，它以关系的方式描述数据以数据的联系，但我们的程序设计成面向对象的因此我们在程序里得到的数据库数据往往都是</p>\n<p>rectangular grid（平面的显示数据）。但是LINQ通过所谓的O-R Mapping方式，把关系型转换成对象与对象方式描述数据。</p>\n<p>这样带来的好处是：开发者能直接以对象的方式去操作数据，对习惯面向对象的开发者来说面向对象模型更易理解。</p>\n<p>#####6.Composable：所谓Composable(可组成)指LINQ可以把一个复杂的查询拆分成多个简单查询。</p>\n<p>LINQ返回的结果都是基于接口：IEnumerable<T>，因此能对查询结果继续查询，而且LINQ具有延迟执行的特性因此拆分执行不会影响效率。</p>\n<p>优点在于：</p>\n<p>(1).方便调试。把复杂的查询拆分成简单的查询，然后逐个调试。</p>\n<p>(2).便于代码维护。把代码拆分后能使代码变的更易理解。</p>\n<p>以下代码体现了可组成性：<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//以下代码体现了Composable</span></div><div class=\"line\"><span class=\"built_in\">List</span>&lt;<span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt;&gt; lists = <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt;&gt; &#123; <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt;</div><div class=\"line\"> &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> &#125;, <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt; &#123; <span class=\"number\">4</span>, <span class=\"number\">5</span> &#125; &#125;;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> query1 = from list <span class=\"keyword\">in</span> lists</div><div class=\"line\">             from <span class=\"built_in\">num</span> <span class=\"keyword\">in</span> list</div><div class=\"line\">             select <span class=\"built_in\">num</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> query2 = from <span class=\"built_in\">num</span> <span class=\"keyword\">in</span> query1</div><div class=\"line\">             where <span class=\"built_in\">num</span> % <span class=\"number\">3</span> == <span class=\"number\">0</span></div><div class=\"line\">             select <span class=\"built_in\">num</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> query3 = from <span class=\"built_in\">num</span> <span class=\"keyword\">in</span> query2</div><div class=\"line\">             orderby <span class=\"built_in\">num</span> descending</div><div class=\"line\">             select <span class=\"built_in\">num</span>;</div></pre></td></tr></table></figure></p>\n<p>######7.Transformative：所谓Transformative(可转换)指的是LINQ能把一种数据源的内容转换到其他数据源。</p>\n<p>方便用户做数据移植。</p>\n<p>以下代码体现了转换的特性：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//把关系型数据转换成XML型</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> query = <span class=\"keyword\">new</span> XElement(<span class=\"string\">\"Orders\"</span>,</div><div class=\"line\">            <span class=\"keyword\">from</span> c <span class=\"keyword\">in</span> dc.Customers</div><div class=\"line\">            <span class=\"keyword\">where</span> c.City == <span class=\"string\">\"Paris\"</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">select</span> new <span class=\"title\">XElement</span>(<span class=\"params\"><span class=\"string\">\"Order\"</span>,</div><div class=\"line\">                new XAttribute(<span class=\"string\">\"Address\"</span>, c.Address</span>)))</span>;</div></pre></td></tr></table></figure></p>\n<p>以上就是LINQ的几大优点，很高兴能在这里和大家分享。有任何不足之处请给予补充和纠正，谢谢光临小舍。</p>\n<p>//2011/1/28 补充(LINQ TO SQL)</p>\n<p>在LINQ TO SQL 方面，如果使用LINQ TO SQL可以有效的防止SQL注入，LINQ TO SQL 会把注入的代码当做无用的参数处理。</p>\n<p><a href=\"http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html\">http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html</a> </p>\n"},{"layout":"post","title":"ASP.NET Core 启动方式（Hosting）","date":"2016-07-27T16:00:00.000Z","_content":"\n之前版本的ASP.NET程序必须依赖IIS来启动，而IIS上会为挂载在其中的ASP.NET 注册一个ISAPI filter。每当http请求过来时，IIS则会启动w3wp的worker process来开始整个ASP.NET runtime程序。相信大家都这样的流程都有相应的了解。在.net core之前，ASP.NET的主要场景都是运行在Windows平台的，IIS也就是web server的首选了。虽然也有类似于jexus的linux webserver可用，但是基于mono的.NET 总体还是不够Microsoft 原生的强。\n\n不过到了现在，一切都不同了。\n\n新版ASP.NET Core有了.NET Core的支援后已经开始了它的跨平台之旅了，因此ASP.NET Core的启动方式也得开始重新设计以适应新需求了。\n\n\n### 1、Kestrel 和 IIS platform handler\n\n在 ASP.NET Core 中，整个runtime都是重写过的，所以它和IIS之间的关系也有所改变。而ASP.NET Core为了跨平台，它现在的执行方式就如一般的Console app一样。ASP.NET Core自带一个高性能的I/O组件 - Kestrel，使得它可以不依赖IIS的存在便启动了runtime。不过Kestrel 也只是一个I/O组件，并没有想IIS提供其它的功能来保护和管理ASP.NET 应用程序。ASP.NET Core同样可以通过IIS进行处理。但是如果通过IIS来进行处理的话，这个时候我们便需要一个“中间人”的角色来负责这个功能了。这个“中间人”的名字叫 Http Platform Handler，主要表现在web.config文档中的设置，其中包括启动ASP.NET Core 程序的的路径和名称，需要传入的参数以及一些其他的设置选项。Http Platform Handler的具体设置例子如下：\n```csharp\n<system.webServer>\n    <handlers>\n      <add name=\"httpPlatformHandler\" path=\"*\" verb=\"*\"\n      modules=\"httpPlatformHandler\" resourceType=\"Unspecified\"/>\n    </handlers>\n    <httpPlatform processPath=\"WebApp.exe\" arguments=\"\" \n    stdoutLogEnabled=\"false\" startupTimeLimit=\"3600\"/>\n  </system.webServer>\n\n```\n关于Http Platform Handler的相关资料可以看这个链接：\n[http://www.iis.net/downloads/microsoft/httpplatformhandler](http://www.iis.net/downloads/microsoft/httpplatformhandler)\n\n\n从上面的例子可以看出来，ASP.NET Core编译之后便是一个EXE程序，使得你可以直接运行。因此，当HTTP请求进来时，IIS先接受请求，然后根据你设置的web.config的内容将请求转发给WebApp.exe（你的ASP.NET Core程序），然后WebApp.exe开始执行时便会启动Kestrel，接着这个HTTP请求便进入了ASP.NET Core runtime的世界。这样看来，IIS这时候只是一个简单的proxy/forwarder角色。\n\nPS：在我翻译整理这个文章的时候，世界已经发生了变化：下个版本的asp.net core 将会有全新的IIS module来取代Http Platform Handler。\n\n具体详细资料见：[https://github.com/aspnet/IISIntegration/issues/105](https://github.com/aspnet/IISIntegration/issues/105)\n\n\n\n### 2、Main()\nASP.NET Core和其他的.NET 程序一样拥有一个static void Main(),这是整个runtime的进入点。下面看一个样例：\n```csharp\n public static void Main(string[] args)\n        {\n            var host = new WebHostBuilder()\n                .UseServer(\"Microsoft.AspNetCore.Server.Kestrel\")\n                .UseContentRoot(Directory.GetCurrentDirectory())\n                .UseDefaultConfiguration(args)\n                .UseIISPlatformHandlerUrl()\n                .UseStartup<Startup>()\n                .Build();\n\n            host.Run();\n        }\n```\n\nASP.NET Core host engine 的建立者是 WebHostBuilder．\n\n它实质上是一个了 IWebHostBuilder interface，其中 UseServer() 是用于指定使用什么样的 server。\n\n其中 UseServer() 有一个扩展方法UseServer(string assemblyName)。这样的话我们可以直接传入Kestrel的程序集名称:\"Microsoft.AspNetCore.Server.Kestrel\"。当然，这只是其中一种选项。你也可以自己实现一个自己的 server，只要你的 server 实现了 IServerFactory interface 即可。这样的设计提供了一个很大的弹性空间让我们自行选择hosting server（托管服务）。\n\n### UseContentRoot() \n- 这个扩展方法是让我们指定应用程序的工作目录（working directory），如果我们没有指定的话，则会默认为我们的应用（webapp.exe）所在目录为工作目录。\n\n### UseDefaultConfiguration() \n- 这个扩展方法使得我们在IWebHostBuilder 建立可以传入一些参数，比如 application key, environment name, server factory location, content root path 等等．因此，当我们在运行 WebApp.exe 的时候，同时可以带入我们需要用到的hosting参数（PS：这样的做法就像运行命令行程序时带入参数，多好玩）。这些参数也可以写在appsettings.json里面通过Configuration来读取。\n所以，UseDefaultConfiguration() 也不一定非要存在于 Main() 之中。（？？？个人不是很理解）\n\nPS：原作者原话，\"如果我沒记错的话，在写这个文章的时候，UseDefaultConfiguration() 已经被改为成了UseDefaultHostingConfiguration()．显然这个名称更能清楚明白．\"(？？？个人还没实践)\n\n\n### UseIISPlatofmrHandleUrl() \n- 这个 IWebHostBuilder 的 扩展方法比较特殊。如果你要把 ASP.NET Core 放在 IIS 下，这个扩展方法会读取 IIS http platform handler 的 server port 和 application path，用于作为 ASP.NET Core 的启动位置，如 http://localhost:5000/start．如果你沒用 IIS，这个扩展方法对你来说基本是用不上的．\n\n### UseStartup<>()\n\n- 这是 WebHostBuilder 里相当重要的一个扩展方法。它的方法签名如下：\n\n```csharp\n\npublic static IWebHostBuilder UseStartup<TStartup>\n(this IWebHostBuilder hostBuilder) where TStartup : class\n\n```\n这里你可以很清楚地看到 <> 里面要放的就是一个 class。\n\n在我们这里的范例中，它的名字是 Startup，里面最重要的就是需要定义要使用那些服务(service)以及要使用那些中间件(middleware)。\n\n\n### 3、Startup\n这是一个非常非常重要的class,在ASP.NET Core范例中一般都把它命名成Startup。其实我们把它命名成其他名字也是可以的，或者设定多个Startup。上面的内容可以看到，UseStartup()指定了谁是starup class。然后在Build()便会实例化starup class，之后便执行里面两个重要的方法：ConfigureServices() 和 Configure()。\n\n我们先來看 Startup 的构造函数.\n\n```csharp\n public Startup(IHostingEnvironment env)\n        {\n            // Set up configuration sources.\n            var builder = new ConfigurationBuilder()\n                .AddJsonFile(\"appsettings.json\")\n                .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true)\n                .AddEnvironmentVariables();\n            Configuration = builder.Build().ReloadOnChanged(\"appsettings.json\");\n        }\n```\n\nHost engine 在被执行 Build()时已经知道 startup type 是 Startup class，所以在 Build() 的时候会先创建期示例。在我们这里的是调用Startup类带参数的构造函数。\n\n在我们这个例子中选择的是传入IHostingEnvironment示例，它为我们带来了环境变量（EnvironmentName）。\n\n我们这里主要目的是把Configuration实例化。这是一个蛮重要的基础组件，以后会有文章来说明它。\n\n在这里我们特别说明一下，上面的示例代码中，我们执行了两次 AddJsonFile()，而且第二个json file的参数和第一个的还不太一样。这样的目的是为了让开发者可以把开发环境使用的环境参数和其他环境使用的参数有所区别。比如，你使用的开发环境用的是appsettings.json，这个文件只存在于你的电脑中。另一个文档是appsettings.production.json，这是正式环境使用的参数设定文档。第二個 AddJsonFile() 第二個参数是 true，也就是可能不存在的意思。所以若遇到重复名称参数时，appsettings.production.json 会覆盖 appsettings.json 的內容。这样使得开发环境和生产环境得以区分。\n\n接下来，在 IWebHostBuilder 的 Build()里面会执行 host engine 初始化的程序，其中就会去找Startup class里面的两个方法： ConfigureServices() 和 Configure()。\n\n ConfigureSerivces() 是定义了这个 web application 要使用那些服务，然后将这些服务放在 service container (IServiceCollection) 裡面。如下面的样例：\n \n ```csharp\n \n   public void ConfigureServices(IServiceCollection services)\n        {\n            // add entity framework\n            services.AddEntityFramework()\n                    .AddDbContext<BlogsContext>(o => o.UseSqlServer(Configuration[\"Data1:DefaultConnection:ConnectionString\"]))\n             \n            // Add framework services.\n            services.AddMvc();\n        }\n\n```\n\n它定义了entity framework和mvc两个服务。这里所谓的服务（services）的意思也就是通过它们带入更庞大的程序代码。这听起来好像有点搞笑，但也真的如此。像Entity framework 里面有这么多的代码，一定都需要带入许多定义好的物件或者参数，而不只是一个程序的进去点而已，所以services 的目的就是在这里。\n\n\nConfigure() 主要是定义了中间件（middleware）以及它们的顺序．\n\n```csharp\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\n        {\n            loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\n            loggerFactory.AddDebug();\n\n            app.UseStaticFiles();\n\n            app.UseMvcWithDefaultRoute();\n        }\n\n```\n\n\n### 4、Build 和 Run\n最后，在IHostWebBuilder里最后的两个动作便是：Build and Run. \n\n\n### Build() \n- 这个方法做的工作便是建立 hosting service，把 Startup 中定义的的 services 和 middleware 接收过来，然后确定content root path 和 application name，接着一句前面这些资料再加上Configuration过来的数据来初始化host engine (WebHost.cs)．\n\n### Run() \n- 这个是启动 host engine 的 扩展方法，它在启动之前加入了一个 CancelKeyPress 的事件．因为在 Run() 方法 中传入入了 CancellationTokenSource() ，让我们有一个方法可以随时中断host engine的执行。\n\n目前的做法就用是 CancelKeyPress 事件，所以你可以按下 Ctrl+C  來中止 host engine 的执行．\n\n比较特別的是，这一段中止的文字说明居然是用 hard code，參考如下:\n\nhost.Run(cts.Token, \"Application started. Press Ctrl+C to shut down.\");\n\n不过这样的话，这里你也不能写中文...\n\n本文整理于[https://dotblogs.com.tw/aspnetshare/2016/03/28/20160327](https://dotblogs.com.tw/aspnetshare/2016/03/28/20160327)并已征得作者同意。\n感谢Bruce的分享。\n ","source":"_posts/asp.net-core-startup.md","raw":"---\nlayout: post\ntitle: ASP.NET Core 启动方式（Hosting）\ncategory: .net core\ndate: 2016-07-28 00:00:00\n---\n\n之前版本的ASP.NET程序必须依赖IIS来启动，而IIS上会为挂载在其中的ASP.NET 注册一个ISAPI filter。每当http请求过来时，IIS则会启动w3wp的worker process来开始整个ASP.NET runtime程序。相信大家都这样的流程都有相应的了解。在.net core之前，ASP.NET的主要场景都是运行在Windows平台的，IIS也就是web server的首选了。虽然也有类似于jexus的linux webserver可用，但是基于mono的.NET 总体还是不够Microsoft 原生的强。\n\n不过到了现在，一切都不同了。\n\n新版ASP.NET Core有了.NET Core的支援后已经开始了它的跨平台之旅了，因此ASP.NET Core的启动方式也得开始重新设计以适应新需求了。\n\n\n### 1、Kestrel 和 IIS platform handler\n\n在 ASP.NET Core 中，整个runtime都是重写过的，所以它和IIS之间的关系也有所改变。而ASP.NET Core为了跨平台，它现在的执行方式就如一般的Console app一样。ASP.NET Core自带一个高性能的I/O组件 - Kestrel，使得它可以不依赖IIS的存在便启动了runtime。不过Kestrel 也只是一个I/O组件，并没有想IIS提供其它的功能来保护和管理ASP.NET 应用程序。ASP.NET Core同样可以通过IIS进行处理。但是如果通过IIS来进行处理的话，这个时候我们便需要一个“中间人”的角色来负责这个功能了。这个“中间人”的名字叫 Http Platform Handler，主要表现在web.config文档中的设置，其中包括启动ASP.NET Core 程序的的路径和名称，需要传入的参数以及一些其他的设置选项。Http Platform Handler的具体设置例子如下：\n```csharp\n<system.webServer>\n    <handlers>\n      <add name=\"httpPlatformHandler\" path=\"*\" verb=\"*\"\n      modules=\"httpPlatformHandler\" resourceType=\"Unspecified\"/>\n    </handlers>\n    <httpPlatform processPath=\"WebApp.exe\" arguments=\"\" \n    stdoutLogEnabled=\"false\" startupTimeLimit=\"3600\"/>\n  </system.webServer>\n\n```\n关于Http Platform Handler的相关资料可以看这个链接：\n[http://www.iis.net/downloads/microsoft/httpplatformhandler](http://www.iis.net/downloads/microsoft/httpplatformhandler)\n\n\n从上面的例子可以看出来，ASP.NET Core编译之后便是一个EXE程序，使得你可以直接运行。因此，当HTTP请求进来时，IIS先接受请求，然后根据你设置的web.config的内容将请求转发给WebApp.exe（你的ASP.NET Core程序），然后WebApp.exe开始执行时便会启动Kestrel，接着这个HTTP请求便进入了ASP.NET Core runtime的世界。这样看来，IIS这时候只是一个简单的proxy/forwarder角色。\n\nPS：在我翻译整理这个文章的时候，世界已经发生了变化：下个版本的asp.net core 将会有全新的IIS module来取代Http Platform Handler。\n\n具体详细资料见：[https://github.com/aspnet/IISIntegration/issues/105](https://github.com/aspnet/IISIntegration/issues/105)\n\n\n\n### 2、Main()\nASP.NET Core和其他的.NET 程序一样拥有一个static void Main(),这是整个runtime的进入点。下面看一个样例：\n```csharp\n public static void Main(string[] args)\n        {\n            var host = new WebHostBuilder()\n                .UseServer(\"Microsoft.AspNetCore.Server.Kestrel\")\n                .UseContentRoot(Directory.GetCurrentDirectory())\n                .UseDefaultConfiguration(args)\n                .UseIISPlatformHandlerUrl()\n                .UseStartup<Startup>()\n                .Build();\n\n            host.Run();\n        }\n```\n\nASP.NET Core host engine 的建立者是 WebHostBuilder．\n\n它实质上是一个了 IWebHostBuilder interface，其中 UseServer() 是用于指定使用什么样的 server。\n\n其中 UseServer() 有一个扩展方法UseServer(string assemblyName)。这样的话我们可以直接传入Kestrel的程序集名称:\"Microsoft.AspNetCore.Server.Kestrel\"。当然，这只是其中一种选项。你也可以自己实现一个自己的 server，只要你的 server 实现了 IServerFactory interface 即可。这样的设计提供了一个很大的弹性空间让我们自行选择hosting server（托管服务）。\n\n### UseContentRoot() \n- 这个扩展方法是让我们指定应用程序的工作目录（working directory），如果我们没有指定的话，则会默认为我们的应用（webapp.exe）所在目录为工作目录。\n\n### UseDefaultConfiguration() \n- 这个扩展方法使得我们在IWebHostBuilder 建立可以传入一些参数，比如 application key, environment name, server factory location, content root path 等等．因此，当我们在运行 WebApp.exe 的时候，同时可以带入我们需要用到的hosting参数（PS：这样的做法就像运行命令行程序时带入参数，多好玩）。这些参数也可以写在appsettings.json里面通过Configuration来读取。\n所以，UseDefaultConfiguration() 也不一定非要存在于 Main() 之中。（？？？个人不是很理解）\n\nPS：原作者原话，\"如果我沒记错的话，在写这个文章的时候，UseDefaultConfiguration() 已经被改为成了UseDefaultHostingConfiguration()．显然这个名称更能清楚明白．\"(？？？个人还没实践)\n\n\n### UseIISPlatofmrHandleUrl() \n- 这个 IWebHostBuilder 的 扩展方法比较特殊。如果你要把 ASP.NET Core 放在 IIS 下，这个扩展方法会读取 IIS http platform handler 的 server port 和 application path，用于作为 ASP.NET Core 的启动位置，如 http://localhost:5000/start．如果你沒用 IIS，这个扩展方法对你来说基本是用不上的．\n\n### UseStartup<>()\n\n- 这是 WebHostBuilder 里相当重要的一个扩展方法。它的方法签名如下：\n\n```csharp\n\npublic static IWebHostBuilder UseStartup<TStartup>\n(this IWebHostBuilder hostBuilder) where TStartup : class\n\n```\n这里你可以很清楚地看到 <> 里面要放的就是一个 class。\n\n在我们这里的范例中，它的名字是 Startup，里面最重要的就是需要定义要使用那些服务(service)以及要使用那些中间件(middleware)。\n\n\n### 3、Startup\n这是一个非常非常重要的class,在ASP.NET Core范例中一般都把它命名成Startup。其实我们把它命名成其他名字也是可以的，或者设定多个Startup。上面的内容可以看到，UseStartup()指定了谁是starup class。然后在Build()便会实例化starup class，之后便执行里面两个重要的方法：ConfigureServices() 和 Configure()。\n\n我们先來看 Startup 的构造函数.\n\n```csharp\n public Startup(IHostingEnvironment env)\n        {\n            // Set up configuration sources.\n            var builder = new ConfigurationBuilder()\n                .AddJsonFile(\"appsettings.json\")\n                .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true)\n                .AddEnvironmentVariables();\n            Configuration = builder.Build().ReloadOnChanged(\"appsettings.json\");\n        }\n```\n\nHost engine 在被执行 Build()时已经知道 startup type 是 Startup class，所以在 Build() 的时候会先创建期示例。在我们这里的是调用Startup类带参数的构造函数。\n\n在我们这个例子中选择的是传入IHostingEnvironment示例，它为我们带来了环境变量（EnvironmentName）。\n\n我们这里主要目的是把Configuration实例化。这是一个蛮重要的基础组件，以后会有文章来说明它。\n\n在这里我们特别说明一下，上面的示例代码中，我们执行了两次 AddJsonFile()，而且第二个json file的参数和第一个的还不太一样。这样的目的是为了让开发者可以把开发环境使用的环境参数和其他环境使用的参数有所区别。比如，你使用的开发环境用的是appsettings.json，这个文件只存在于你的电脑中。另一个文档是appsettings.production.json，这是正式环境使用的参数设定文档。第二個 AddJsonFile() 第二個参数是 true，也就是可能不存在的意思。所以若遇到重复名称参数时，appsettings.production.json 会覆盖 appsettings.json 的內容。这样使得开发环境和生产环境得以区分。\n\n接下来，在 IWebHostBuilder 的 Build()里面会执行 host engine 初始化的程序，其中就会去找Startup class里面的两个方法： ConfigureServices() 和 Configure()。\n\n ConfigureSerivces() 是定义了这个 web application 要使用那些服务，然后将这些服务放在 service container (IServiceCollection) 裡面。如下面的样例：\n \n ```csharp\n \n   public void ConfigureServices(IServiceCollection services)\n        {\n            // add entity framework\n            services.AddEntityFramework()\n                    .AddDbContext<BlogsContext>(o => o.UseSqlServer(Configuration[\"Data1:DefaultConnection:ConnectionString\"]))\n             \n            // Add framework services.\n            services.AddMvc();\n        }\n\n```\n\n它定义了entity framework和mvc两个服务。这里所谓的服务（services）的意思也就是通过它们带入更庞大的程序代码。这听起来好像有点搞笑，但也真的如此。像Entity framework 里面有这么多的代码，一定都需要带入许多定义好的物件或者参数，而不只是一个程序的进去点而已，所以services 的目的就是在这里。\n\n\nConfigure() 主要是定义了中间件（middleware）以及它们的顺序．\n\n```csharp\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\n        {\n            loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\n            loggerFactory.AddDebug();\n\n            app.UseStaticFiles();\n\n            app.UseMvcWithDefaultRoute();\n        }\n\n```\n\n\n### 4、Build 和 Run\n最后，在IHostWebBuilder里最后的两个动作便是：Build and Run. \n\n\n### Build() \n- 这个方法做的工作便是建立 hosting service，把 Startup 中定义的的 services 和 middleware 接收过来，然后确定content root path 和 application name，接着一句前面这些资料再加上Configuration过来的数据来初始化host engine (WebHost.cs)．\n\n### Run() \n- 这个是启动 host engine 的 扩展方法，它在启动之前加入了一个 CancelKeyPress 的事件．因为在 Run() 方法 中传入入了 CancellationTokenSource() ，让我们有一个方法可以随时中断host engine的执行。\n\n目前的做法就用是 CancelKeyPress 事件，所以你可以按下 Ctrl+C  來中止 host engine 的执行．\n\n比较特別的是，这一段中止的文字说明居然是用 hard code，參考如下:\n\nhost.Run(cts.Token, \"Application started. Press Ctrl+C to shut down.\");\n\n不过这样的话，这里你也不能写中文...\n\n本文整理于[https://dotblogs.com.tw/aspnetshare/2016/03/28/20160327](https://dotblogs.com.tw/aspnetshare/2016/03/28/20160327)并已征得作者同意。\n感谢Bruce的分享。\n ","slug":"asp.net-core-startup","published":1,"updated":"2016-10-15T05:20:24.829Z","comments":1,"photos":[],"link":"","_id":"cj0dyumwi000u6kun1gvt52dt","content":"<p>之前版本的ASP.NET程序必须依赖IIS来启动，而IIS上会为挂载在其中的ASP.NET 注册一个ISAPI filter。每当http请求过来时，IIS则会启动w3wp的worker process来开始整个ASP.NET runtime程序。相信大家都这样的流程都有相应的了解。在.net core之前，ASP.NET的主要场景都是运行在Windows平台的，IIS也就是web server的首选了。虽然也有类似于jexus的linux webserver可用，但是基于mono的.NET 总体还是不够Microsoft 原生的强。</p>\n<p>不过到了现在，一切都不同了。</p>\n<p>新版ASP.NET Core有了.NET Core的支援后已经开始了它的跨平台之旅了，因此ASP.NET Core的启动方式也得开始重新设计以适应新需求了。</p>\n<h3 id=\"1、Kestrel-和-IIS-platform-handler\"><a href=\"#1、Kestrel-和-IIS-platform-handler\" class=\"headerlink\" title=\"1、Kestrel 和 IIS platform handler\"></a>1、Kestrel 和 IIS platform handler</h3><p>在 ASP.NET Core 中，整个runtime都是重写过的，所以它和IIS之间的关系也有所改变。而ASP.NET Core为了跨平台，它现在的执行方式就如一般的Console app一样。ASP.NET Core自带一个高性能的I/O组件 - Kestrel，使得它可以不依赖IIS的存在便启动了runtime。不过Kestrel 也只是一个I/O组件，并没有想IIS提供其它的功能来保护和管理ASP.NET 应用程序。ASP.NET Core同样可以通过IIS进行处理。但是如果通过IIS来进行处理的话，这个时候我们便需要一个“中间人”的角色来负责这个功能了。这个“中间人”的名字叫 Http Platform Handler，主要表现在web.config文档中的设置，其中包括启动ASP.NET Core 程序的的路径和名称，需要传入的参数以及一些其他的设置选项。Http Platform Handler的具体设置例子如下：<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;system.webServer&gt;</div><div class=\"line\">    &lt;handlers&gt;</div><div class=\"line\">      &lt;add name=<span class=\"string\">\"httpPlatformHandler\"</span> path=<span class=\"string\">\"*\"</span> verb=<span class=\"string\">\"*\"</span></div><div class=\"line\">      modules=<span class=\"string\">\"httpPlatformHandler\"</span> resourceType=<span class=\"string\">\"Unspecified\"</span>/&gt;</div><div class=\"line\">    &lt;/handlers&gt;</div><div class=\"line\">    &lt;httpPlatform processPath=<span class=\"string\">\"WebApp.exe\"</span> arguments=<span class=\"string\">\"\"</span> </div><div class=\"line\">    stdoutLogEnabled=<span class=\"string\">\"false\"</span> startupTimeLimit=<span class=\"string\">\"3600\"</span>/&gt;</div><div class=\"line\">  &lt;/system.webServer&gt;</div></pre></td></tr></table></figure></p>\n<p>关于Http Platform Handler的相关资料可以看这个链接：<br><a href=\"http://www.iis.net/downloads/microsoft/httpplatformhandler\" target=\"_blank\" rel=\"external\">http://www.iis.net/downloads/microsoft/httpplatformhandler</a></p>\n<p>从上面的例子可以看出来，ASP.NET Core编译之后便是一个EXE程序，使得你可以直接运行。因此，当HTTP请求进来时，IIS先接受请求，然后根据你设置的web.config的内容将请求转发给WebApp.exe（你的ASP.NET Core程序），然后WebApp.exe开始执行时便会启动Kestrel，接着这个HTTP请求便进入了ASP.NET Core runtime的世界。这样看来，IIS这时候只是一个简单的proxy/forwarder角色。</p>\n<p>PS：在我翻译整理这个文章的时候，世界已经发生了变化：下个版本的asp.net core 将会有全新的IIS module来取代Http Platform Handler。</p>\n<p>具体详细资料见：<a href=\"https://github.com/aspnet/IISIntegration/issues/105\" target=\"_blank\" rel=\"external\">https://github.com/aspnet/IISIntegration/issues/105</a></p>\n<h3 id=\"2、Main\"><a href=\"#2、Main\" class=\"headerlink\" title=\"2、Main()\"></a>2、Main()</h3><p>ASP.NET Core和其他的.NET 程序一样拥有一个static void Main(),这是整个runtime的进入点。下面看一个样例：<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></div><div class=\"line\">       &#123;</div><div class=\"line\">           <span class=\"keyword\">var</span> host = <span class=\"keyword\">new</span> WebHostBuilder()</div><div class=\"line\">               .UseServer(<span class=\"string\">\"Microsoft.AspNetCore.Server.Kestrel\"</span>)</div><div class=\"line\">               .UseContentRoot(Directory.GetCurrentDirectory())</div><div class=\"line\">               .UseDefaultConfiguration(args)</div><div class=\"line\">               .UseIISPlatformHandlerUrl()</div><div class=\"line\">               .UseStartup&lt;Startup&gt;()</div><div class=\"line\">               .Build();</div><div class=\"line\"></div><div class=\"line\">           host.Run();</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure></p>\n<p>ASP.NET Core host engine 的建立者是 WebHostBuilder．</p>\n<p>它实质上是一个了 IWebHostBuilder interface，其中 UseServer() 是用于指定使用什么样的 server。</p>\n<p>其中 UseServer() 有一个扩展方法UseServer(string assemblyName)。这样的话我们可以直接传入Kestrel的程序集名称:”Microsoft.AspNetCore.Server.Kestrel”。当然，这只是其中一种选项。你也可以自己实现一个自己的 server，只要你的 server 实现了 IServerFactory interface 即可。这样的设计提供了一个很大的弹性空间让我们自行选择hosting server（托管服务）。</p>\n<h3 id=\"UseContentRoot\"><a href=\"#UseContentRoot\" class=\"headerlink\" title=\"UseContentRoot()\"></a>UseContentRoot()</h3><ul>\n<li>这个扩展方法是让我们指定应用程序的工作目录（working directory），如果我们没有指定的话，则会默认为我们的应用（webapp.exe）所在目录为工作目录。</li>\n</ul>\n<h3 id=\"UseDefaultConfiguration\"><a href=\"#UseDefaultConfiguration\" class=\"headerlink\" title=\"UseDefaultConfiguration()\"></a>UseDefaultConfiguration()</h3><ul>\n<li>这个扩展方法使得我们在IWebHostBuilder 建立可以传入一些参数，比如 application key, environment name, server factory location, content root path 等等．因此，当我们在运行 WebApp.exe 的时候，同时可以带入我们需要用到的hosting参数（PS：这样的做法就像运行命令行程序时带入参数，多好玩）。这些参数也可以写在appsettings.json里面通过Configuration来读取。<br>所以，UseDefaultConfiguration() 也不一定非要存在于 Main() 之中。（？？？个人不是很理解）</li>\n</ul>\n<p>PS：原作者原话，”如果我沒记错的话，在写这个文章的时候，UseDefaultConfiguration() 已经被改为成了UseDefaultHostingConfiguration()．显然这个名称更能清楚明白．”(？？？个人还没实践)</p>\n<h3 id=\"UseIISPlatofmrHandleUrl\"><a href=\"#UseIISPlatofmrHandleUrl\" class=\"headerlink\" title=\"UseIISPlatofmrHandleUrl()\"></a>UseIISPlatofmrHandleUrl()</h3><ul>\n<li>这个 IWebHostBuilder 的 扩展方法比较特殊。如果你要把 ASP.NET Core 放在 IIS 下，这个扩展方法会读取 IIS http platform handler 的 server port 和 application path，用于作为 ASP.NET Core 的启动位置，如 <a href=\"http://localhost:5000/start．如果你沒用\" target=\"_blank\" rel=\"external\">http://localhost:5000/start．如果你沒用</a> IIS，这个扩展方法对你来说基本是用不上的．</li>\n</ul>\n<h3 id=\"UseStartup-lt-gt\"><a href=\"#UseStartup-lt-gt\" class=\"headerlink\" title=\"UseStartup&lt;&gt;()\"></a>UseStartup&lt;&gt;()</h3><ul>\n<li>这是 WebHostBuilder 里相当重要的一个扩展方法。它的方法签名如下：</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IWebHostBuilder UseStartup&lt;TStartup&gt;</div><div class=\"line\">(<span class=\"keyword\">this</span> IWebHostBuilder hostBuilder) <span class=\"keyword\">where</span> TStartup : <span class=\"keyword\">class</span></div></pre></td></tr></table></figure>\n<p>这里你可以很清楚地看到 &lt;&gt; 里面要放的就是一个 class。</p>\n<p>在我们这里的范例中，它的名字是 Startup，里面最重要的就是需要定义要使用那些服务(service)以及要使用那些中间件(middleware)。</p>\n<h3 id=\"3、Startup\"><a href=\"#3、Startup\" class=\"headerlink\" title=\"3、Startup\"></a>3、Startup</h3><p>这是一个非常非常重要的class,在ASP.NET Core范例中一般都把它命名成Startup。其实我们把它命名成其他名字也是可以的，或者设定多个Startup。上面的内容可以看到，UseStartup()指定了谁是starup class。然后在Build()便会实例化starup class，之后便执行里面两个重要的方法：ConfigureServices() 和 Configure()。</p>\n<p>我们先來看 Startup 的构造函数.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Startup</span>(<span class=\"params\">IHostingEnvironment env</span>)</span></div><div class=\"line\">       &#123;</div><div class=\"line\">           <span class=\"comment\">// Set up configuration sources.</span></div><div class=\"line\">           <span class=\"keyword\">var</span> builder = <span class=\"keyword\">new</span> ConfigurationBuilder()</div><div class=\"line\">               .AddJsonFile(<span class=\"string\">\"appsettings.json\"</span>)</div><div class=\"line\">               .AddJsonFile(<span class=\"string\">$\"appsettings.<span class=\"subst\">&#123;env.EnvironmentName&#125;</span>.json\"</span>, optional: <span class=\"literal\">true</span>)</div><div class=\"line\">               .AddEnvironmentVariables();</div><div class=\"line\">           Configuration = builder.Build().ReloadOnChanged(<span class=\"string\">\"appsettings.json\"</span>);</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n<p>Host engine 在被执行 Build()时已经知道 startup type 是 Startup class，所以在 Build() 的时候会先创建期示例。在我们这里的是调用Startup类带参数的构造函数。</p>\n<p>在我们这个例子中选择的是传入IHostingEnvironment示例，它为我们带来了环境变量（EnvironmentName）。</p>\n<p>我们这里主要目的是把Configuration实例化。这是一个蛮重要的基础组件，以后会有文章来说明它。</p>\n<p>在这里我们特别说明一下，上面的示例代码中，我们执行了两次 AddJsonFile()，而且第二个json file的参数和第一个的还不太一样。这样的目的是为了让开发者可以把开发环境使用的环境参数和其他环境使用的参数有所区别。比如，你使用的开发环境用的是appsettings.json，这个文件只存在于你的电脑中。另一个文档是appsettings.production.json，这是正式环境使用的参数设定文档。第二個 AddJsonFile() 第二個参数是 true，也就是可能不存在的意思。所以若遇到重复名称参数时，appsettings.production.json 会覆盖 appsettings.json 的內容。这样使得开发环境和生产环境得以区分。</p>\n<p>接下来，在 IWebHostBuilder 的 Build()里面会执行 host engine 初始化的程序，其中就会去找Startup class里面的两个方法： ConfigureServices() 和 Configure()。</p>\n<p> ConfigureSerivces() 是定义了这个 web application 要使用那些服务，然后将这些服务放在 service container (IServiceCollection) 裡面。如下面的样例：</p>\n <figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></div><div class=\"line\">     &#123;</div><div class=\"line\">         <span class=\"comment\">// add entity framework</span></div><div class=\"line\">         services.AddEntityFramework()</div><div class=\"line\">                 .AddDbContext&lt;BlogsContext&gt;(o =&gt; o.UseSqlServer(Configuration[<span class=\"string\">\"Data1:DefaultConnection:ConnectionString\"</span>]))</div><div class=\"line\">          </div><div class=\"line\">         <span class=\"comment\">// Add framework services.</span></div><div class=\"line\">         services.AddMvc();</div><div class=\"line\">     &#125;</div></pre></td></tr></table></figure>\n<p>它定义了entity framework和mvc两个服务。这里所谓的服务（services）的意思也就是通过它们带入更庞大的程序代码。这听起来好像有点搞笑，但也真的如此。像Entity framework 里面有这么多的代码，一定都需要带入许多定义好的物件或者参数，而不只是一个程序的进去点而已，所以services 的目的就是在这里。</p>\n<p>Configure() 主要是定义了中间件（middleware）以及它们的顺序．</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    loggerFactory.AddConsole(Configuration.GetSection(<span class=\"string\">\"Logging\"</span>));</div><div class=\"line\">    loggerFactory.AddDebug();</div><div class=\"line\"></div><div class=\"line\">    app.UseStaticFiles();</div><div class=\"line\"></div><div class=\"line\">    app.UseMvcWithDefaultRoute();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"4、Build-和-Run\"><a href=\"#4、Build-和-Run\" class=\"headerlink\" title=\"4、Build 和 Run\"></a>4、Build 和 Run</h3><p>最后，在IHostWebBuilder里最后的两个动作便是：Build and Run. </p>\n<h3 id=\"Build\"><a href=\"#Build\" class=\"headerlink\" title=\"Build()\"></a>Build()</h3><ul>\n<li>这个方法做的工作便是建立 hosting service，把 Startup 中定义的的 services 和 middleware 接收过来，然后确定content root path 和 application name，接着一句前面这些资料再加上Configuration过来的数据来初始化host engine (WebHost.cs)．</li>\n</ul>\n<h3 id=\"Run\"><a href=\"#Run\" class=\"headerlink\" title=\"Run()\"></a>Run()</h3><ul>\n<li>这个是启动 host engine 的 扩展方法，它在启动之前加入了一个 CancelKeyPress 的事件．因为在 Run() 方法 中传入入了 CancellationTokenSource() ，让我们有一个方法可以随时中断host engine的执行。</li>\n</ul>\n<p>目前的做法就用是 CancelKeyPress 事件，所以你可以按下 Ctrl+C  來中止 host engine 的执行．</p>\n<p>比较特別的是，这一段中止的文字说明居然是用 hard code，參考如下:</p>\n<p>host.Run(cts.Token, “Application started. Press Ctrl+C to shut down.”);</p>\n<p>不过这样的话，这里你也不能写中文…</p>\n<p>本文整理于<a href=\"https://dotblogs.com.tw/aspnetshare/2016/03/28/20160327\" target=\"_blank\" rel=\"external\">https://dotblogs.com.tw/aspnetshare/2016/03/28/20160327</a>并已征得作者同意。<br>感谢Bruce的分享。</p>\n","excerpt":"","more":"<p>之前版本的ASP.NET程序必须依赖IIS来启动，而IIS上会为挂载在其中的ASP.NET 注册一个ISAPI filter。每当http请求过来时，IIS则会启动w3wp的worker process来开始整个ASP.NET runtime程序。相信大家都这样的流程都有相应的了解。在.net core之前，ASP.NET的主要场景都是运行在Windows平台的，IIS也就是web server的首选了。虽然也有类似于jexus的linux webserver可用，但是基于mono的.NET 总体还是不够Microsoft 原生的强。</p>\n<p>不过到了现在，一切都不同了。</p>\n<p>新版ASP.NET Core有了.NET Core的支援后已经开始了它的跨平台之旅了，因此ASP.NET Core的启动方式也得开始重新设计以适应新需求了。</p>\n<h3 id=\"1、Kestrel-和-IIS-platform-handler\"><a href=\"#1、Kestrel-和-IIS-platform-handler\" class=\"headerlink\" title=\"1、Kestrel 和 IIS platform handler\"></a>1、Kestrel 和 IIS platform handler</h3><p>在 ASP.NET Core 中，整个runtime都是重写过的，所以它和IIS之间的关系也有所改变。而ASP.NET Core为了跨平台，它现在的执行方式就如一般的Console app一样。ASP.NET Core自带一个高性能的I/O组件 - Kestrel，使得它可以不依赖IIS的存在便启动了runtime。不过Kestrel 也只是一个I/O组件，并没有想IIS提供其它的功能来保护和管理ASP.NET 应用程序。ASP.NET Core同样可以通过IIS进行处理。但是如果通过IIS来进行处理的话，这个时候我们便需要一个“中间人”的角色来负责这个功能了。这个“中间人”的名字叫 Http Platform Handler，主要表现在web.config文档中的设置，其中包括启动ASP.NET Core 程序的的路径和名称，需要传入的参数以及一些其他的设置选项。Http Platform Handler的具体设置例子如下：<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;system.webServer&gt;</div><div class=\"line\">    &lt;handlers&gt;</div><div class=\"line\">      &lt;add name=<span class=\"string\">\"httpPlatformHandler\"</span> path=<span class=\"string\">\"*\"</span> verb=<span class=\"string\">\"*\"</span></div><div class=\"line\">      modules=<span class=\"string\">\"httpPlatformHandler\"</span> resourceType=<span class=\"string\">\"Unspecified\"</span>/&gt;</div><div class=\"line\">    &lt;/handlers&gt;</div><div class=\"line\">    &lt;httpPlatform processPath=<span class=\"string\">\"WebApp.exe\"</span> arguments=<span class=\"string\">\"\"</span> </div><div class=\"line\">    stdoutLogEnabled=<span class=\"string\">\"false\"</span> startupTimeLimit=<span class=\"string\">\"3600\"</span>/&gt;</div><div class=\"line\">  &lt;/system.webServer&gt;</div></pre></td></tr></table></figure></p>\n<p>关于Http Platform Handler的相关资料可以看这个链接：<br><a href=\"http://www.iis.net/downloads/microsoft/httpplatformhandler\">http://www.iis.net/downloads/microsoft/httpplatformhandler</a></p>\n<p>从上面的例子可以看出来，ASP.NET Core编译之后便是一个EXE程序，使得你可以直接运行。因此，当HTTP请求进来时，IIS先接受请求，然后根据你设置的web.config的内容将请求转发给WebApp.exe（你的ASP.NET Core程序），然后WebApp.exe开始执行时便会启动Kestrel，接着这个HTTP请求便进入了ASP.NET Core runtime的世界。这样看来，IIS这时候只是一个简单的proxy/forwarder角色。</p>\n<p>PS：在我翻译整理这个文章的时候，世界已经发生了变化：下个版本的asp.net core 将会有全新的IIS module来取代Http Platform Handler。</p>\n<p>具体详细资料见：<a href=\"https://github.com/aspnet/IISIntegration/issues/105\">https://github.com/aspnet/IISIntegration/issues/105</a></p>\n<h3 id=\"2、Main\"><a href=\"#2、Main\" class=\"headerlink\" title=\"2、Main()\"></a>2、Main()</h3><p>ASP.NET Core和其他的.NET 程序一样拥有一个static void Main(),这是整个runtime的进入点。下面看一个样例：<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</div><div class=\"line\">       </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">var</span> host = <span class=\"keyword\">new</span> WebHostBuilder()</div><div class=\"line\">               .UseServer(<span class=\"string\">\"Microsoft.AspNetCore.Server.Kestrel\"</span>)</div><div class=\"line\">               .UseContentRoot(Directory.GetCurrentDirectory())</div><div class=\"line\">               .UseDefaultConfiguration(args)</div><div class=\"line\">               .UseIISPlatformHandlerUrl()</div><div class=\"line\">               .UseStartup&lt;Startup&gt;()</div><div class=\"line\">               .Build();</div><div class=\"line\"></div><div class=\"line\">           host.Run();</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure></p>\n<p>ASP.NET Core host engine 的建立者是 WebHostBuilder．</p>\n<p>它实质上是一个了 IWebHostBuilder interface，其中 UseServer() 是用于指定使用什么样的 server。</p>\n<p>其中 UseServer() 有一个扩展方法UseServer(string assemblyName)。这样的话我们可以直接传入Kestrel的程序集名称:”Microsoft.AspNetCore.Server.Kestrel”。当然，这只是其中一种选项。你也可以自己实现一个自己的 server，只要你的 server 实现了 IServerFactory interface 即可。这样的设计提供了一个很大的弹性空间让我们自行选择hosting server（托管服务）。</p>\n<h3 id=\"UseContentRoot\"><a href=\"#UseContentRoot\" class=\"headerlink\" title=\"UseContentRoot()\"></a>UseContentRoot()</h3><ul>\n<li>这个扩展方法是让我们指定应用程序的工作目录（working directory），如果我们没有指定的话，则会默认为我们的应用（webapp.exe）所在目录为工作目录。</li>\n</ul>\n<h3 id=\"UseDefaultConfiguration\"><a href=\"#UseDefaultConfiguration\" class=\"headerlink\" title=\"UseDefaultConfiguration()\"></a>UseDefaultConfiguration()</h3><ul>\n<li>这个扩展方法使得我们在IWebHostBuilder 建立可以传入一些参数，比如 application key, environment name, server factory location, content root path 等等．因此，当我们在运行 WebApp.exe 的时候，同时可以带入我们需要用到的hosting参数（PS：这样的做法就像运行命令行程序时带入参数，多好玩）。这些参数也可以写在appsettings.json里面通过Configuration来读取。<br>所以，UseDefaultConfiguration() 也不一定非要存在于 Main() 之中。（？？？个人不是很理解）</li>\n</ul>\n<p>PS：原作者原话，”如果我沒记错的话，在写这个文章的时候，UseDefaultConfiguration() 已经被改为成了UseDefaultHostingConfiguration()．显然这个名称更能清楚明白．”(？？？个人还没实践)</p>\n<h3 id=\"UseIISPlatofmrHandleUrl\"><a href=\"#UseIISPlatofmrHandleUrl\" class=\"headerlink\" title=\"UseIISPlatofmrHandleUrl()\"></a>UseIISPlatofmrHandleUrl()</h3><ul>\n<li>这个 IWebHostBuilder 的 扩展方法比较特殊。如果你要把 ASP.NET Core 放在 IIS 下，这个扩展方法会读取 IIS http platform handler 的 server port 和 application path，用于作为 ASP.NET Core 的启动位置，如 <a href=\"http://localhost:5000/start．如果你沒用\">http://localhost:5000/start．如果你沒用</a> IIS，这个扩展方法对你来说基本是用不上的．</li>\n</ul>\n<h3 id=\"UseStartup-lt-gt\"><a href=\"#UseStartup-lt-gt\" class=\"headerlink\" title=\"UseStartup&lt;&gt;()\"></a>UseStartup&lt;&gt;()</h3><ul>\n<li>这是 WebHostBuilder 里相当重要的一个扩展方法。它的方法签名如下：</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IWebHostBuilder UseStartup&lt;TStartup&gt;</div><div class=\"line\">(<span class=\"keyword\">this</span> IWebHostBuilder hostBuilder) <span class=\"keyword\">where</span> TStartup : <span class=\"keyword\">class</span></div></pre></td></tr></table></figure>\n<p>这里你可以很清楚地看到 &lt;&gt; 里面要放的就是一个 class。</p>\n<p>在我们这里的范例中，它的名字是 Startup，里面最重要的就是需要定义要使用那些服务(service)以及要使用那些中间件(middleware)。</p>\n<h3 id=\"3、Startup\"><a href=\"#3、Startup\" class=\"headerlink\" title=\"3、Startup\"></a>3、Startup</h3><p>这是一个非常非常重要的class,在ASP.NET Core范例中一般都把它命名成Startup。其实我们把它命名成其他名字也是可以的，或者设定多个Startup。上面的内容可以看到，UseStartup()指定了谁是starup class。然后在Build()便会实例化starup class，之后便执行里面两个重要的方法：ConfigureServices() 和 Configure()。</p>\n<p>我们先來看 Startup 的构造函数.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Startup</span>(<span class=\"params\">IHostingEnvironment env</span>)</div><div class=\"line\">       </span>&#123;</div><div class=\"line\">           <span class=\"comment\">// Set up configuration sources.</span></div><div class=\"line\">           <span class=\"keyword\">var</span> builder = <span class=\"keyword\">new</span> ConfigurationBuilder()</div><div class=\"line\">               .AddJsonFile(<span class=\"string\">\"appsettings.json\"</span>)</div><div class=\"line\">               .AddJsonFile(<span class=\"string\">$\"appsettings.<span class=\"subst\">&#123;env.EnvironmentName&#125;</span>.json\"</span>, optional: <span class=\"literal\">true</span>)</div><div class=\"line\">               .AddEnvironmentVariables();</div><div class=\"line\">           Configuration = builder.Build().ReloadOnChanged(<span class=\"string\">\"appsettings.json\"</span>);</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n<p>Host engine 在被执行 Build()时已经知道 startup type 是 Startup class，所以在 Build() 的时候会先创建期示例。在我们这里的是调用Startup类带参数的构造函数。</p>\n<p>在我们这个例子中选择的是传入IHostingEnvironment示例，它为我们带来了环境变量（EnvironmentName）。</p>\n<p>我们这里主要目的是把Configuration实例化。这是一个蛮重要的基础组件，以后会有文章来说明它。</p>\n<p>在这里我们特别说明一下，上面的示例代码中，我们执行了两次 AddJsonFile()，而且第二个json file的参数和第一个的还不太一样。这样的目的是为了让开发者可以把开发环境使用的环境参数和其他环境使用的参数有所区别。比如，你使用的开发环境用的是appsettings.json，这个文件只存在于你的电脑中。另一个文档是appsettings.production.json，这是正式环境使用的参数设定文档。第二個 AddJsonFile() 第二個参数是 true，也就是可能不存在的意思。所以若遇到重复名称参数时，appsettings.production.json 会覆盖 appsettings.json 的內容。这样使得开发环境和生产环境得以区分。</p>\n<p>接下来，在 IWebHostBuilder 的 Build()里面会执行 host engine 初始化的程序，其中就会去找Startup class里面的两个方法： ConfigureServices() 和 Configure()。</p>\n<p> ConfigureSerivces() 是定义了这个 web application 要使用那些服务，然后将这些服务放在 service container (IServiceCollection) 裡面。如下面的样例：</p>\n <figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</div><div class=\"line\">     </span>&#123;</div><div class=\"line\">         <span class=\"comment\">// add entity framework</span></div><div class=\"line\">         services.AddEntityFramework()</div><div class=\"line\">                 .AddDbContext&lt;BlogsContext&gt;(o =&gt; o.UseSqlServer(Configuration[<span class=\"string\">\"Data1:DefaultConnection:ConnectionString\"</span>]))</div><div class=\"line\">          </div><div class=\"line\">         <span class=\"comment\">// Add framework services.</span></div><div class=\"line\">         services.AddMvc();</div><div class=\"line\">     &#125;</div></pre></td></tr></table></figure>\n<p>它定义了entity framework和mvc两个服务。这里所谓的服务（services）的意思也就是通过它们带入更庞大的程序代码。这听起来好像有点搞笑，但也真的如此。像Entity framework 里面有这么多的代码，一定都需要带入许多定义好的物件或者参数，而不只是一个程序的进去点而已，所以services 的目的就是在这里。</p>\n<p>Configure() 主要是定义了中间件（middleware）以及它们的顺序．</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory</span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    loggerFactory.AddConsole(Configuration.GetSection(<span class=\"string\">\"Logging\"</span>));</div><div class=\"line\">    loggerFactory.AddDebug();</div><div class=\"line\"></div><div class=\"line\">    app.UseStaticFiles();</div><div class=\"line\"></div><div class=\"line\">    app.UseMvcWithDefaultRoute();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"4、Build-和-Run\"><a href=\"#4、Build-和-Run\" class=\"headerlink\" title=\"4、Build 和 Run\"></a>4、Build 和 Run</h3><p>最后，在IHostWebBuilder里最后的两个动作便是：Build and Run. </p>\n<h3 id=\"Build\"><a href=\"#Build\" class=\"headerlink\" title=\"Build()\"></a>Build()</h3><ul>\n<li>这个方法做的工作便是建立 hosting service，把 Startup 中定义的的 services 和 middleware 接收过来，然后确定content root path 和 application name，接着一句前面这些资料再加上Configuration过来的数据来初始化host engine (WebHost.cs)．</li>\n</ul>\n<h3 id=\"Run\"><a href=\"#Run\" class=\"headerlink\" title=\"Run()\"></a>Run()</h3><ul>\n<li>这个是启动 host engine 的 扩展方法，它在启动之前加入了一个 CancelKeyPress 的事件．因为在 Run() 方法 中传入入了 CancellationTokenSource() ，让我们有一个方法可以随时中断host engine的执行。</li>\n</ul>\n<p>目前的做法就用是 CancelKeyPress 事件，所以你可以按下 Ctrl+C  來中止 host engine 的执行．</p>\n<p>比较特別的是，这一段中止的文字说明居然是用 hard code，參考如下:</p>\n<p>host.Run(cts.Token, “Application started. Press Ctrl+C to shut down.”);</p>\n<p>不过这样的话，这里你也不能写中文…</p>\n<p>本文整理于<a href=\"https://dotblogs.com.tw/aspnetshare/2016/03/28/20160327\">https://dotblogs.com.tw/aspnetshare/2016/03/28/20160327</a>并已征得作者同意。<br>感谢Bruce的分享。</p>\n"},{"layout":"post","title":".NET-lmabda避免修改绑定变量","date":"2016-02-14T16:00:00.000Z","_content":"\n先看一段代码\n\n\t\t#region test1 闭包\n\n        public static void test1()\n        {\n            int index = 0;\n            Func<IEnumerable<int>> sequence =()=>GetEnumrableInt(index);\n\n            index = 20;\n            foreach(int n in sequence())\n                Console.WriteLine(n);\n\n            Console.WriteLine(\"Done\");\n\n            index = 100;\n            foreach (int n in sequence())\n                Console.WriteLine(n);\n        }\n\n\n        public static IEnumerable<int> GetEnumrableInt(int index)\n        {\n            List<int> l = new List<int>();\n            for(int i=index;i<index+30;i++)\n            {\n                l.Add(i);\n            }\n            return l;\n        }\n\n        #endregion\n上面一坨代码演示了在闭包中使用了外部变量，随即又在外部修改了这些变量的情况，得到的结果是输出了20-50的数，然后又输出了100-130之间的数。这种行为有点诡异，但是确实有存在的意义...(书本这样说的，我到觉得很少会用到。)\n\n为了将查询表达式转换成可执行代码，C#编译器做了很多工作。一般而言，C#编译器将查询和lambda表达式转换成 \"静态委托\"、\"实例委托\" 或 \"闭包\"。编译器将根据lambda表达式中的代码选择一种实现方式。选择哪种方式依赖于lambda表达式的主体（body）。这看上去似乎是一些语言上的实现细节，但它却会显著地影响到我们的代码。编译器选择何种实现将可能导致diamante行为发生微妙的变化。\n\n并不是任何的lambda表达式都会生成同样结构的代码。\n\n对于编译器来说，最简单的一种行为是为以下形式的代码生成委托。  \n\n        //我们的lambda表达式\n        public static void test2()\n        {\n            int[] someNum = {0,1,2,3,4,5,6,7,8,9,10 };\n\n            IEnumerable<int> ans = from n in someNum\n                                   select n * n;\n\n            foreach (int i in ans)\n                Console.WriteLine(i);\n\n        }\n\n编译器将使用静态委托来实现n*n的lambda表达式，其为上面代码生成的代码如下：\n\n         //编译器为我们的lambda生成的代码\n        #region 等价于 test2()\n        private static int HiddenFunc(int n)\n        {\n            return n * n;\n        }\n        \n        //静态委托\n        private static Func<int, int> HiddenDelegate;\n\n        public void test2_1()\n        {\n\n            int[] someNum = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n\n            if(HiddenDelegate==null)\n            {\n                HiddenDelegate = new Func<int, int>(HiddenFunc);\n            }\n            IEnumerable<int> ans = someNum.Select<int, int>(HiddenDelegate);\n\n          foreach(int i in ans)\n              Console.WriteLine(i);\n\n        }\n        #endregion\n\n这个lambda表达式主体部分并没有访问任何的实例变量或者局部变量。lambda表达式仅仅访问了它的参数。对于这种情况，C#编译器将创建一个静态方法，作为委托的目标。这也是编译器执行的最简单的一种处理方式。若表达式可以通过私有的静态方法实现，那么编译器将生成该私有的静态方法以及相对应的委托定义。对于上面的代码例子中的情况以及仅访问了静态变量的表达式，编译器都会采用这样的方案。\n\n\n接下来介绍另一种较为简单的情况：\nlambda表达式需要访问类型的实例变量，但无需访问外层方法中的局部变量。\n\t\t\t\t\n    public class ModFilter\n    {\n        private readonly int modules;\n\n        public ModFilter(int mod)\n        {\n            modules = mod;\n        }\n\n\n        public IEnumerable<int> FindValues(IEnumerable<int> sequence)\n        {\n\n            return from n in sequence\n                   where n % modules == 0 //新添加的表达式\n                   select n * n;  //和前面的例子是一样的\n        }\n    }\n\n\n\n/* \n\n在这种情况下，编译器将为表达式创建一个实例方法来包装该委托。\n其基本概念和前一种情况一致，只是这里使用了实例方法，以便读取并修改当前对象的状态。\n与静态委托的例子一样，这里编译器将把lambda表达式转换成我们熟悉的代码。其中包含委托的定义以及方法调用。\n如下：\n\n*/\n\n\n\n    public class ModFilter_Other\n    {\n        private readonly int modules;\n\n\n        //实例方法\n        private bool WhereClause(int n)\n        {\n            return ((n%this.modules) ==0);\n        }\n\n\n        private static int SelectClause(int n)\n        {\n            return n * n;\n        }\n\n        private static Func<int, int> SelectDelegate;\n\n\n\n\n        public ModFilter_Other(int mod)\n        {\n            modules = mod;\n        }\n\n\n        public IEnumerable<int> FindValues(IEnumerable<int> sequence)\n        {\n            if(SelectDelegate==null)\n            {\n                SelectDelegate = new Func<int, int>(SelectClause);\n            }\n\n            return sequence.Where<int>(\n                new Func<int, bool>(this.WhereClause)).\n                Select<int, int>(SelectClause);\n        }\n    }\n\n概括来说便是：lambda表达式中的代码访问了对象实例中的成员变量，那么编译器将生成实例方法来表示lambda表达式中的代码。其实这并没有什么奇特之处——编译器省去了我们的一些代码输入工作，代码也变得整洁很多，本质来说这还是普通的方法调用。\n\n\n\n\n\n不过若是lambda表达式中访问到了外部方法中的局部变量或者方法参数，那么编译器将帮你完成很多工作。\n\n\n这里会用到闭包。编译器将生成一个私有的嵌套类型，以便为局部变量实现闭包。\n\n局部变量必须传入到实现了lambda表达式主体部分的委托里。\n\n此外，所有由该lambda表达式执行的对这些局部变量所作的修改都必须能够在外部访问到。\n\n当然，代码中内层和外层中共享的可能不止有一个变量，也可能不止一个的查询表达式。\n\n我们来修改一下该实例方法，让其访问一个局部变量。\n\n\n\t\t  public class ModFilter\n\t\t  {\n\t\t        private readonly int modules;\n\t\t\n\t\t        public ModFilter(int mod)\n\t\t        {\n\t\t            modules = mod;\n\t\t        }\n\t\t\n\t\t\n\t\t        public IEnumerable<int> FindValues(IEnumerable<int> sequence)\n\t\t        {\n\t\t            int numValues = 0;\n\t\t\n\t\t            return from n in sequence\n\t\t                   where n % modules == 0 //新添加的表达式\n\t\t                   select n * n / ++ numValues; //访问局部变量\n\t\t        }\n\t      }\n\n注意，select字句需要访问numValues这个局部变量。编译器为了创建这个闭包，需要使用嵌套类型来实现你所需要的行为。下面展示的是编译器为你生成的代码。\n\n\n\n\n \t public class ModFilter\n     {\n        private sealed class Closure\n        {\n            public ModFilter outer;\n\n            public int numValues;\n\n            public int SelectClause(int n)\n            {\n                return ((n * n) / ++this.numValues);\n            }\n        }\n\n\n\n        private readonly int modules;\n\n\n        //实例方法\n        private bool WhereClause(int n)\n        {\n            return ((n % this.modules) == 0);\n        }\n\n        public ModFilter(int mod)\n        {\n            modules = mod;\n        }\n\n\n        public IEnumerable<int> FindValues(IEnumerable<int> sequence)\n        {\n            Closure c = new Closure();\n            c.outer = this;\n            c.numValues = 0;\n\n            return sequence.Where<int>(\n                new Func<int, bool>(this.WhereClause)).\n                Select<int, int>(c.SelectClause);\n        }\n    }\n\n在上面这段代码中，编译器专门创建了一个嵌套类，用来容纳所有将在lambda表达式中访问或修改的变量。实际上，这些局部变量将完全被嵌套类的字段所代替。lambda表达式内部的代码以及表达式外部(但仍在当前方法内)的代码访问的均是同一个字段，lambda表达式中的逻辑也被编译成了内部类的一个方法。\n\n对于lambda表达式中将要用到的外部方法的参数，编译器也会以对待局部变量的方式实现：编译器将这些参数复制到表示该闭包的嵌套类中。\n\n回到最开始的那个示例，这是我们应该可以理解这种看似怪异的行为了。变量index在传入闭包后，但在查询开始执行前曾被外部代码修改。也就是说，你修改了闭包的内部状态，然后还期待其能够回到从前的状态开始执行，显然这是不可能实现的。\n\n考虑到延迟执行中的交互以及编译器实现闭包的方式，修改查询与外部代码之间绑定的变量将可能会引发错误的行为。\n因此，我们应该尽量避免在方法中修改哪些将要传入到闭包中，并将在闭包中使用的变量。\n\n\n\n\n","source":"_posts/can't-modify-linq-object.md","raw":"---\nlayout: post\ntitle: .NET-lmabda避免修改绑定变量\ncategory: .net\ndate: 2016-02-15 00:00:00\n---\n\n先看一段代码\n\n\t\t#region test1 闭包\n\n        public static void test1()\n        {\n            int index = 0;\n            Func<IEnumerable<int>> sequence =()=>GetEnumrableInt(index);\n\n            index = 20;\n            foreach(int n in sequence())\n                Console.WriteLine(n);\n\n            Console.WriteLine(\"Done\");\n\n            index = 100;\n            foreach (int n in sequence())\n                Console.WriteLine(n);\n        }\n\n\n        public static IEnumerable<int> GetEnumrableInt(int index)\n        {\n            List<int> l = new List<int>();\n            for(int i=index;i<index+30;i++)\n            {\n                l.Add(i);\n            }\n            return l;\n        }\n\n        #endregion\n上面一坨代码演示了在闭包中使用了外部变量，随即又在外部修改了这些变量的情况，得到的结果是输出了20-50的数，然后又输出了100-130之间的数。这种行为有点诡异，但是确实有存在的意义...(书本这样说的，我到觉得很少会用到。)\n\n为了将查询表达式转换成可执行代码，C#编译器做了很多工作。一般而言，C#编译器将查询和lambda表达式转换成 \"静态委托\"、\"实例委托\" 或 \"闭包\"。编译器将根据lambda表达式中的代码选择一种实现方式。选择哪种方式依赖于lambda表达式的主体（body）。这看上去似乎是一些语言上的实现细节，但它却会显著地影响到我们的代码。编译器选择何种实现将可能导致diamante行为发生微妙的变化。\n\n并不是任何的lambda表达式都会生成同样结构的代码。\n\n对于编译器来说，最简单的一种行为是为以下形式的代码生成委托。  \n\n        //我们的lambda表达式\n        public static void test2()\n        {\n            int[] someNum = {0,1,2,3,4,5,6,7,8,9,10 };\n\n            IEnumerable<int> ans = from n in someNum\n                                   select n * n;\n\n            foreach (int i in ans)\n                Console.WriteLine(i);\n\n        }\n\n编译器将使用静态委托来实现n*n的lambda表达式，其为上面代码生成的代码如下：\n\n         //编译器为我们的lambda生成的代码\n        #region 等价于 test2()\n        private static int HiddenFunc(int n)\n        {\n            return n * n;\n        }\n        \n        //静态委托\n        private static Func<int, int> HiddenDelegate;\n\n        public void test2_1()\n        {\n\n            int[] someNum = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n\n            if(HiddenDelegate==null)\n            {\n                HiddenDelegate = new Func<int, int>(HiddenFunc);\n            }\n            IEnumerable<int> ans = someNum.Select<int, int>(HiddenDelegate);\n\n          foreach(int i in ans)\n              Console.WriteLine(i);\n\n        }\n        #endregion\n\n这个lambda表达式主体部分并没有访问任何的实例变量或者局部变量。lambda表达式仅仅访问了它的参数。对于这种情况，C#编译器将创建一个静态方法，作为委托的目标。这也是编译器执行的最简单的一种处理方式。若表达式可以通过私有的静态方法实现，那么编译器将生成该私有的静态方法以及相对应的委托定义。对于上面的代码例子中的情况以及仅访问了静态变量的表达式，编译器都会采用这样的方案。\n\n\n接下来介绍另一种较为简单的情况：\nlambda表达式需要访问类型的实例变量，但无需访问外层方法中的局部变量。\n\t\t\t\t\n    public class ModFilter\n    {\n        private readonly int modules;\n\n        public ModFilter(int mod)\n        {\n            modules = mod;\n        }\n\n\n        public IEnumerable<int> FindValues(IEnumerable<int> sequence)\n        {\n\n            return from n in sequence\n                   where n % modules == 0 //新添加的表达式\n                   select n * n;  //和前面的例子是一样的\n        }\n    }\n\n\n\n/* \n\n在这种情况下，编译器将为表达式创建一个实例方法来包装该委托。\n其基本概念和前一种情况一致，只是这里使用了实例方法，以便读取并修改当前对象的状态。\n与静态委托的例子一样，这里编译器将把lambda表达式转换成我们熟悉的代码。其中包含委托的定义以及方法调用。\n如下：\n\n*/\n\n\n\n    public class ModFilter_Other\n    {\n        private readonly int modules;\n\n\n        //实例方法\n        private bool WhereClause(int n)\n        {\n            return ((n%this.modules) ==0);\n        }\n\n\n        private static int SelectClause(int n)\n        {\n            return n * n;\n        }\n\n        private static Func<int, int> SelectDelegate;\n\n\n\n\n        public ModFilter_Other(int mod)\n        {\n            modules = mod;\n        }\n\n\n        public IEnumerable<int> FindValues(IEnumerable<int> sequence)\n        {\n            if(SelectDelegate==null)\n            {\n                SelectDelegate = new Func<int, int>(SelectClause);\n            }\n\n            return sequence.Where<int>(\n                new Func<int, bool>(this.WhereClause)).\n                Select<int, int>(SelectClause);\n        }\n    }\n\n概括来说便是：lambda表达式中的代码访问了对象实例中的成员变量，那么编译器将生成实例方法来表示lambda表达式中的代码。其实这并没有什么奇特之处——编译器省去了我们的一些代码输入工作，代码也变得整洁很多，本质来说这还是普通的方法调用。\n\n\n\n\n\n不过若是lambda表达式中访问到了外部方法中的局部变量或者方法参数，那么编译器将帮你完成很多工作。\n\n\n这里会用到闭包。编译器将生成一个私有的嵌套类型，以便为局部变量实现闭包。\n\n局部变量必须传入到实现了lambda表达式主体部分的委托里。\n\n此外，所有由该lambda表达式执行的对这些局部变量所作的修改都必须能够在外部访问到。\n\n当然，代码中内层和外层中共享的可能不止有一个变量，也可能不止一个的查询表达式。\n\n我们来修改一下该实例方法，让其访问一个局部变量。\n\n\n\t\t  public class ModFilter\n\t\t  {\n\t\t        private readonly int modules;\n\t\t\n\t\t        public ModFilter(int mod)\n\t\t        {\n\t\t            modules = mod;\n\t\t        }\n\t\t\n\t\t\n\t\t        public IEnumerable<int> FindValues(IEnumerable<int> sequence)\n\t\t        {\n\t\t            int numValues = 0;\n\t\t\n\t\t            return from n in sequence\n\t\t                   where n % modules == 0 //新添加的表达式\n\t\t                   select n * n / ++ numValues; //访问局部变量\n\t\t        }\n\t      }\n\n注意，select字句需要访问numValues这个局部变量。编译器为了创建这个闭包，需要使用嵌套类型来实现你所需要的行为。下面展示的是编译器为你生成的代码。\n\n\n\n\n \t public class ModFilter\n     {\n        private sealed class Closure\n        {\n            public ModFilter outer;\n\n            public int numValues;\n\n            public int SelectClause(int n)\n            {\n                return ((n * n) / ++this.numValues);\n            }\n        }\n\n\n\n        private readonly int modules;\n\n\n        //实例方法\n        private bool WhereClause(int n)\n        {\n            return ((n % this.modules) == 0);\n        }\n\n        public ModFilter(int mod)\n        {\n            modules = mod;\n        }\n\n\n        public IEnumerable<int> FindValues(IEnumerable<int> sequence)\n        {\n            Closure c = new Closure();\n            c.outer = this;\n            c.numValues = 0;\n\n            return sequence.Where<int>(\n                new Func<int, bool>(this.WhereClause)).\n                Select<int, int>(c.SelectClause);\n        }\n    }\n\n在上面这段代码中，编译器专门创建了一个嵌套类，用来容纳所有将在lambda表达式中访问或修改的变量。实际上，这些局部变量将完全被嵌套类的字段所代替。lambda表达式内部的代码以及表达式外部(但仍在当前方法内)的代码访问的均是同一个字段，lambda表达式中的逻辑也被编译成了内部类的一个方法。\n\n对于lambda表达式中将要用到的外部方法的参数，编译器也会以对待局部变量的方式实现：编译器将这些参数复制到表示该闭包的嵌套类中。\n\n回到最开始的那个示例，这是我们应该可以理解这种看似怪异的行为了。变量index在传入闭包后，但在查询开始执行前曾被外部代码修改。也就是说，你修改了闭包的内部状态，然后还期待其能够回到从前的状态开始执行，显然这是不可能实现的。\n\n考虑到延迟执行中的交互以及编译器实现闭包的方式，修改查询与外部代码之间绑定的变量将可能会引发错误的行为。\n因此，我们应该尽量避免在方法中修改哪些将要传入到闭包中，并将在闭包中使用的变量。\n\n\n\n\n","slug":"can't-modify-linq-object","published":1,"updated":"2016-10-15T05:20:24.851Z","comments":1,"photos":[],"link":"","_id":"cj0dyumwl000y6kunp7ff40ed","content":"<p>先看一段代码</p>\n<pre><code>#region test1 闭包\n\npublic static void test1()\n{\n    int index = 0;\n    Func&lt;IEnumerable&lt;int&gt;&gt; sequence =()=&gt;GetEnumrableInt(index);\n\n    index = 20;\n    foreach(int n in sequence())\n        Console.WriteLine(n);\n\n    Console.WriteLine(&quot;Done&quot;);\n\n    index = 100;\n    foreach (int n in sequence())\n        Console.WriteLine(n);\n}\n\n\npublic static IEnumerable&lt;int&gt; GetEnumrableInt(int index)\n{\n    List&lt;int&gt; l = new List&lt;int&gt;();\n    for(int i=index;i&lt;index+30;i++)\n    {\n        l.Add(i);\n    }\n    return l;\n}\n\n#endregion\n</code></pre><p>上面一坨代码演示了在闭包中使用了外部变量，随即又在外部修改了这些变量的情况，得到的结果是输出了20-50的数，然后又输出了100-130之间的数。这种行为有点诡异，但是确实有存在的意义…(书本这样说的，我到觉得很少会用到。)</p>\n<p>为了将查询表达式转换成可执行代码，C#编译器做了很多工作。一般而言，C#编译器将查询和lambda表达式转换成 “静态委托”、”实例委托” 或 “闭包”。编译器将根据lambda表达式中的代码选择一种实现方式。选择哪种方式依赖于lambda表达式的主体（body）。这看上去似乎是一些语言上的实现细节，但它却会显著地影响到我们的代码。编译器选择何种实现将可能导致diamante行为发生微妙的变化。</p>\n<p>并不是任何的lambda表达式都会生成同样结构的代码。</p>\n<p>对于编译器来说，最简单的一种行为是为以下形式的代码生成委托。  </p>\n<pre><code>//我们的lambda表达式\npublic static void test2()\n{\n    int[] someNum = {0,1,2,3,4,5,6,7,8,9,10 };\n\n    IEnumerable&lt;int&gt; ans = from n in someNum\n                           select n * n;\n\n    foreach (int i in ans)\n        Console.WriteLine(i);\n\n}\n</code></pre><p>编译器将使用静态委托来实现n*n的lambda表达式，其为上面代码生成的代码如下：</p>\n<pre><code> //编译器为我们的lambda生成的代码\n#region 等价于 test2()\nprivate static int HiddenFunc(int n)\n{\n    return n * n;\n}\n\n//静态委托\nprivate static Func&lt;int, int&gt; HiddenDelegate;\n\npublic void test2_1()\n{\n\n    int[] someNum = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n\n    if(HiddenDelegate==null)\n    {\n        HiddenDelegate = new Func&lt;int, int&gt;(HiddenFunc);\n    }\n    IEnumerable&lt;int&gt; ans = someNum.Select&lt;int, int&gt;(HiddenDelegate);\n\n  foreach(int i in ans)\n      Console.WriteLine(i);\n\n}\n#endregion\n</code></pre><p>这个lambda表达式主体部分并没有访问任何的实例变量或者局部变量。lambda表达式仅仅访问了它的参数。对于这种情况，C#编译器将创建一个静态方法，作为委托的目标。这也是编译器执行的最简单的一种处理方式。若表达式可以通过私有的静态方法实现，那么编译器将生成该私有的静态方法以及相对应的委托定义。对于上面的代码例子中的情况以及仅访问了静态变量的表达式，编译器都会采用这样的方案。</p>\n<p>接下来介绍另一种较为简单的情况：<br>lambda表达式需要访问类型的实例变量，但无需访问外层方法中的局部变量。</p>\n<pre><code>public class ModFilter\n{\n    private readonly int modules;\n\n    public ModFilter(int mod)\n    {\n        modules = mod;\n    }\n\n\n    public IEnumerable&lt;int&gt; FindValues(IEnumerable&lt;int&gt; sequence)\n    {\n\n        return from n in sequence\n               where n % modules == 0 //新添加的表达式\n               select n * n;  //和前面的例子是一样的\n    }\n}\n</code></pre><p>/* </p>\n<p>在这种情况下，编译器将为表达式创建一个实例方法来包装该委托。<br>其基本概念和前一种情况一致，只是这里使用了实例方法，以便读取并修改当前对象的状态。<br>与静态委托的例子一样，这里编译器将把lambda表达式转换成我们熟悉的代码。其中包含委托的定义以及方法调用。<br>如下：</p>\n<p>*/</p>\n<pre><code>public class ModFilter_Other\n{\n    private readonly int modules;\n\n\n    //实例方法\n    private bool WhereClause(int n)\n    {\n        return ((n%this.modules) ==0);\n    }\n\n\n    private static int SelectClause(int n)\n    {\n        return n * n;\n    }\n\n    private static Func&lt;int, int&gt; SelectDelegate;\n\n\n\n\n    public ModFilter_Other(int mod)\n    {\n        modules = mod;\n    }\n\n\n    public IEnumerable&lt;int&gt; FindValues(IEnumerable&lt;int&gt; sequence)\n    {\n        if(SelectDelegate==null)\n        {\n            SelectDelegate = new Func&lt;int, int&gt;(SelectClause);\n        }\n\n        return sequence.Where&lt;int&gt;(\n            new Func&lt;int, bool&gt;(this.WhereClause)).\n            Select&lt;int, int&gt;(SelectClause);\n    }\n}\n</code></pre><p>概括来说便是：lambda表达式中的代码访问了对象实例中的成员变量，那么编译器将生成实例方法来表示lambda表达式中的代码。其实这并没有什么奇特之处——编译器省去了我们的一些代码输入工作，代码也变得整洁很多，本质来说这还是普通的方法调用。</p>\n<p>不过若是lambda表达式中访问到了外部方法中的局部变量或者方法参数，那么编译器将帮你完成很多工作。</p>\n<p>这里会用到闭包。编译器将生成一个私有的嵌套类型，以便为局部变量实现闭包。</p>\n<p>局部变量必须传入到实现了lambda表达式主体部分的委托里。</p>\n<p>此外，所有由该lambda表达式执行的对这些局部变量所作的修改都必须能够在外部访问到。</p>\n<p>当然，代码中内层和外层中共享的可能不止有一个变量，也可能不止一个的查询表达式。</p>\n<p>我们来修改一下该实例方法，让其访问一个局部变量。</p>\n<pre><code>public class ModFilter\n{\n      private readonly int modules;\n\n      public ModFilter(int mod)\n      {\n          modules = mod;\n      }\n\n\n      public IEnumerable&lt;int&gt; FindValues(IEnumerable&lt;int&gt; sequence)\n      {\n          int numValues = 0;\n\n          return from n in sequence\n                 where n % modules == 0 //新添加的表达式\n                 select n * n / ++ numValues; //访问局部变量\n      }\n}\n</code></pre><p>注意，select字句需要访问numValues这个局部变量。编译器为了创建这个闭包，需要使用嵌套类型来实现你所需要的行为。下面展示的是编译器为你生成的代码。</p>\n<pre><code>  public class ModFilter\n {\n    private sealed class Closure\n    {\n        public ModFilter outer;\n\n        public int numValues;\n\n        public int SelectClause(int n)\n        {\n            return ((n * n) / ++this.numValues);\n        }\n    }\n\n\n\n    private readonly int modules;\n\n\n    //实例方法\n    private bool WhereClause(int n)\n    {\n        return ((n % this.modules) == 0);\n    }\n\n    public ModFilter(int mod)\n    {\n        modules = mod;\n    }\n\n\n    public IEnumerable&lt;int&gt; FindValues(IEnumerable&lt;int&gt; sequence)\n    {\n        Closure c = new Closure();\n        c.outer = this;\n        c.numValues = 0;\n\n        return sequence.Where&lt;int&gt;(\n            new Func&lt;int, bool&gt;(this.WhereClause)).\n            Select&lt;int, int&gt;(c.SelectClause);\n    }\n}\n</code></pre><p>在上面这段代码中，编译器专门创建了一个嵌套类，用来容纳所有将在lambda表达式中访问或修改的变量。实际上，这些局部变量将完全被嵌套类的字段所代替。lambda表达式内部的代码以及表达式外部(但仍在当前方法内)的代码访问的均是同一个字段，lambda表达式中的逻辑也被编译成了内部类的一个方法。</p>\n<p>对于lambda表达式中将要用到的外部方法的参数，编译器也会以对待局部变量的方式实现：编译器将这些参数复制到表示该闭包的嵌套类中。</p>\n<p>回到最开始的那个示例，这是我们应该可以理解这种看似怪异的行为了。变量index在传入闭包后，但在查询开始执行前曾被外部代码修改。也就是说，你修改了闭包的内部状态，然后还期待其能够回到从前的状态开始执行，显然这是不可能实现的。</p>\n<p>考虑到延迟执行中的交互以及编译器实现闭包的方式，修改查询与外部代码之间绑定的变量将可能会引发错误的行为。<br>因此，我们应该尽量避免在方法中修改哪些将要传入到闭包中，并将在闭包中使用的变量。</p>\n","excerpt":"","more":"<p>先看一段代码</p>\n<pre><code>#region test1 闭包\n\npublic static void test1()\n{\n    int index = 0;\n    Func&lt;IEnumerable&lt;int&gt;&gt; sequence =()=&gt;GetEnumrableInt(index);\n\n    index = 20;\n    foreach(int n in sequence())\n        Console.WriteLine(n);\n\n    Console.WriteLine(&quot;Done&quot;);\n\n    index = 100;\n    foreach (int n in sequence())\n        Console.WriteLine(n);\n}\n\n\npublic static IEnumerable&lt;int&gt; GetEnumrableInt(int index)\n{\n    List&lt;int&gt; l = new List&lt;int&gt;();\n    for(int i=index;i&lt;index+30;i++)\n    {\n        l.Add(i);\n    }\n    return l;\n}\n\n#endregion\n</code></pre><p>上面一坨代码演示了在闭包中使用了外部变量，随即又在外部修改了这些变量的情况，得到的结果是输出了20-50的数，然后又输出了100-130之间的数。这种行为有点诡异，但是确实有存在的意义…(书本这样说的，我到觉得很少会用到。)</p>\n<p>为了将查询表达式转换成可执行代码，C#编译器做了很多工作。一般而言，C#编译器将查询和lambda表达式转换成 “静态委托”、”实例委托” 或 “闭包”。编译器将根据lambda表达式中的代码选择一种实现方式。选择哪种方式依赖于lambda表达式的主体（body）。这看上去似乎是一些语言上的实现细节，但它却会显著地影响到我们的代码。编译器选择何种实现将可能导致diamante行为发生微妙的变化。</p>\n<p>并不是任何的lambda表达式都会生成同样结构的代码。</p>\n<p>对于编译器来说，最简单的一种行为是为以下形式的代码生成委托。  </p>\n<pre><code>//我们的lambda表达式\npublic static void test2()\n{\n    int[] someNum = {0,1,2,3,4,5,6,7,8,9,10 };\n\n    IEnumerable&lt;int&gt; ans = from n in someNum\n                           select n * n;\n\n    foreach (int i in ans)\n        Console.WriteLine(i);\n\n}\n</code></pre><p>编译器将使用静态委托来实现n*n的lambda表达式，其为上面代码生成的代码如下：</p>\n<pre><code> //编译器为我们的lambda生成的代码\n#region 等价于 test2()\nprivate static int HiddenFunc(int n)\n{\n    return n * n;\n}\n\n//静态委托\nprivate static Func&lt;int, int&gt; HiddenDelegate;\n\npublic void test2_1()\n{\n\n    int[] someNum = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n\n    if(HiddenDelegate==null)\n    {\n        HiddenDelegate = new Func&lt;int, int&gt;(HiddenFunc);\n    }\n    IEnumerable&lt;int&gt; ans = someNum.Select&lt;int, int&gt;(HiddenDelegate);\n\n  foreach(int i in ans)\n      Console.WriteLine(i);\n\n}\n#endregion\n</code></pre><p>这个lambda表达式主体部分并没有访问任何的实例变量或者局部变量。lambda表达式仅仅访问了它的参数。对于这种情况，C#编译器将创建一个静态方法，作为委托的目标。这也是编译器执行的最简单的一种处理方式。若表达式可以通过私有的静态方法实现，那么编译器将生成该私有的静态方法以及相对应的委托定义。对于上面的代码例子中的情况以及仅访问了静态变量的表达式，编译器都会采用这样的方案。</p>\n<p>接下来介绍另一种较为简单的情况：<br>lambda表达式需要访问类型的实例变量，但无需访问外层方法中的局部变量。</p>\n<pre><code>public class ModFilter\n{\n    private readonly int modules;\n\n    public ModFilter(int mod)\n    {\n        modules = mod;\n    }\n\n\n    public IEnumerable&lt;int&gt; FindValues(IEnumerable&lt;int&gt; sequence)\n    {\n\n        return from n in sequence\n               where n % modules == 0 //新添加的表达式\n               select n * n;  //和前面的例子是一样的\n    }\n}\n</code></pre><p>/* </p>\n<p>在这种情况下，编译器将为表达式创建一个实例方法来包装该委托。<br>其基本概念和前一种情况一致，只是这里使用了实例方法，以便读取并修改当前对象的状态。<br>与静态委托的例子一样，这里编译器将把lambda表达式转换成我们熟悉的代码。其中包含委托的定义以及方法调用。<br>如下：</p>\n<p>*/</p>\n<pre><code>public class ModFilter_Other\n{\n    private readonly int modules;\n\n\n    //实例方法\n    private bool WhereClause(int n)\n    {\n        return ((n%this.modules) ==0);\n    }\n\n\n    private static int SelectClause(int n)\n    {\n        return n * n;\n    }\n\n    private static Func&lt;int, int&gt; SelectDelegate;\n\n\n\n\n    public ModFilter_Other(int mod)\n    {\n        modules = mod;\n    }\n\n\n    public IEnumerable&lt;int&gt; FindValues(IEnumerable&lt;int&gt; sequence)\n    {\n        if(SelectDelegate==null)\n        {\n            SelectDelegate = new Func&lt;int, int&gt;(SelectClause);\n        }\n\n        return sequence.Where&lt;int&gt;(\n            new Func&lt;int, bool&gt;(this.WhereClause)).\n            Select&lt;int, int&gt;(SelectClause);\n    }\n}\n</code></pre><p>概括来说便是：lambda表达式中的代码访问了对象实例中的成员变量，那么编译器将生成实例方法来表示lambda表达式中的代码。其实这并没有什么奇特之处——编译器省去了我们的一些代码输入工作，代码也变得整洁很多，本质来说这还是普通的方法调用。</p>\n<p>不过若是lambda表达式中访问到了外部方法中的局部变量或者方法参数，那么编译器将帮你完成很多工作。</p>\n<p>这里会用到闭包。编译器将生成一个私有的嵌套类型，以便为局部变量实现闭包。</p>\n<p>局部变量必须传入到实现了lambda表达式主体部分的委托里。</p>\n<p>此外，所有由该lambda表达式执行的对这些局部变量所作的修改都必须能够在外部访问到。</p>\n<p>当然，代码中内层和外层中共享的可能不止有一个变量，也可能不止一个的查询表达式。</p>\n<p>我们来修改一下该实例方法，让其访问一个局部变量。</p>\n<pre><code>public class ModFilter\n{\n      private readonly int modules;\n\n      public ModFilter(int mod)\n      {\n          modules = mod;\n      }\n\n\n      public IEnumerable&lt;int&gt; FindValues(IEnumerable&lt;int&gt; sequence)\n      {\n          int numValues = 0;\n\n          return from n in sequence\n                 where n % modules == 0 //新添加的表达式\n                 select n * n / ++ numValues; //访问局部变量\n      }\n}\n</code></pre><p>注意，select字句需要访问numValues这个局部变量。编译器为了创建这个闭包，需要使用嵌套类型来实现你所需要的行为。下面展示的是编译器为你生成的代码。</p>\n<pre><code>  public class ModFilter\n {\n    private sealed class Closure\n    {\n        public ModFilter outer;\n\n        public int numValues;\n\n        public int SelectClause(int n)\n        {\n            return ((n * n) / ++this.numValues);\n        }\n    }\n\n\n\n    private readonly int modules;\n\n\n    //实例方法\n    private bool WhereClause(int n)\n    {\n        return ((n % this.modules) == 0);\n    }\n\n    public ModFilter(int mod)\n    {\n        modules = mod;\n    }\n\n\n    public IEnumerable&lt;int&gt; FindValues(IEnumerable&lt;int&gt; sequence)\n    {\n        Closure c = new Closure();\n        c.outer = this;\n        c.numValues = 0;\n\n        return sequence.Where&lt;int&gt;(\n            new Func&lt;int, bool&gt;(this.WhereClause)).\n            Select&lt;int, int&gt;(c.SelectClause);\n    }\n}\n</code></pre><p>在上面这段代码中，编译器专门创建了一个嵌套类，用来容纳所有将在lambda表达式中访问或修改的变量。实际上，这些局部变量将完全被嵌套类的字段所代替。lambda表达式内部的代码以及表达式外部(但仍在当前方法内)的代码访问的均是同一个字段，lambda表达式中的逻辑也被编译成了内部类的一个方法。</p>\n<p>对于lambda表达式中将要用到的外部方法的参数，编译器也会以对待局部变量的方式实现：编译器将这些参数复制到表示该闭包的嵌套类中。</p>\n<p>回到最开始的那个示例，这是我们应该可以理解这种看似怪异的行为了。变量index在传入闭包后，但在查询开始执行前曾被外部代码修改。也就是说，你修改了闭包的内部状态，然后还期待其能够回到从前的状态开始执行，显然这是不可能实现的。</p>\n<p>考虑到延迟执行中的交互以及编译器实现闭包的方式，修改查询与外部代码之间绑定的变量将可能会引发错误的行为。<br>因此，我们应该尽量避免在方法中修改哪些将要传入到闭包中，并将在闭包中使用的变量。</p>\n"},{"layout":"post","title":".NET 类字段与类属性","date":"2016-02-09T16:00:00.000Z","_content":"#.NET 类字段与类属性\n@(.NET)[基础|字段|属性]\n\n##字段\n字段表示只读或可读/可写的数据值。\n字段可以是静态的，这种字段被认为是类型状态的一部分。\n字段也可以是实例（非静态），这种字段被认为是对象状态的一部分。 \n强烈建议把字段声明为私有，防止类型或对象的状态被类型外部代码破坏。\n\n##属性\n属性允许用简单的、字段风格的语法设置或查询类型或对象的逻辑状态，同时保证状态不被破坏。\n作用于类型称为静态属性，作用于对象称为实例属性。\n属性可以无参，也可以有多个参数（相当少见，但集合类用的多）。 \n\n\tusing System;\n\t\n\tpublic sealed class SomeType\n\t{                            //  1  \n\t// Nested class  \n\t   private class SomeNestedType { }                //  2  \n\t\n\t   // Constant, read­only, and static read/write field   \n\t   private const Int32 c_SomeConstant = 1;            //  3     \n\t\n\t   private readonly String m_SomeReadOnlyField = \"2\";     //  4    \n\t\n\t   private static Int32 s_SomeReadWriteField = 3;      //  5  \n\t\n\t   // Type constructor  \n\t   static SomeType() { }                                  //  6  \n\t\n\t   // Instance constructors  \n\t   public SomeType(Int32 x) { }                           //  7  \n\t\n\t   public SomeType() { }                                  //  8 \n\t\n\t   // Instance and static methods  \n\t   private String InstanceMethod() { return null; }       // 9   \n\t\n\t   public static void Main() { }                        // 10 \n\t\n\t   // Instance property  \n\t   public Int32 SomeProp\n\t   {                                // 11      \n\t       get { return 0; }                                // 12      \n\t       set { }                                          // 13  \n\t   }\n\t\n\t   // Instance parameterful property (indexer) \n\t   public Int32 this[String s]\n\t   {                          // 14       \n\t       get { return 0; }                                // 15        \n\t       set { }                                          // 16  \n\t   }\n\t\n\t   // Instance event  \n\t   public event EventHandler SomeEvent;                  // 17  \n\t}\n\n![enter image description here](https://kekaeq-ch3301.files.1drv.com/y3meEWWaK-o9SNfr_fT71Xr3YrPqO1LIswWqMvlHyUxWeH8P0PtXsQlfRkDnGshlMJIy2gPsxNet14efOPOuX-dHmZhCTg8PXyELJR9tnayye4LeEQ6F997b8pSI84wBR6nmmOF8IAr92oKWk36-f8alkEj9TrDQbiMoKGQwO5MTFY/20150105.jpg?psid=1)\n\n\n![enter image description here](https://kekaeq-ch3301.files.1drv.com/y3mN8FseIEbAaQfT8ynEIc4nYsOUK0p0IN7Hp39imVSZXNQXlSfAYmvaC-9bDM3Hq6rPCV1XgrgvoST8wXejwARXaDmXptZpb_nyWwUzWK1rzaJ6fSsYfnP0icRKUclaVxnlltOJSQiuTFO7_fCfabmv0AsrgL5sLo6GdVJmpd-L10/QQ%E5%9B%BE%E7%89%8720151003165909.jpg?psid=1)","source":"_posts/classfield-property.md","raw":"---\nlayout: post\ntitle: .NET 类字段与类属性\ncategory: .net\ndate: 2016-02-10 00:00:00\n---\n#.NET 类字段与类属性\n@(.NET)[基础|字段|属性]\n\n##字段\n字段表示只读或可读/可写的数据值。\n字段可以是静态的，这种字段被认为是类型状态的一部分。\n字段也可以是实例（非静态），这种字段被认为是对象状态的一部分。 \n强烈建议把字段声明为私有，防止类型或对象的状态被类型外部代码破坏。\n\n##属性\n属性允许用简单的、字段风格的语法设置或查询类型或对象的逻辑状态，同时保证状态不被破坏。\n作用于类型称为静态属性，作用于对象称为实例属性。\n属性可以无参，也可以有多个参数（相当少见，但集合类用的多）。 \n\n\tusing System;\n\t\n\tpublic sealed class SomeType\n\t{                            //  1  \n\t// Nested class  \n\t   private class SomeNestedType { }                //  2  \n\t\n\t   // Constant, read­only, and static read/write field   \n\t   private const Int32 c_SomeConstant = 1;            //  3     \n\t\n\t   private readonly String m_SomeReadOnlyField = \"2\";     //  4    \n\t\n\t   private static Int32 s_SomeReadWriteField = 3;      //  5  \n\t\n\t   // Type constructor  \n\t   static SomeType() { }                                  //  6  \n\t\n\t   // Instance constructors  \n\t   public SomeType(Int32 x) { }                           //  7  \n\t\n\t   public SomeType() { }                                  //  8 \n\t\n\t   // Instance and static methods  \n\t   private String InstanceMethod() { return null; }       // 9   \n\t\n\t   public static void Main() { }                        // 10 \n\t\n\t   // Instance property  \n\t   public Int32 SomeProp\n\t   {                                // 11      \n\t       get { return 0; }                                // 12      \n\t       set { }                                          // 13  \n\t   }\n\t\n\t   // Instance parameterful property (indexer) \n\t   public Int32 this[String s]\n\t   {                          // 14       \n\t       get { return 0; }                                // 15        \n\t       set { }                                          // 16  \n\t   }\n\t\n\t   // Instance event  \n\t   public event EventHandler SomeEvent;                  // 17  \n\t}\n\n![enter image description here](https://kekaeq-ch3301.files.1drv.com/y3meEWWaK-o9SNfr_fT71Xr3YrPqO1LIswWqMvlHyUxWeH8P0PtXsQlfRkDnGshlMJIy2gPsxNet14efOPOuX-dHmZhCTg8PXyELJR9tnayye4LeEQ6F997b8pSI84wBR6nmmOF8IAr92oKWk36-f8alkEj9TrDQbiMoKGQwO5MTFY/20150105.jpg?psid=1)\n\n\n![enter image description here](https://kekaeq-ch3301.files.1drv.com/y3mN8FseIEbAaQfT8ynEIc4nYsOUK0p0IN7Hp39imVSZXNQXlSfAYmvaC-9bDM3Hq6rPCV1XgrgvoST8wXejwARXaDmXptZpb_nyWwUzWK1rzaJ6fSsYfnP0icRKUclaVxnlltOJSQiuTFO7_fCfabmv0AsrgL5sLo6GdVJmpd-L10/QQ%E5%9B%BE%E7%89%8720151003165909.jpg?psid=1)","slug":"classfield-property","published":1,"updated":"2016-10-15T05:20:24.876Z","comments":1,"photos":[],"link":"","_id":"cj0dyumwn00126kunndxbxsfj","content":"<p>#.NET 类字段与类属性<br>@(.NET)[基础|字段|属性]</p>\n<p>##字段<br>字段表示只读或可读/可写的数据值。<br>字段可以是静态的，这种字段被认为是类型状态的一部分。<br>字段也可以是实例（非静态），这种字段被认为是对象状态的一部分。<br>强烈建议把字段声明为私有，防止类型或对象的状态被类型外部代码破坏。</p>\n<p>##属性<br>属性允许用简单的、字段风格的语法设置或查询类型或对象的逻辑状态，同时保证状态不被破坏。<br>作用于类型称为静态属性，作用于对象称为实例属性。<br>属性可以无参，也可以有多个参数（相当少见，但集合类用的多）。 </p>\n<pre><code>using System;\n\npublic sealed class SomeType\n{                            //  1  \n// Nested class  \n   private class SomeNestedType { }                //  2  \n\n   // Constant, read­only, and static read/write field   \n   private const Int32 c_SomeConstant = 1;            //  3     \n\n   private readonly String m_SomeReadOnlyField = &quot;2&quot;;     //  4    \n\n   private static Int32 s_SomeReadWriteField = 3;      //  5  \n\n   // Type constructor  \n   static SomeType() { }                                  //  6  \n\n   // Instance constructors  \n   public SomeType(Int32 x) { }                           //  7  \n\n   public SomeType() { }                                  //  8 \n\n   // Instance and static methods  \n   private String InstanceMethod() { return null; }       // 9   \n\n   public static void Main() { }                        // 10 \n\n   // Instance property  \n   public Int32 SomeProp\n   {                                // 11      \n       get { return 0; }                                // 12      \n       set { }                                          // 13  \n   }\n\n   // Instance parameterful property (indexer) \n   public Int32 this[String s]\n   {                          // 14       \n       get { return 0; }                                // 15        \n       set { }                                          // 16  \n   }\n\n   // Instance event  \n   public event EventHandler SomeEvent;                  // 17  \n}\n</code></pre><p><img src=\"https://kekaeq-ch3301.files.1drv.com/y3meEWWaK-o9SNfr_fT71Xr3YrPqO1LIswWqMvlHyUxWeH8P0PtXsQlfRkDnGshlMJIy2gPsxNet14efOPOuX-dHmZhCTg8PXyELJR9tnayye4LeEQ6F997b8pSI84wBR6nmmOF8IAr92oKWk36-f8alkEj9TrDQbiMoKGQwO5MTFY/20150105.jpg?psid=1\" alt=\"enter image description here\"></p>\n<p><img src=\"https://kekaeq-ch3301.files.1drv.com/y3mN8FseIEbAaQfT8ynEIc4nYsOUK0p0IN7Hp39imVSZXNQXlSfAYmvaC-9bDM3Hq6rPCV1XgrgvoST8wXejwARXaDmXptZpb_nyWwUzWK1rzaJ6fSsYfnP0icRKUclaVxnlltOJSQiuTFO7_fCfabmv0AsrgL5sLo6GdVJmpd-L10/QQ%E5%9B%BE%E7%89%8720151003165909.jpg?psid=1\" alt=\"enter image description here\"></p>\n","excerpt":"","more":"<p>#.NET 类字段与类属性<br>@(.NET)[基础|字段|属性]</p>\n<p>##字段<br>字段表示只读或可读/可写的数据值。<br>字段可以是静态的，这种字段被认为是类型状态的一部分。<br>字段也可以是实例（非静态），这种字段被认为是对象状态的一部分。<br>强烈建议把字段声明为私有，防止类型或对象的状态被类型外部代码破坏。</p>\n<p>##属性<br>属性允许用简单的、字段风格的语法设置或查询类型或对象的逻辑状态，同时保证状态不被破坏。<br>作用于类型称为静态属性，作用于对象称为实例属性。<br>属性可以无参，也可以有多个参数（相当少见，但集合类用的多）。 </p>\n<pre><code>using System;\n\npublic sealed class SomeType\n{                            //  1  \n// Nested class  \n   private class SomeNestedType { }                //  2  \n\n   // Constant, read­only, and static read/write field   \n   private const Int32 c_SomeConstant = 1;            //  3     \n\n   private readonly String m_SomeReadOnlyField = &quot;2&quot;;     //  4    \n\n   private static Int32 s_SomeReadWriteField = 3;      //  5  \n\n   // Type constructor  \n   static SomeType() { }                                  //  6  \n\n   // Instance constructors  \n   public SomeType(Int32 x) { }                           //  7  \n\n   public SomeType() { }                                  //  8 \n\n   // Instance and static methods  \n   private String InstanceMethod() { return null; }       // 9   \n\n   public static void Main() { }                        // 10 \n\n   // Instance property  \n   public Int32 SomeProp\n   {                                // 11      \n       get { return 0; }                                // 12      \n       set { }                                          // 13  \n   }\n\n   // Instance parameterful property (indexer) \n   public Int32 this[String s]\n   {                          // 14       \n       get { return 0; }                                // 15        \n       set { }                                          // 16  \n   }\n\n   // Instance event  \n   public event EventHandler SomeEvent;                  // 17  \n}\n</code></pre><p><img src=\"https://kekaeq-ch3301.files.1drv.com/y3meEWWaK-o9SNfr_fT71Xr3YrPqO1LIswWqMvlHyUxWeH8P0PtXsQlfRkDnGshlMJIy2gPsxNet14efOPOuX-dHmZhCTg8PXyELJR9tnayye4LeEQ6F997b8pSI84wBR6nmmOF8IAr92oKWk36-f8alkEj9TrDQbiMoKGQwO5MTFY/20150105.jpg?psid=1\" alt=\"enter image description here\"></p>\n<p><img src=\"https://kekaeq-ch3301.files.1drv.com/y3mN8FseIEbAaQfT8ynEIc4nYsOUK0p0IN7Hp39imVSZXNQXlSfAYmvaC-9bDM3Hq6rPCV1XgrgvoST8wXejwARXaDmXptZpb_nyWwUzWK1rzaJ6fSsYfnP0icRKUclaVxnlltOJSQiuTFO7_fCfabmv0AsrgL5sLo6GdVJmpd-L10/QQ%E5%9B%BE%E7%89%8720151003165909.jpg?psid=1\" alt=\"enter image description here\"></p>\n"},{"layout":"post","title":"避免在函数或者操作中抛出异常","date":"2016-06-19T16:00:00.000Z","_content":"\n## 1、引言\n如某个场景下，你的函数或操作需要操作一个序列的对象，且在处理的过程中抛出了异常。这时如果没有一些状态记录之类的数据，我们不了解已经处理了多少的数据，也不知道应该采用怎么样的策略回滚，因此根本无法返回到之前的状态。\n我们看一下下面的一个代码：\n```csharp\nvar allEmp = FindAllEmployees();\nallEmp.ForEach(e => e.MonthlySalary *=1.05M);\n```\n这样的代码看起来没什么问题。可是某一天，这个程序运行时抛出了异常。抛出异常的位置可能未知，导致部分员工得到了加薪，另外的一些员工却没有。结果是除了人工检查数据，我们已经没有办法重新找回丢失的状态。\n\n这样的代码修改元素的方式导致发生了上面的问题。这段代码并没有遵循“强异常安全保证”规则。换而言之，在运行时遇到错误，我们无法得知具体发生了什么，没有发生什么。\n\n### 原则：如果我们能保证当方法无法完成时，程序的状态不会发生改变，这样的问题就不会发生。\n我们有几种方法都可以实现这样的需求，但是每种方法都有各自的优势和风险。\n\n## 2、在函数/操作中抛出异常\n显而易见的，不是所有的方法都会遇到这样的问题（异常导致状态丢失）。很多时候我们只是检查了一下序列中的元素，访问之后并不会修改其中的元素。这类的行为我们其实并不需要太过于小心。现在我们回到最开始的地方，对于上面的场景（为每位员工加薪百分之五），如果我们想遵循“强异常安全保证”原则，那应该如何修改这个方法呢？\n\n#### 第一种异常：获取数据的时候异常\n在上面的例子中，即使FindAllEmployees()函数抛出异常，导致我们无法正确让员工加薪。虽然这样的情况并不是导致我们的数据产生问题，但是该加薪的大家没有得到加薪，这是一个多么沮丧的事情呢。\n\n#### 解决方法：重写前面以lambda表达式给出的操作方法（即FindAllEmployees()方法），让其永远不会抛出异常。\n\n很多时候，我们在开始修改数据之前，先校验数据的合法性以及剔除错误数据（如果允许剔除的话）并不是非常困难。我们是可以采取这样的方法来实现我们的目的。不过在这里的话，我们就必须严格处理操作方法，使得它能满足所有情况下的需求。\n\n#### 第二种异常：lambda表达式中操作数据异常\n同样是上面的例子，如果我们在执行加薪操作的时候，提升了那些已经离职的员工薪资导致了异常，使得程序中断，状态丢失。这样的情况，我们在执行加薪操作前先过滤掉已离职的员工便是一种正确的做法。\n\n#### 解决方法：操作数据前通过校验过滤后再执行操作\n如：\n```csharp\nallEmp.Where(emp=>emp.Active).ForEach(e => e.MonthlySalary *=1.05M);\n```\n\n\n#### 第三种异常：执行操作的时候抛出异常\n有时候，我们根本无法保证处理方法的时候会不会抛出异常。这个时候就必须采取一些代价更加昂贵的处理方法了。\n\n#### 解决方法：创建副本尝试执行操作，副本无误后执行真正操作\n我们在编写这类代码的时候，应该考虑抛出异常之后的处理方案。这就意味着，我们的操作应该先在原数据副本上执行，随后仅在操作成功之后再将其替换原有的数据。\n如:\n\n```csharp\nvar updatas = (from e in allEmp \n              select new Emp\n              {\n                  EmpID=e.EmpID,\n                  .....\n                  MonthlySalary =e.MonthlySalary *=1.05M\n              }).ToList();\n\nallEmp = updatas;\n```\n\n但是这样的修改也引发了其他的问题：代码量增加了，同时生成副本也消耗了大量的资源。这样的做法也有一个好处，我们在操作副本数据时遇到异常之后，有充分的\"空间\"来处理这些数据。\n\n实际中，这意味着我们让查询表达式返回了新序列，而不是去修改原先序列中的元素。这样的话，我们在尝试完成所有的操作的同时，即使失败了，也不会影响到我们程序的原有状态。\n\n\n\n\n","source":"_posts/don’t-throw-exception-in-foreach.md","raw":"---\nlayout: post\ntitle: 避免在函数或者操作中抛出异常\ncategory: .net\ndate: 2016-06-20 00:00:00\n---\n\n## 1、引言\n如某个场景下，你的函数或操作需要操作一个序列的对象，且在处理的过程中抛出了异常。这时如果没有一些状态记录之类的数据，我们不了解已经处理了多少的数据，也不知道应该采用怎么样的策略回滚，因此根本无法返回到之前的状态。\n我们看一下下面的一个代码：\n```csharp\nvar allEmp = FindAllEmployees();\nallEmp.ForEach(e => e.MonthlySalary *=1.05M);\n```\n这样的代码看起来没什么问题。可是某一天，这个程序运行时抛出了异常。抛出异常的位置可能未知，导致部分员工得到了加薪，另外的一些员工却没有。结果是除了人工检查数据，我们已经没有办法重新找回丢失的状态。\n\n这样的代码修改元素的方式导致发生了上面的问题。这段代码并没有遵循“强异常安全保证”规则。换而言之，在运行时遇到错误，我们无法得知具体发生了什么，没有发生什么。\n\n### 原则：如果我们能保证当方法无法完成时，程序的状态不会发生改变，这样的问题就不会发生。\n我们有几种方法都可以实现这样的需求，但是每种方法都有各自的优势和风险。\n\n## 2、在函数/操作中抛出异常\n显而易见的，不是所有的方法都会遇到这样的问题（异常导致状态丢失）。很多时候我们只是检查了一下序列中的元素，访问之后并不会修改其中的元素。这类的行为我们其实并不需要太过于小心。现在我们回到最开始的地方，对于上面的场景（为每位员工加薪百分之五），如果我们想遵循“强异常安全保证”原则，那应该如何修改这个方法呢？\n\n#### 第一种异常：获取数据的时候异常\n在上面的例子中，即使FindAllEmployees()函数抛出异常，导致我们无法正确让员工加薪。虽然这样的情况并不是导致我们的数据产生问题，但是该加薪的大家没有得到加薪，这是一个多么沮丧的事情呢。\n\n#### 解决方法：重写前面以lambda表达式给出的操作方法（即FindAllEmployees()方法），让其永远不会抛出异常。\n\n很多时候，我们在开始修改数据之前，先校验数据的合法性以及剔除错误数据（如果允许剔除的话）并不是非常困难。我们是可以采取这样的方法来实现我们的目的。不过在这里的话，我们就必须严格处理操作方法，使得它能满足所有情况下的需求。\n\n#### 第二种异常：lambda表达式中操作数据异常\n同样是上面的例子，如果我们在执行加薪操作的时候，提升了那些已经离职的员工薪资导致了异常，使得程序中断，状态丢失。这样的情况，我们在执行加薪操作前先过滤掉已离职的员工便是一种正确的做法。\n\n#### 解决方法：操作数据前通过校验过滤后再执行操作\n如：\n```csharp\nallEmp.Where(emp=>emp.Active).ForEach(e => e.MonthlySalary *=1.05M);\n```\n\n\n#### 第三种异常：执行操作的时候抛出异常\n有时候，我们根本无法保证处理方法的时候会不会抛出异常。这个时候就必须采取一些代价更加昂贵的处理方法了。\n\n#### 解决方法：创建副本尝试执行操作，副本无误后执行真正操作\n我们在编写这类代码的时候，应该考虑抛出异常之后的处理方案。这就意味着，我们的操作应该先在原数据副本上执行，随后仅在操作成功之后再将其替换原有的数据。\n如:\n\n```csharp\nvar updatas = (from e in allEmp \n              select new Emp\n              {\n                  EmpID=e.EmpID,\n                  .....\n                  MonthlySalary =e.MonthlySalary *=1.05M\n              }).ToList();\n\nallEmp = updatas;\n```\n\n但是这样的修改也引发了其他的问题：代码量增加了，同时生成副本也消耗了大量的资源。这样的做法也有一个好处，我们在操作副本数据时遇到异常之后，有充分的\"空间\"来处理这些数据。\n\n实际中，这意味着我们让查询表达式返回了新序列，而不是去修改原先序列中的元素。这样的话，我们在尝试完成所有的操作的同时，即使失败了，也不会影响到我们程序的原有状态。\n\n\n\n\n","slug":"don’t-throw-exception-in-foreach","published":1,"updated":"2016-10-15T05:20:24.907Z","comments":1,"photos":[],"link":"","_id":"cj0dyumwp00156kunvl8u16ht","content":"<h2 id=\"1、引言\"><a href=\"#1、引言\" class=\"headerlink\" title=\"1、引言\"></a>1、引言</h2><p>如某个场景下，你的函数或操作需要操作一个序列的对象，且在处理的过程中抛出了异常。这时如果没有一些状态记录之类的数据，我们不了解已经处理了多少的数据，也不知道应该采用怎么样的策略回滚，因此根本无法返回到之前的状态。<br>我们看一下下面的一个代码：<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> allEmp = FindAllEmployees();</div><div class=\"line\">allEmp.ForEach(e =&gt; e.MonthlySalary *=<span class=\"number\">1.05</span>M);</div></pre></td></tr></table></figure></p>\n<p>这样的代码看起来没什么问题。可是某一天，这个程序运行时抛出了异常。抛出异常的位置可能未知，导致部分员工得到了加薪，另外的一些员工却没有。结果是除了人工检查数据，我们已经没有办法重新找回丢失的状态。</p>\n<p>这样的代码修改元素的方式导致发生了上面的问题。这段代码并没有遵循“强异常安全保证”规则。换而言之，在运行时遇到错误，我们无法得知具体发生了什么，没有发生什么。</p>\n<h3 id=\"原则：如果我们能保证当方法无法完成时，程序的状态不会发生改变，这样的问题就不会发生。\"><a href=\"#原则：如果我们能保证当方法无法完成时，程序的状态不会发生改变，这样的问题就不会发生。\" class=\"headerlink\" title=\"原则：如果我们能保证当方法无法完成时，程序的状态不会发生改变，这样的问题就不会发生。\"></a>原则：如果我们能保证当方法无法完成时，程序的状态不会发生改变，这样的问题就不会发生。</h3><p>我们有几种方法都可以实现这样的需求，但是每种方法都有各自的优势和风险。</p>\n<h2 id=\"2、在函数-操作中抛出异常\"><a href=\"#2、在函数-操作中抛出异常\" class=\"headerlink\" title=\"2、在函数/操作中抛出异常\"></a>2、在函数/操作中抛出异常</h2><p>显而易见的，不是所有的方法都会遇到这样的问题（异常导致状态丢失）。很多时候我们只是检查了一下序列中的元素，访问之后并不会修改其中的元素。这类的行为我们其实并不需要太过于小心。现在我们回到最开始的地方，对于上面的场景（为每位员工加薪百分之五），如果我们想遵循“强异常安全保证”原则，那应该如何修改这个方法呢？</p>\n<h4 id=\"第一种异常：获取数据的时候异常\"><a href=\"#第一种异常：获取数据的时候异常\" class=\"headerlink\" title=\"第一种异常：获取数据的时候异常\"></a>第一种异常：获取数据的时候异常</h4><p>在上面的例子中，即使FindAllEmployees()函数抛出异常，导致我们无法正确让员工加薪。虽然这样的情况并不是导致我们的数据产生问题，但是该加薪的大家没有得到加薪，这是一个多么沮丧的事情呢。</p>\n<h4 id=\"解决方法：重写前面以lambda表达式给出的操作方法（即FindAllEmployees-方法），让其永远不会抛出异常。\"><a href=\"#解决方法：重写前面以lambda表达式给出的操作方法（即FindAllEmployees-方法），让其永远不会抛出异常。\" class=\"headerlink\" title=\"解决方法：重写前面以lambda表达式给出的操作方法（即FindAllEmployees()方法），让其永远不会抛出异常。\"></a>解决方法：重写前面以lambda表达式给出的操作方法（即FindAllEmployees()方法），让其永远不会抛出异常。</h4><p>很多时候，我们在开始修改数据之前，先校验数据的合法性以及剔除错误数据（如果允许剔除的话）并不是非常困难。我们是可以采取这样的方法来实现我们的目的。不过在这里的话，我们就必须严格处理操作方法，使得它能满足所有情况下的需求。</p>\n<h4 id=\"第二种异常：lambda表达式中操作数据异常\"><a href=\"#第二种异常：lambda表达式中操作数据异常\" class=\"headerlink\" title=\"第二种异常：lambda表达式中操作数据异常\"></a>第二种异常：lambda表达式中操作数据异常</h4><p>同样是上面的例子，如果我们在执行加薪操作的时候，提升了那些已经离职的员工薪资导致了异常，使得程序中断，状态丢失。这样的情况，我们在执行加薪操作前先过滤掉已离职的员工便是一种正确的做法。</p>\n<h4 id=\"解决方法：操作数据前通过校验过滤后再执行操作\"><a href=\"#解决方法：操作数据前通过校验过滤后再执行操作\" class=\"headerlink\" title=\"解决方法：操作数据前通过校验过滤后再执行操作\"></a>解决方法：操作数据前通过校验过滤后再执行操作</h4><p>如：<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">allEmp.Where(emp=&gt;emp.Active).ForEach(e =&gt; e.MonthlySalary *=<span class=\"number\">1.05</span>M);</div></pre></td></tr></table></figure></p>\n<h4 id=\"第三种异常：执行操作的时候抛出异常\"><a href=\"#第三种异常：执行操作的时候抛出异常\" class=\"headerlink\" title=\"第三种异常：执行操作的时候抛出异常\"></a>第三种异常：执行操作的时候抛出异常</h4><p>有时候，我们根本无法保证处理方法的时候会不会抛出异常。这个时候就必须采取一些代价更加昂贵的处理方法了。</p>\n<h4 id=\"解决方法：创建副本尝试执行操作，副本无误后执行真正操作\"><a href=\"#解决方法：创建副本尝试执行操作，副本无误后执行真正操作\" class=\"headerlink\" title=\"解决方法：创建副本尝试执行操作，副本无误后执行真正操作\"></a>解决方法：创建副本尝试执行操作，副本无误后执行真正操作</h4><p>我们在编写这类代码的时候，应该考虑抛出异常之后的处理方案。这就意味着，我们的操作应该先在原数据副本上执行，随后仅在操作成功之后再将其替换原有的数据。<br>如:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> updatas = (<span class=\"keyword\">from</span> e <span class=\"keyword\">in</span> allEmp </div><div class=\"line\">              <span class=\"keyword\">select</span> <span class=\"keyword\">new</span> Emp</div><div class=\"line\">              &#123;</div><div class=\"line\">                  EmpID=e.EmpID,</div><div class=\"line\">                  .....</div><div class=\"line\">                  MonthlySalary =e.MonthlySalary *=<span class=\"number\">1.05</span>M</div><div class=\"line\">              &#125;).ToList();</div><div class=\"line\"></div><div class=\"line\">allEmp = updatas;</div></pre></td></tr></table></figure>\n<p>但是这样的修改也引发了其他的问题：代码量增加了，同时生成副本也消耗了大量的资源。这样的做法也有一个好处，我们在操作副本数据时遇到异常之后，有充分的”空间”来处理这些数据。</p>\n<p>实际中，这意味着我们让查询表达式返回了新序列，而不是去修改原先序列中的元素。这样的话，我们在尝试完成所有的操作的同时，即使失败了，也不会影响到我们程序的原有状态。</p>\n","excerpt":"","more":"<h2 id=\"1、引言\"><a href=\"#1、引言\" class=\"headerlink\" title=\"1、引言\"></a>1、引言</h2><p>如某个场景下，你的函数或操作需要操作一个序列的对象，且在处理的过程中抛出了异常。这时如果没有一些状态记录之类的数据，我们不了解已经处理了多少的数据，也不知道应该采用怎么样的策略回滚，因此根本无法返回到之前的状态。<br>我们看一下下面的一个代码：<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> allEmp = FindAllEmployees();</div><div class=\"line\">allEmp.ForEach(e =&gt; e.MonthlySalary *=<span class=\"number\">1.05</span>M);</div></pre></td></tr></table></figure></p>\n<p>这样的代码看起来没什么问题。可是某一天，这个程序运行时抛出了异常。抛出异常的位置可能未知，导致部分员工得到了加薪，另外的一些员工却没有。结果是除了人工检查数据，我们已经没有办法重新找回丢失的状态。</p>\n<p>这样的代码修改元素的方式导致发生了上面的问题。这段代码并没有遵循“强异常安全保证”规则。换而言之，在运行时遇到错误，我们无法得知具体发生了什么，没有发生什么。</p>\n<h3 id=\"原则：如果我们能保证当方法无法完成时，程序的状态不会发生改变，这样的问题就不会发生。\"><a href=\"#原则：如果我们能保证当方法无法完成时，程序的状态不会发生改变，这样的问题就不会发生。\" class=\"headerlink\" title=\"原则：如果我们能保证当方法无法完成时，程序的状态不会发生改变，这样的问题就不会发生。\"></a>原则：如果我们能保证当方法无法完成时，程序的状态不会发生改变，这样的问题就不会发生。</h3><p>我们有几种方法都可以实现这样的需求，但是每种方法都有各自的优势和风险。</p>\n<h2 id=\"2、在函数-操作中抛出异常\"><a href=\"#2、在函数-操作中抛出异常\" class=\"headerlink\" title=\"2、在函数/操作中抛出异常\"></a>2、在函数/操作中抛出异常</h2><p>显而易见的，不是所有的方法都会遇到这样的问题（异常导致状态丢失）。很多时候我们只是检查了一下序列中的元素，访问之后并不会修改其中的元素。这类的行为我们其实并不需要太过于小心。现在我们回到最开始的地方，对于上面的场景（为每位员工加薪百分之五），如果我们想遵循“强异常安全保证”原则，那应该如何修改这个方法呢？</p>\n<h4 id=\"第一种异常：获取数据的时候异常\"><a href=\"#第一种异常：获取数据的时候异常\" class=\"headerlink\" title=\"第一种异常：获取数据的时候异常\"></a>第一种异常：获取数据的时候异常</h4><p>在上面的例子中，即使FindAllEmployees()函数抛出异常，导致我们无法正确让员工加薪。虽然这样的情况并不是导致我们的数据产生问题，但是该加薪的大家没有得到加薪，这是一个多么沮丧的事情呢。</p>\n<h4 id=\"解决方法：重写前面以lambda表达式给出的操作方法（即FindAllEmployees-方法），让其永远不会抛出异常。\"><a href=\"#解决方法：重写前面以lambda表达式给出的操作方法（即FindAllEmployees-方法），让其永远不会抛出异常。\" class=\"headerlink\" title=\"解决方法：重写前面以lambda表达式给出的操作方法（即FindAllEmployees()方法），让其永远不会抛出异常。\"></a>解决方法：重写前面以lambda表达式给出的操作方法（即FindAllEmployees()方法），让其永远不会抛出异常。</h4><p>很多时候，我们在开始修改数据之前，先校验数据的合法性以及剔除错误数据（如果允许剔除的话）并不是非常困难。我们是可以采取这样的方法来实现我们的目的。不过在这里的话，我们就必须严格处理操作方法，使得它能满足所有情况下的需求。</p>\n<h4 id=\"第二种异常：lambda表达式中操作数据异常\"><a href=\"#第二种异常：lambda表达式中操作数据异常\" class=\"headerlink\" title=\"第二种异常：lambda表达式中操作数据异常\"></a>第二种异常：lambda表达式中操作数据异常</h4><p>同样是上面的例子，如果我们在执行加薪操作的时候，提升了那些已经离职的员工薪资导致了异常，使得程序中断，状态丢失。这样的情况，我们在执行加薪操作前先过滤掉已离职的员工便是一种正确的做法。</p>\n<h4 id=\"解决方法：操作数据前通过校验过滤后再执行操作\"><a href=\"#解决方法：操作数据前通过校验过滤后再执行操作\" class=\"headerlink\" title=\"解决方法：操作数据前通过校验过滤后再执行操作\"></a>解决方法：操作数据前通过校验过滤后再执行操作</h4><p>如：<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">allEmp.Where(emp=&gt;emp.Active).ForEach(e =&gt; e.MonthlySalary *=<span class=\"number\">1.05</span>M);</div></pre></td></tr></table></figure></p>\n<h4 id=\"第三种异常：执行操作的时候抛出异常\"><a href=\"#第三种异常：执行操作的时候抛出异常\" class=\"headerlink\" title=\"第三种异常：执行操作的时候抛出异常\"></a>第三种异常：执行操作的时候抛出异常</h4><p>有时候，我们根本无法保证处理方法的时候会不会抛出异常。这个时候就必须采取一些代价更加昂贵的处理方法了。</p>\n<h4 id=\"解决方法：创建副本尝试执行操作，副本无误后执行真正操作\"><a href=\"#解决方法：创建副本尝试执行操作，副本无误后执行真正操作\" class=\"headerlink\" title=\"解决方法：创建副本尝试执行操作，副本无误后执行真正操作\"></a>解决方法：创建副本尝试执行操作，副本无误后执行真正操作</h4><p>我们在编写这类代码的时候，应该考虑抛出异常之后的处理方案。这就意味着，我们的操作应该先在原数据副本上执行，随后仅在操作成功之后再将其替换原有的数据。<br>如:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> updatas = (<span class=\"keyword\">from</span> e <span class=\"keyword\">in</span> allEmp </div><div class=\"line\">              <span class=\"keyword\">select</span> <span class=\"keyword\">new</span> Emp</div><div class=\"line\">              &#123;</div><div class=\"line\">                  EmpID=e.EmpID,</div><div class=\"line\">                  .....</div><div class=\"line\">                  MonthlySalary =e.MonthlySalary *=<span class=\"number\">1.05</span>M</div><div class=\"line\">              &#125;).ToList();</div><div class=\"line\"></div><div class=\"line\">allEmp = updatas;</div></pre></td></tr></table></figure>\n<p>但是这样的修改也引发了其他的问题：代码量增加了，同时生成副本也消耗了大量的资源。这样的做法也有一个好处，我们在操作副本数据时遇到异常之后，有充分的”空间”来处理这些数据。</p>\n<p>实际中，这意味着我们让查询表达式返回了新序列，而不是去修改原先序列中的元素。这样的话，我们在尝试完成所有的操作的同时，即使失败了，也不会影响到我们程序的原有状态。</p>\n"},{"layout":"post","title":"hexo memorandum","date":"2015-12-31T16:00:00.000Z","_content":"\n\n## [Markdown 语法说明 (简体中文版)](http://wowubuntu.com/markdown/)\n\n## [Markdown: Basics （快速入门）](http://wowubuntu.com/markdown/basic.html)\n\n## [使用GitHub和Hexo搭建免费静态Blog(本博客案例)](http://wsgzao.github.io/post/hexo-guide/)\n### 安装Hexo\n```javascript\nnpm install hexo-cli -g\nnpm install hexo --save\n\n#如果命令无法运行，可以尝试更换taobao的npm源\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n### 安装Hexo插件\n```javascript\nnpm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save\nnpm install hexo-server --save\nnpm install hexo-deployer-git --save\nnpm install hexo-deployer-heroku --save\nnpm install hexo-deployer-rsync --save\nnpm install hexo-deployer-openshift --save\nnpm install hexo-renderer-marked@0.2 --save\nnpm install hexo-renderer-stylus@0.2 --save\nnpm install hexo-generator-feed@1 --save\nnpm install hexo-generator-sitemap@1 --save\n\n```\n\n## [win下面的git客户端提示FIlename too long解决方法](https://www.mxgw.info/t/filename-too-long-in-git.html)\n```javascript\ngit config --global core.longpaths true\n```\n\n## [git-ssh 配置和使用](https://segmentfault.com/a/1190000002645623)\n\n\n## [https://unbug.github.io/codelf/ 谁用谁知道](https://unbug.github.io/codelf/)\n\n\n\n\n","source":"_posts/hexo_memorandum.md","raw":"---\nlayout: post\ntitle: hexo memorandum\ncategory: memorandum\ndate: 2016-01-01 00:00:00\ntags:\n- hexo\n---\n\n\n## [Markdown 语法说明 (简体中文版)](http://wowubuntu.com/markdown/)\n\n## [Markdown: Basics （快速入门）](http://wowubuntu.com/markdown/basic.html)\n\n## [使用GitHub和Hexo搭建免费静态Blog(本博客案例)](http://wsgzao.github.io/post/hexo-guide/)\n### 安装Hexo\n```javascript\nnpm install hexo-cli -g\nnpm install hexo --save\n\n#如果命令无法运行，可以尝试更换taobao的npm源\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n### 安装Hexo插件\n```javascript\nnpm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save\nnpm install hexo-server --save\nnpm install hexo-deployer-git --save\nnpm install hexo-deployer-heroku --save\nnpm install hexo-deployer-rsync --save\nnpm install hexo-deployer-openshift --save\nnpm install hexo-renderer-marked@0.2 --save\nnpm install hexo-renderer-stylus@0.2 --save\nnpm install hexo-generator-feed@1 --save\nnpm install hexo-generator-sitemap@1 --save\n\n```\n\n## [win下面的git客户端提示FIlename too long解决方法](https://www.mxgw.info/t/filename-too-long-in-git.html)\n```javascript\ngit config --global core.longpaths true\n```\n\n## [git-ssh 配置和使用](https://segmentfault.com/a/1190000002645623)\n\n\n## [https://unbug.github.io/codelf/ 谁用谁知道](https://unbug.github.io/codelf/)\n\n\n\n\n","slug":"hexo_memorandum","published":1,"updated":"2017-01-09T14:24:06.395Z","comments":1,"photos":[],"link":"","_id":"cj0dyumws00186kuns5pzdqzx","content":"<h2 id=\"Markdown-语法说明-简体中文版\"><a href=\"#Markdown-语法说明-简体中文版\" class=\"headerlink\" title=\"Markdown 语法说明 (简体中文版)\"></a><a href=\"http://wowubuntu.com/markdown/\" target=\"_blank\" rel=\"external\">Markdown 语法说明 (简体中文版)</a></h2><h2 id=\"Markdown-Basics-（快速入门）\"><a href=\"#Markdown-Basics-（快速入门）\" class=\"headerlink\" title=\"Markdown: Basics （快速入门）\"></a><a href=\"http://wowubuntu.com/markdown/basic.html\" target=\"_blank\" rel=\"external\">Markdown: Basics （快速入门）</a></h2><h2 id=\"使用GitHub和Hexo搭建免费静态Blog-本博客案例\"><a href=\"#使用GitHub和Hexo搭建免费静态Blog-本博客案例\" class=\"headerlink\" title=\"使用GitHub和Hexo搭建免费静态Blog(本博客案例)\"></a><a href=\"http://wsgzao.github.io/post/hexo-guide/\" target=\"_blank\" rel=\"external\">使用GitHub和Hexo搭建免费静态Blog(本博客案例)</a></h2><h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-cli -g</div><div class=\"line\">npm install hexo --save</div><div class=\"line\"></div><div class=\"line\">#如果命令无法运行，可以尝试更换taobao的npm源</div><div class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>\n<h3 id=\"安装Hexo插件\"><a href=\"#安装Hexo插件\" class=\"headerlink\" title=\"安装Hexo插件\"></a>安装Hexo插件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-generator-index --save</div><div class=\"line\">npm install hexo-generator-archive --save</div><div class=\"line\">npm install hexo-generator-category --save</div><div class=\"line\">npm install hexo-generator-tag --save</div><div class=\"line\">npm install hexo-server --save</div><div class=\"line\">npm install hexo-deployer-git --save</div><div class=\"line\">npm install hexo-deployer-heroku --save</div><div class=\"line\">npm install hexo-deployer-rsync --save</div><div class=\"line\">npm install hexo-deployer-openshift --save</div><div class=\"line\">npm install hexo-renderer-marked@<span class=\"number\">0.2</span> --save</div><div class=\"line\">npm install hexo-renderer-stylus@<span class=\"number\">0.2</span> --save</div><div class=\"line\">npm install hexo-generator-feed@<span class=\"number\">1</span> --save</div><div class=\"line\">npm install hexo-generator-sitemap@<span class=\"number\">1</span> --save</div></pre></td></tr></table></figure>\n<h2 id=\"win下面的git客户端提示FIlename-too-long解决方法\"><a href=\"#win下面的git客户端提示FIlename-too-long解决方法\" class=\"headerlink\" title=\"win下面的git客户端提示FIlename too long解决方法\"></a><a href=\"https://www.mxgw.info/t/filename-too-long-in-git.html\" target=\"_blank\" rel=\"external\">win下面的git客户端提示FIlename too long解决方法</a></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global core.longpaths <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<h2 id=\"git-ssh-配置和使用\"><a href=\"#git-ssh-配置和使用\" class=\"headerlink\" title=\"git-ssh 配置和使用\"></a><a href=\"https://segmentfault.com/a/1190000002645623\" target=\"_blank\" rel=\"external\">git-ssh 配置和使用</a></h2><h2 id=\"https-unbug-github-io-codelf-谁用谁知道\"><a href=\"#https-unbug-github-io-codelf-谁用谁知道\" class=\"headerlink\" title=\"https://unbug.github.io/codelf/ 谁用谁知道\"></a><a href=\"https://unbug.github.io/codelf/\" target=\"_blank\" rel=\"external\">https://unbug.github.io/codelf/ 谁用谁知道</a></h2>","excerpt":"","more":"<h2 id=\"Markdown-语法说明-简体中文版\"><a href=\"#Markdown-语法说明-简体中文版\" class=\"headerlink\" title=\"Markdown 语法说明 (简体中文版)\"></a><a href=\"http://wowubuntu.com/markdown/\">Markdown 语法说明 (简体中文版)</a></h2><h2 id=\"Markdown-Basics-（快速入门）\"><a href=\"#Markdown-Basics-（快速入门）\" class=\"headerlink\" title=\"Markdown: Basics （快速入门）\"></a><a href=\"http://wowubuntu.com/markdown/basic.html\">Markdown: Basics （快速入门）</a></h2><h2 id=\"使用GitHub和Hexo搭建免费静态Blog-本博客案例\"><a href=\"#使用GitHub和Hexo搭建免费静态Blog-本博客案例\" class=\"headerlink\" title=\"使用GitHub和Hexo搭建免费静态Blog(本博客案例)\"></a><a href=\"http://wsgzao.github.io/post/hexo-guide/\">使用GitHub和Hexo搭建免费静态Blog(本博客案例)</a></h2><h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-cli -g</div><div class=\"line\">npm install hexo --save</div><div class=\"line\"></div><div class=\"line\">#如果命令无法运行，可以尝试更换taobao的npm源</div><div class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>\n<h3 id=\"安装Hexo插件\"><a href=\"#安装Hexo插件\" class=\"headerlink\" title=\"安装Hexo插件\"></a>安装Hexo插件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-generator-index --save</div><div class=\"line\">npm install hexo-generator-archive --save</div><div class=\"line\">npm install hexo-generator-category --save</div><div class=\"line\">npm install hexo-generator-tag --save</div><div class=\"line\">npm install hexo-server --save</div><div class=\"line\">npm install hexo-deployer-git --save</div><div class=\"line\">npm install hexo-deployer-heroku --save</div><div class=\"line\">npm install hexo-deployer-rsync --save</div><div class=\"line\">npm install hexo-deployer-openshift --save</div><div class=\"line\">npm install hexo-renderer-marked@<span class=\"number\">0.2</span> --save</div><div class=\"line\">npm install hexo-renderer-stylus@<span class=\"number\">0.2</span> --save</div><div class=\"line\">npm install hexo-generator-feed@<span class=\"number\">1</span> --save</div><div class=\"line\">npm install hexo-generator-sitemap@<span class=\"number\">1</span> --save</div></pre></td></tr></table></figure>\n<h2 id=\"win下面的git客户端提示FIlename-too-long解决方法\"><a href=\"#win下面的git客户端提示FIlename-too-long解决方法\" class=\"headerlink\" title=\"win下面的git客户端提示FIlename too long解决方法\"></a><a href=\"https://www.mxgw.info/t/filename-too-long-in-git.html\">win下面的git客户端提示FIlename too long解决方法</a></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global core.longpaths <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<h2 id=\"git-ssh-配置和使用\"><a href=\"#git-ssh-配置和使用\" class=\"headerlink\" title=\"git-ssh 配置和使用\"></a><a href=\"https://segmentfault.com/a/1190000002645623\">git-ssh 配置和使用</a></h2><h2 id=\"https-unbug-github-io-codelf-谁用谁知道\"><a href=\"#https-unbug-github-io-codelf-谁用谁知道\" class=\"headerlink\" title=\"https://unbug.github.io/codelf/ 谁用谁知道\"></a><a href=\"https://unbug.github.io/codelf/\">https://unbug.github.io/codelf/ 谁用谁知道</a></h2>"},{"layout":"post","title":"手把手教你用.NET Core写爬虫","date":"2016-12-03T16:00:00.000Z","_content":"\n### 写在前面\n自从上一个项目[58HouseSearch](https://github.com/liguobao/58HouseSearch)从.NET迁移到.NET core之后，磕磕碰碰磨蹭了一个月才正式上线到新版本。\n然后最近又开了个新坑，搞了个[Dy2018Crawler](http://codelover.win/)用来爬dy2018电影天堂上面的电影资源。这里也借机简单介绍一下如何基于.NET Core写一个爬虫。\nPS：如有偏错，敬请指明...\nPPS:该去电影院还是多去电影院，毕竟美人良时可无价。\n\n### 准备工作（.NET Core准备）\n首先，肯定是先安装.NET Core咯。下载及安装教程在这里：[.NET - Powerful Open Source Development](https://www.microsoft.com/net/core)。无论你是Windows、linux还是mac，统统可以玩。\n\n我这里的环境是：Windows10 + VS2015 community updata3 + .NET Core 1.1.0 SDK + .NET Core 1.0.1 tools Preview 2.\n\n理论上，只需要安装一下 .NET Core 1.1.0 SDK 即可开发.NET Core程序，至于用什么工具写代码都无关紧要了。\n\n安装好以上工具之后，在VS2015的新建项目就可以看到.NET Core的模板了。如下图：\n\n![](https://www.microsoft.com/net/images/screenshots/FileNewProject.png)\n\n为了简单起见，我们创建的时候，直接选择VS .NET Core tools自带的模板。\n\n### 一个爬虫的自我修养\n#### 分析网页\n写爬虫之前，我们首先要先去了解一下即将要爬取的网页数据组成。\n\n具体到网页的话，便是分析我们要抓取的数据在HTML里面是用什么标签抑或有什么样的标记，然后使用这个标记把数据从HTML中提取出来。在我这里的话，用的更多的是HTML标签的ID和CSS属性。\n\n以本文章想要爬取的dy2018.com为例,简单描述一下这个过程。dy2018.com主页如下图：\n\n![](http://7xrayk.com1.z0.glb.clouddn.com/123.png)\n\n在chrome里面，按F12进入开发者模式，接着如下图使用鼠标选择对应页面数据，然后去分析页面HTML组成。\n\n![](http://7xrayk.com1.z0.glb.clouddn.com/chromeF12_Select_HTML.png)\n\n\n接着我们开始分析页面数据:\n\n![](http://7xrayk.com1.z0.glb.clouddn.com/chrome_dy2018_lstmovie_divclass.png)\n\n![](http://7xrayk.com1.z0.glb.clouddn.com/chrome_dy2018_a.png)\n\n经过简单分析HTML，我们得到以下结论：\n\n1. www.dy2018.com首页的电影数据存储在一个class为co_content222的div标签里面\n\n2. 电影详情链接为a标签，标签显示文本就是电影名称，URL即详情URL\n\n那么总结下来，我们的工作就是：找到class='co_content222' 的div标签，从里面提取所有的a标签数据。\n\n#### 开始写代码...\n\n之前在写[58HouseSearch项目迁移到asp.net core](https://zhuanlan.zhihu.com/p/22764927)简单提过AngleSharp库，一个基于.NET（C#）开发的专门为解析xHTML源码的DLL组件。\n\n1. AngleSharp主页在这里：[https://anglesharp.github.io/](https://anglesharp.github.io/)，\n\n2. 博客园文章：[解析HTML利器AngleSharp介绍](http://www.cnblogs.com/pandait/p/AngleSharp.html)，\n\n3. Nuget地址:[Nuget AngleSharp](https://www.nuget.org/packages/AngleSharp) 安装命令：Install-Package AngleSharp\n\n##### 获取电影列表数据\n``` csharp\nprivate static HtmlParser htmlParser = new HtmlParser();\n\nprivate  ConcurrentDictionary<string, MovieInfo> _cdMovieInfo = new ConcurrentDictionary<string, MovieInfo>();\nprivate void AddToHotMovieList()\n{\n\t//此操作不阻塞当前其他操作，所以使用Task\n\t// _cdMovieInfo 为线程安全字典，存储了当期所有的电影数据\n\tTask.Factory.StartNew(()=> \n\t{\n\t    try\n\t    {\n\t        //通过URL获取HTML\n\t        var htmlDoc = HTTPHelper.GetHTMLByURL(\"http://www.dy2018.com/\");\n\t        //HTML 解析成 IDocument\n\t        var dom = htmlParser.Parse(htmlDoc);\n\t        //从dom中提取所有class='co_content222'的div标签\n\t        //QuerySelectorAll方法接受 选择器语法 \n\t        var lstDivInfo = dom.QuerySelectorAll(\"div.co_content222\");\n\t        if (lstDivInfo != null)\n\t        {\n\t            //前三个DIV为新电影\n\t            foreach (var divInfo in lstDivInfo.Take(3))\n\t            {\n\t                //获取div中所有的a标签且a标签中含有\"/i/\"的\n\t                //Contains(\"/i/\") 条件的过滤是因为在测试中发现这一块div中的a标签有可能是广告链接\n\t                divInfo.QuerySelectorAll(\"a\").Where(a => \n\t                a.GetAttribute(\"href\").Contains(\"/i/\"))\n\t                .ToList().ForEach(\n\t                a =>\n\t                {\n\t                    //拼接成完整链接\n\t                    var onlineURL = \"http://www.dy2018.com\" + a.GetAttribute(\"href\");\n\t                    //看一下是否已经存在于现有数据中\n\t                    if (!_cdMovieInfo.ContainsKey(onlineURL))\n\t                    {\n\t                        //获取电影的详细信息\n\t                        MovieInfo movieInfo = FillMovieInfoFormWeb(a, onlineURL);\n\t                        //下载链接不为空才添加到现有数据\n\t                        if (movieInfo.XunLeiDownLoadURLList != null \n\t                        && movieInfo.XunLeiDownLoadURLList.Count != 0)\n\t                        {\n\t                             _cdMovieInfo.TryAdd\n\t                             (movieInfo.Dy2018OnlineUrl,movieInfo);\n\t                        }\n\t                    }\n\t                });\n\t            }\n\t        }\n\t\n\t    }\n\t    catch(Exception ex)\n\t    {\n\t\n\t    }\n\t});\n}\n\n```\n\n#### 获取电影详细信息\n```csharp\n private MovieInfo FillMovieInfoFormWeb(AngleSharp.Dom.IElement a, \n string onlineURL)\n{\n    var movieHTML = HTTPHelper.GetHTMLByURL(onlineURL);\n    var movieDoc = htmlParser.Parse(movieHTML);\n    //http://www.dy2018.com/i/97462.html 分析过程见上，不再赘述\n    //电影的详细介绍 在id为Zoom的标签中\n    var zoom = movieDoc.GetElementById(\"Zoom\");\n    //下载链接在 bgcolor='#fdfddf'的td中，有可能有多个链接\n    var lstDownLoadURL = movieDoc.QuerySelectorAll(\"[bgcolor='#fdfddf']\");\n    //发布时间 在class='updatetime'的span标签中\n    var updatetime = movieDoc.QuerySelector(\"span.updatetime\"); \n    var pubDate = DateTime.Now;\n    if(updatetime!=null && !string.IsNullOrEmpty(updatetime.InnerHtml))\n    {\n        //内容带有“发布时间：”字样，\n        //replace成\"\"之后再去转换，转换失败不影响流程\n        DateTime.TryParse(updatetime.InnerHtml.Replace(\"发布时间：\", \n        \"\"), out pubDate);\n    }\n    \n\n    var movieInfo = new MovieInfo()\n    {\n        //InnerHtml中可能还包含font标签，做多一个Replace\n        MovieName = a.InnerHtml.Replace(\"<font color=\\\"#0c9000\\\">\",\"\")\n        .Replace(\"<font color=\\\"\t#0c9000\\\">\",\"\")\n        .Replace(\"</font>\", \"\"),\n        Dy2018OnlineUrl = onlineURL,\n        MovieIntro = zoom != null ? WebUtility.HtmlEncode(zoom.InnerHtml) : \"暂无介绍...\",\n        //可能没有简介，虽然好像不怎么可能\n        XunLeiDownLoadURLList = lstDownLoadURL != null ?\n        lstDownLoadURL.Select(d => d.FirstElementChild.InnerHtml).ToList() : null,\n        //可能没有下载链接\n        PubDate = pubDate,\n    };\n    return movieInfo;\n}\n```\n\n#### HTTPHelper\n这边有个小坑，dy2018网页编码格式是GB2312,.NET Core默认不支持GB2312，使用Encoding.GetEncoding(\"GB2312\")的时候会抛出异常。\n\n解决方案是手动安装System.Text.Encoding.CodePages包(Install-Package System.Text.Encoding.CodePages),\n\n然后在Starup.cs的Configure方法中加入Encoding.RegisterProvider(CodePagesEncodingProvider.Instance),接着就可以正常使用Encoding.GetEncoding(\"GB2312\")了。\n\n```csharp\nusing System;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\n\nnamespace Dy2018Crawler\n{\n    public class HTTPHelper\n    {\n\n        public static HttpClient Client { get; } = new HttpClient();\n\n        public static string GetHTMLByURL(string url)\n        {\n            try\n            {\n                System.Net.WebRequest wRequest = System.Net.WebRequest.Create(url);\n                wRequest.ContentType = \"text/html; charset=gb2312\";\n\n                wRequest.Method = \"get\";\n                wRequest.UseDefaultCredentials = true;\n                // Get the response instance.\n                var task = wRequest.GetResponseAsync();\n                System.Net.WebResponse wResp = task.Result;\n                System.IO.Stream respStream = wResp.GetResponseStream();\n                //dy2018这个网站编码方式是GB2312,\n                using (System.IO.StreamReader reader =\n                new System.IO.StreamReader(respStream,\n                Encoding.GetEncoding(\"GB2312\")))\n                {\n                    return reader.ReadToEnd();\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex.ToString());\n                return string.Empty;\n            }\n        }\n       \n    }\n\n\n}\n\n```\n\n\n### 定时任务的实现\n定时任务我这里使用的是[Pomelo.AspNetCore.TimedJob](https://www.nuget.org/packages/Pomelo.AspNetCore.TimedJob/1.1.0-rtm-10026)。\n\nPomelo.AspNetCore.TimedJob是一个.NET Core实现的定时任务job库，支持毫秒级定时任务、从数据库读取定时配置、同步异步定时任务等功能。\n\n由.NET Core社区大神兼前微软MVP[AmamiyaYuuko](https://www.nuget.org/profiles/AmamiyaYuuko)(入职微软之后就卸任MVP...)开发维护，不过好像没有开源，回头问下看看能不能开源掉。\n\nnuget上有各种版本，按需自取。地址：https://www.nuget.org/packages/Pomelo.AspNetCore.TimedJob/1.1.0-rtm-10026\n\n作者自己的介绍文章：[Timed Job - Pomelo扩展包系列](http://www.1234.sh/post/pomelo-extensions-timed-jobs)\n\n\n#### Startup.cs相关代码\n我这边使用的话，首先肯定是先安装对应的包：Install-Package Pomelo.AspNetCore.TimedJob -Pre\n\n然后在Startup.cs的ConfigureServices函数里面添加Service,在Configure函数里面Use一下。\n\n```csharp\n// This method gets called by the runtime. Use this method to add services to the container.\npublic void ConfigureServices(IServiceCollection services)\n{\n    // Add framework services.\n    services.AddMvc();\n    //Add TimedJob services\n    services.AddTimedJob();\n}\n\n public void Configure(IApplicationBuilder app, \n IHostingEnvironment env, ILoggerFactory loggerFactory)\n{\n    //使用TimedJob\n    app.UseTimedJob();\n\n    if (env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n        app.UseBrowserLink();\n    }\n    else\n    {\n        app.UseExceptionHandler(\"/Home/Error\");\n    }\n\n    app.UseStaticFiles();\n\n    app.UseMvc(routes =>\n    {\n        routes.MapRoute(\n            name: \"default\",\n            template: \"{controller=Home}/{action=Index}/{id?}\");\n    });\n    Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);\n}\n        \n```\n\n\n#### Job相关代码\n\n接着新建一个类，明明为XXXJob.cs,引用命名空间using Pomelo.AspNetCore.TimedJob，XXXJob继承于Job，添加以下代码。\n\n```\n    public class AutoGetMovieListJob:Job\n    {\n        \n        // Begin 起始时间；Interval执行时间间隔，单位是毫秒，建议使用以下格式，此处为3小时；\n        //SkipWhileExecuting是否等待上一个执行完成，true为等待；\n        [Invoke(Begin = \"2016-11-29 22:10\", Interval = 1000 * 3600*3, SkipWhileExecuting =true)]\n        public void Run()\n        {\n             //Job要执行的逻辑代码\n             \n            //LogHelper.Info(\"Start crawling\");\n            //AddToLatestMovieList(100);\n            //AddToHotMovieList();\n            //LogHelper.Info(\"Finish crawling\");\n        }\n   }\n\n```\n\n\n\n### 项目发布相关\n\n#### 新增runtimes节点\n\n使用VS2015新建的模板工程，project.json配置默认是没有runtimes节点的.\n\n我们想要发布到非Windows平台的时候，需要手动配置一下此节点以便生成。\n```javascript\n\n    \"runtimes\": {\n    \"win7-x64\": {},\n    \"win7-x86\": {},\n    \"osx.10.10-x64\": {},\n    \"osx.10.11-x64\": {},\n    \"ubuntu.14.04-x64\": {}\n  }\n\n```\n\n#### 删除/注释scripts节点\n生成时会调用node.js脚本构建前端代码，这个不能确保每个环境都有bower存在...注释完事。\n```javascript\n\n    //\"scripts\": {\n    //  \"prepublish\": [ \"bower install\", \"dotnet bundle\" ],\n    //  \"postpublish\": [ \"dotnet publish-iis --publish-folder %publish:OutputPath% --framework %publish:FullTargetFramework%\" ]\n    //},\n```\n\n#### 删除/注释dependencies节点里面的type\n\n```javascript\n\"dependencies\": {\n    \"Microsoft.NETCore.App\": {\n      \"version\": \"1.1.0\"\n      //\"type\": \"platform\"\n    },\n```\n\nproject.json的相关配置说明可以看下这个官方文档：[Project.json-file](https://github.com/aspnet/Home/wiki/Project.json-file),\n或者张善友老师的文章[.NET Core系列 ： 2 、project.json 这葫芦里卖的什么药](http://www.cnblogs.com/shanyou/p/5693453.html)\n\n#### 开发编译发布\n```shell\n//还原各种包文件\ndotnet restore;\n\n//发布到C:\\code\\website\\Dy2018Crawler文件夹\ndotnet publish -r ubuntu.14.04-x64 -c Release -o \"C:\\code\\website\\Dy2018Crawler\";\n\n```\n\n最后，照旧开源......以上代码都在下面找到：\n\nGayhub地址：[https://github.com/liguobao/Dy2018Crawler](https://github.com/liguobao/Dy2018Crawler)\n\n在线地址：[http://codelover.win/](http://codelover.win/)\n\n\nPS:回头写个爬片大家滋持不啊...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/how_to_make_crawler_base_netcore.md","raw":"---\nlayout: post\ntitle: 手把手教你用.NET Core写爬虫\ncategory: asp.net core\ndate: 2016-12-04 00:00:00\ntags:\n- asp.net core\n- crawler\n---\n\n### 写在前面\n自从上一个项目[58HouseSearch](https://github.com/liguobao/58HouseSearch)从.NET迁移到.NET core之后，磕磕碰碰磨蹭了一个月才正式上线到新版本。\n然后最近又开了个新坑，搞了个[Dy2018Crawler](http://codelover.win/)用来爬dy2018电影天堂上面的电影资源。这里也借机简单介绍一下如何基于.NET Core写一个爬虫。\nPS：如有偏错，敬请指明...\nPPS:该去电影院还是多去电影院，毕竟美人良时可无价。\n\n### 准备工作（.NET Core准备）\n首先，肯定是先安装.NET Core咯。下载及安装教程在这里：[.NET - Powerful Open Source Development](https://www.microsoft.com/net/core)。无论你是Windows、linux还是mac，统统可以玩。\n\n我这里的环境是：Windows10 + VS2015 community updata3 + .NET Core 1.1.0 SDK + .NET Core 1.0.1 tools Preview 2.\n\n理论上，只需要安装一下 .NET Core 1.1.0 SDK 即可开发.NET Core程序，至于用什么工具写代码都无关紧要了。\n\n安装好以上工具之后，在VS2015的新建项目就可以看到.NET Core的模板了。如下图：\n\n![](https://www.microsoft.com/net/images/screenshots/FileNewProject.png)\n\n为了简单起见，我们创建的时候，直接选择VS .NET Core tools自带的模板。\n\n### 一个爬虫的自我修养\n#### 分析网页\n写爬虫之前，我们首先要先去了解一下即将要爬取的网页数据组成。\n\n具体到网页的话，便是分析我们要抓取的数据在HTML里面是用什么标签抑或有什么样的标记，然后使用这个标记把数据从HTML中提取出来。在我这里的话，用的更多的是HTML标签的ID和CSS属性。\n\n以本文章想要爬取的dy2018.com为例,简单描述一下这个过程。dy2018.com主页如下图：\n\n![](http://7xrayk.com1.z0.glb.clouddn.com/123.png)\n\n在chrome里面，按F12进入开发者模式，接着如下图使用鼠标选择对应页面数据，然后去分析页面HTML组成。\n\n![](http://7xrayk.com1.z0.glb.clouddn.com/chromeF12_Select_HTML.png)\n\n\n接着我们开始分析页面数据:\n\n![](http://7xrayk.com1.z0.glb.clouddn.com/chrome_dy2018_lstmovie_divclass.png)\n\n![](http://7xrayk.com1.z0.glb.clouddn.com/chrome_dy2018_a.png)\n\n经过简单分析HTML，我们得到以下结论：\n\n1. www.dy2018.com首页的电影数据存储在一个class为co_content222的div标签里面\n\n2. 电影详情链接为a标签，标签显示文本就是电影名称，URL即详情URL\n\n那么总结下来，我们的工作就是：找到class='co_content222' 的div标签，从里面提取所有的a标签数据。\n\n#### 开始写代码...\n\n之前在写[58HouseSearch项目迁移到asp.net core](https://zhuanlan.zhihu.com/p/22764927)简单提过AngleSharp库，一个基于.NET（C#）开发的专门为解析xHTML源码的DLL组件。\n\n1. AngleSharp主页在这里：[https://anglesharp.github.io/](https://anglesharp.github.io/)，\n\n2. 博客园文章：[解析HTML利器AngleSharp介绍](http://www.cnblogs.com/pandait/p/AngleSharp.html)，\n\n3. Nuget地址:[Nuget AngleSharp](https://www.nuget.org/packages/AngleSharp) 安装命令：Install-Package AngleSharp\n\n##### 获取电影列表数据\n``` csharp\nprivate static HtmlParser htmlParser = new HtmlParser();\n\nprivate  ConcurrentDictionary<string, MovieInfo> _cdMovieInfo = new ConcurrentDictionary<string, MovieInfo>();\nprivate void AddToHotMovieList()\n{\n\t//此操作不阻塞当前其他操作，所以使用Task\n\t// _cdMovieInfo 为线程安全字典，存储了当期所有的电影数据\n\tTask.Factory.StartNew(()=> \n\t{\n\t    try\n\t    {\n\t        //通过URL获取HTML\n\t        var htmlDoc = HTTPHelper.GetHTMLByURL(\"http://www.dy2018.com/\");\n\t        //HTML 解析成 IDocument\n\t        var dom = htmlParser.Parse(htmlDoc);\n\t        //从dom中提取所有class='co_content222'的div标签\n\t        //QuerySelectorAll方法接受 选择器语法 \n\t        var lstDivInfo = dom.QuerySelectorAll(\"div.co_content222\");\n\t        if (lstDivInfo != null)\n\t        {\n\t            //前三个DIV为新电影\n\t            foreach (var divInfo in lstDivInfo.Take(3))\n\t            {\n\t                //获取div中所有的a标签且a标签中含有\"/i/\"的\n\t                //Contains(\"/i/\") 条件的过滤是因为在测试中发现这一块div中的a标签有可能是广告链接\n\t                divInfo.QuerySelectorAll(\"a\").Where(a => \n\t                a.GetAttribute(\"href\").Contains(\"/i/\"))\n\t                .ToList().ForEach(\n\t                a =>\n\t                {\n\t                    //拼接成完整链接\n\t                    var onlineURL = \"http://www.dy2018.com\" + a.GetAttribute(\"href\");\n\t                    //看一下是否已经存在于现有数据中\n\t                    if (!_cdMovieInfo.ContainsKey(onlineURL))\n\t                    {\n\t                        //获取电影的详细信息\n\t                        MovieInfo movieInfo = FillMovieInfoFormWeb(a, onlineURL);\n\t                        //下载链接不为空才添加到现有数据\n\t                        if (movieInfo.XunLeiDownLoadURLList != null \n\t                        && movieInfo.XunLeiDownLoadURLList.Count != 0)\n\t                        {\n\t                             _cdMovieInfo.TryAdd\n\t                             (movieInfo.Dy2018OnlineUrl,movieInfo);\n\t                        }\n\t                    }\n\t                });\n\t            }\n\t        }\n\t\n\t    }\n\t    catch(Exception ex)\n\t    {\n\t\n\t    }\n\t});\n}\n\n```\n\n#### 获取电影详细信息\n```csharp\n private MovieInfo FillMovieInfoFormWeb(AngleSharp.Dom.IElement a, \n string onlineURL)\n{\n    var movieHTML = HTTPHelper.GetHTMLByURL(onlineURL);\n    var movieDoc = htmlParser.Parse(movieHTML);\n    //http://www.dy2018.com/i/97462.html 分析过程见上，不再赘述\n    //电影的详细介绍 在id为Zoom的标签中\n    var zoom = movieDoc.GetElementById(\"Zoom\");\n    //下载链接在 bgcolor='#fdfddf'的td中，有可能有多个链接\n    var lstDownLoadURL = movieDoc.QuerySelectorAll(\"[bgcolor='#fdfddf']\");\n    //发布时间 在class='updatetime'的span标签中\n    var updatetime = movieDoc.QuerySelector(\"span.updatetime\"); \n    var pubDate = DateTime.Now;\n    if(updatetime!=null && !string.IsNullOrEmpty(updatetime.InnerHtml))\n    {\n        //内容带有“发布时间：”字样，\n        //replace成\"\"之后再去转换，转换失败不影响流程\n        DateTime.TryParse(updatetime.InnerHtml.Replace(\"发布时间：\", \n        \"\"), out pubDate);\n    }\n    \n\n    var movieInfo = new MovieInfo()\n    {\n        //InnerHtml中可能还包含font标签，做多一个Replace\n        MovieName = a.InnerHtml.Replace(\"<font color=\\\"#0c9000\\\">\",\"\")\n        .Replace(\"<font color=\\\"\t#0c9000\\\">\",\"\")\n        .Replace(\"</font>\", \"\"),\n        Dy2018OnlineUrl = onlineURL,\n        MovieIntro = zoom != null ? WebUtility.HtmlEncode(zoom.InnerHtml) : \"暂无介绍...\",\n        //可能没有简介，虽然好像不怎么可能\n        XunLeiDownLoadURLList = lstDownLoadURL != null ?\n        lstDownLoadURL.Select(d => d.FirstElementChild.InnerHtml).ToList() : null,\n        //可能没有下载链接\n        PubDate = pubDate,\n    };\n    return movieInfo;\n}\n```\n\n#### HTTPHelper\n这边有个小坑，dy2018网页编码格式是GB2312,.NET Core默认不支持GB2312，使用Encoding.GetEncoding(\"GB2312\")的时候会抛出异常。\n\n解决方案是手动安装System.Text.Encoding.CodePages包(Install-Package System.Text.Encoding.CodePages),\n\n然后在Starup.cs的Configure方法中加入Encoding.RegisterProvider(CodePagesEncodingProvider.Instance),接着就可以正常使用Encoding.GetEncoding(\"GB2312\")了。\n\n```csharp\nusing System;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\n\nnamespace Dy2018Crawler\n{\n    public class HTTPHelper\n    {\n\n        public static HttpClient Client { get; } = new HttpClient();\n\n        public static string GetHTMLByURL(string url)\n        {\n            try\n            {\n                System.Net.WebRequest wRequest = System.Net.WebRequest.Create(url);\n                wRequest.ContentType = \"text/html; charset=gb2312\";\n\n                wRequest.Method = \"get\";\n                wRequest.UseDefaultCredentials = true;\n                // Get the response instance.\n                var task = wRequest.GetResponseAsync();\n                System.Net.WebResponse wResp = task.Result;\n                System.IO.Stream respStream = wResp.GetResponseStream();\n                //dy2018这个网站编码方式是GB2312,\n                using (System.IO.StreamReader reader =\n                new System.IO.StreamReader(respStream,\n                Encoding.GetEncoding(\"GB2312\")))\n                {\n                    return reader.ReadToEnd();\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex.ToString());\n                return string.Empty;\n            }\n        }\n       \n    }\n\n\n}\n\n```\n\n\n### 定时任务的实现\n定时任务我这里使用的是[Pomelo.AspNetCore.TimedJob](https://www.nuget.org/packages/Pomelo.AspNetCore.TimedJob/1.1.0-rtm-10026)。\n\nPomelo.AspNetCore.TimedJob是一个.NET Core实现的定时任务job库，支持毫秒级定时任务、从数据库读取定时配置、同步异步定时任务等功能。\n\n由.NET Core社区大神兼前微软MVP[AmamiyaYuuko](https://www.nuget.org/profiles/AmamiyaYuuko)(入职微软之后就卸任MVP...)开发维护，不过好像没有开源，回头问下看看能不能开源掉。\n\nnuget上有各种版本，按需自取。地址：https://www.nuget.org/packages/Pomelo.AspNetCore.TimedJob/1.1.0-rtm-10026\n\n作者自己的介绍文章：[Timed Job - Pomelo扩展包系列](http://www.1234.sh/post/pomelo-extensions-timed-jobs)\n\n\n#### Startup.cs相关代码\n我这边使用的话，首先肯定是先安装对应的包：Install-Package Pomelo.AspNetCore.TimedJob -Pre\n\n然后在Startup.cs的ConfigureServices函数里面添加Service,在Configure函数里面Use一下。\n\n```csharp\n// This method gets called by the runtime. Use this method to add services to the container.\npublic void ConfigureServices(IServiceCollection services)\n{\n    // Add framework services.\n    services.AddMvc();\n    //Add TimedJob services\n    services.AddTimedJob();\n}\n\n public void Configure(IApplicationBuilder app, \n IHostingEnvironment env, ILoggerFactory loggerFactory)\n{\n    //使用TimedJob\n    app.UseTimedJob();\n\n    if (env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n        app.UseBrowserLink();\n    }\n    else\n    {\n        app.UseExceptionHandler(\"/Home/Error\");\n    }\n\n    app.UseStaticFiles();\n\n    app.UseMvc(routes =>\n    {\n        routes.MapRoute(\n            name: \"default\",\n            template: \"{controller=Home}/{action=Index}/{id?}\");\n    });\n    Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);\n}\n        \n```\n\n\n#### Job相关代码\n\n接着新建一个类，明明为XXXJob.cs,引用命名空间using Pomelo.AspNetCore.TimedJob，XXXJob继承于Job，添加以下代码。\n\n```\n    public class AutoGetMovieListJob:Job\n    {\n        \n        // Begin 起始时间；Interval执行时间间隔，单位是毫秒，建议使用以下格式，此处为3小时；\n        //SkipWhileExecuting是否等待上一个执行完成，true为等待；\n        [Invoke(Begin = \"2016-11-29 22:10\", Interval = 1000 * 3600*3, SkipWhileExecuting =true)]\n        public void Run()\n        {\n             //Job要执行的逻辑代码\n             \n            //LogHelper.Info(\"Start crawling\");\n            //AddToLatestMovieList(100);\n            //AddToHotMovieList();\n            //LogHelper.Info(\"Finish crawling\");\n        }\n   }\n\n```\n\n\n\n### 项目发布相关\n\n#### 新增runtimes节点\n\n使用VS2015新建的模板工程，project.json配置默认是没有runtimes节点的.\n\n我们想要发布到非Windows平台的时候，需要手动配置一下此节点以便生成。\n```javascript\n\n    \"runtimes\": {\n    \"win7-x64\": {},\n    \"win7-x86\": {},\n    \"osx.10.10-x64\": {},\n    \"osx.10.11-x64\": {},\n    \"ubuntu.14.04-x64\": {}\n  }\n\n```\n\n#### 删除/注释scripts节点\n生成时会调用node.js脚本构建前端代码，这个不能确保每个环境都有bower存在...注释完事。\n```javascript\n\n    //\"scripts\": {\n    //  \"prepublish\": [ \"bower install\", \"dotnet bundle\" ],\n    //  \"postpublish\": [ \"dotnet publish-iis --publish-folder %publish:OutputPath% --framework %publish:FullTargetFramework%\" ]\n    //},\n```\n\n#### 删除/注释dependencies节点里面的type\n\n```javascript\n\"dependencies\": {\n    \"Microsoft.NETCore.App\": {\n      \"version\": \"1.1.0\"\n      //\"type\": \"platform\"\n    },\n```\n\nproject.json的相关配置说明可以看下这个官方文档：[Project.json-file](https://github.com/aspnet/Home/wiki/Project.json-file),\n或者张善友老师的文章[.NET Core系列 ： 2 、project.json 这葫芦里卖的什么药](http://www.cnblogs.com/shanyou/p/5693453.html)\n\n#### 开发编译发布\n```shell\n//还原各种包文件\ndotnet restore;\n\n//发布到C:\\code\\website\\Dy2018Crawler文件夹\ndotnet publish -r ubuntu.14.04-x64 -c Release -o \"C:\\code\\website\\Dy2018Crawler\";\n\n```\n\n最后，照旧开源......以上代码都在下面找到：\n\nGayhub地址：[https://github.com/liguobao/Dy2018Crawler](https://github.com/liguobao/Dy2018Crawler)\n\n在线地址：[http://codelover.win/](http://codelover.win/)\n\n\nPS:回头写个爬片大家滋持不啊...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"how_to_make_crawler_base_netcore","published":1,"updated":"2016-12-03T17:31:21.389Z","comments":1,"photos":[],"link":"","_id":"cj0dyumwt001b6kunwreknn2i","content":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>自从上一个项目<a href=\"https://github.com/liguobao/58HouseSearch\" target=\"_blank\" rel=\"external\">58HouseSearch</a>从.NET迁移到.NET core之后，磕磕碰碰磨蹭了一个月才正式上线到新版本。<br>然后最近又开了个新坑，搞了个<a href=\"http://codelover.win/\" target=\"_blank\" rel=\"external\">Dy2018Crawler</a>用来爬dy2018电影天堂上面的电影资源。这里也借机简单介绍一下如何基于.NET Core写一个爬虫。<br>PS：如有偏错，敬请指明…<br>PPS:该去电影院还是多去电影院，毕竟美人良时可无价。</p>\n<h3 id=\"准备工作（-NET-Core准备）\"><a href=\"#准备工作（-NET-Core准备）\" class=\"headerlink\" title=\"准备工作（.NET Core准备）\"></a>准备工作（.NET Core准备）</h3><p>首先，肯定是先安装.NET Core咯。下载及安装教程在这里：<a href=\"https://www.microsoft.com/net/core\" target=\"_blank\" rel=\"external\">.NET - Powerful Open Source Development</a>。无论你是Windows、linux还是mac，统统可以玩。</p>\n<p>我这里的环境是：Windows10 + VS2015 community updata3 + .NET Core 1.1.0 SDK + .NET Core 1.0.1 tools Preview 2.</p>\n<p>理论上，只需要安装一下 .NET Core 1.1.0 SDK 即可开发.NET Core程序，至于用什么工具写代码都无关紧要了。</p>\n<p>安装好以上工具之后，在VS2015的新建项目就可以看到.NET Core的模板了。如下图：</p>\n<p><img src=\"https://www.microsoft.com/net/images/screenshots/FileNewProject.png\" alt=\"\"></p>\n<p>为了简单起见，我们创建的时候，直接选择VS .NET Core tools自带的模板。</p>\n<h3 id=\"一个爬虫的自我修养\"><a href=\"#一个爬虫的自我修养\" class=\"headerlink\" title=\"一个爬虫的自我修养\"></a>一个爬虫的自我修养</h3><h4 id=\"分析网页\"><a href=\"#分析网页\" class=\"headerlink\" title=\"分析网页\"></a>分析网页</h4><p>写爬虫之前，我们首先要先去了解一下即将要爬取的网页数据组成。</p>\n<p>具体到网页的话，便是分析我们要抓取的数据在HTML里面是用什么标签抑或有什么样的标记，然后使用这个标记把数据从HTML中提取出来。在我这里的话，用的更多的是HTML标签的ID和CSS属性。</p>\n<p>以本文章想要爬取的dy2018.com为例,简单描述一下这个过程。dy2018.com主页如下图：</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/123.png\" alt=\"\"></p>\n<p>在chrome里面，按F12进入开发者模式，接着如下图使用鼠标选择对应页面数据，然后去分析页面HTML组成。</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/chromeF12_Select_HTML.png\" alt=\"\"></p>\n<p>接着我们开始分析页面数据:</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/chrome_dy2018_lstmovie_divclass.png\" alt=\"\"></p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/chrome_dy2018_a.png\" alt=\"\"></p>\n<p>经过简单分析HTML，我们得到以下结论：</p>\n<ol>\n<li><p>www.dy2018.com首页的电影数据存储在一个class为co_content222的div标签里面</p>\n</li>\n<li><p>电影详情链接为a标签，标签显示文本就是电影名称，URL即详情URL</p>\n</li>\n</ol>\n<p>那么总结下来，我们的工作就是：找到class=’co_content222’ 的div标签，从里面提取所有的a标签数据。</p>\n<h4 id=\"开始写代码…\"><a href=\"#开始写代码…\" class=\"headerlink\" title=\"开始写代码…\"></a>开始写代码…</h4><p>之前在写<a href=\"https://zhuanlan.zhihu.com/p/22764927\" target=\"_blank\" rel=\"external\">58HouseSearch项目迁移到asp.net core</a>简单提过AngleSharp库，一个基于.NET（C#）开发的专门为解析xHTML源码的DLL组件。</p>\n<ol>\n<li><p>AngleSharp主页在这里：<a href=\"https://anglesharp.github.io/\" target=\"_blank\" rel=\"external\">https://anglesharp.github.io/</a>，</p>\n</li>\n<li><p>博客园文章：<a href=\"http://www.cnblogs.com/pandait/p/AngleSharp.html\" target=\"_blank\" rel=\"external\">解析HTML利器AngleSharp介绍</a>，</p>\n</li>\n<li><p>Nuget地址:<a href=\"https://www.nuget.org/packages/AngleSharp\" target=\"_blank\" rel=\"external\">Nuget AngleSharp</a> 安装命令：Install-Package AngleSharp</p>\n</li>\n</ol>\n<h5 id=\"获取电影列表数据\"><a href=\"#获取电影列表数据\" class=\"headerlink\" title=\"获取电影列表数据\"></a>获取电影列表数据</h5><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> HtmlParser htmlParser = <span class=\"keyword\">new</span> HtmlParser();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>  ConcurrentDictionary&lt;<span class=\"keyword\">string</span>, MovieInfo&gt; _cdMovieInfo = <span class=\"keyword\">new</span> ConcurrentDictionary&lt;<span class=\"keyword\">string</span>, MovieInfo&gt;();</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">AddToHotMovieList</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"comment\">//此操作不阻塞当前其他操作，所以使用Task</span></div><div class=\"line\">\t<span class=\"comment\">// _cdMovieInfo 为线程安全字典，存储了当期所有的电影数据</span></div><div class=\"line\">\tTask.Factory.StartNew(()=&gt; </div><div class=\"line\">\t&#123;</div><div class=\"line\">\t    <span class=\"keyword\">try</span></div><div class=\"line\">\t    &#123;</div><div class=\"line\">\t        <span class=\"comment\">//通过URL获取HTML</span></div><div class=\"line\">\t        <span class=\"keyword\">var</span> htmlDoc = HTTPHelper.GetHTMLByURL(<span class=\"string\">\"http://www.dy2018.com/\"</span>);</div><div class=\"line\">\t        <span class=\"comment\">//HTML 解析成 IDocument</span></div><div class=\"line\">\t        <span class=\"keyword\">var</span> dom = htmlParser.Parse(htmlDoc);</div><div class=\"line\">\t        <span class=\"comment\">//从dom中提取所有class='co_content222'的div标签</span></div><div class=\"line\">\t        <span class=\"comment\">//QuerySelectorAll方法接受 选择器语法 </span></div><div class=\"line\">\t        <span class=\"keyword\">var</span> lstDivInfo = dom.QuerySelectorAll(<span class=\"string\">\"div.co_content222\"</span>);</div><div class=\"line\">\t        <span class=\"keyword\">if</span> (lstDivInfo != <span class=\"literal\">null</span>)</div><div class=\"line\">\t        &#123;</div><div class=\"line\">\t            <span class=\"comment\">//前三个DIV为新电影</span></div><div class=\"line\">\t            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> divInfo <span class=\"keyword\">in</span> lstDivInfo.Take(<span class=\"number\">3</span>))</div><div class=\"line\">\t            &#123;</div><div class=\"line\">\t                <span class=\"comment\">//获取div中所有的a标签且a标签中含有\"/i/\"的</span></div><div class=\"line\">\t                <span class=\"comment\">//Contains(\"/i/\") 条件的过滤是因为在测试中发现这一块div中的a标签有可能是广告链接</span></div><div class=\"line\">\t                divInfo.QuerySelectorAll(<span class=\"string\">\"a\"</span>).Where(a =&gt; </div><div class=\"line\">\t                a.GetAttribute(<span class=\"string\">\"href\"</span>).Contains(<span class=\"string\">\"/i/\"</span>))</div><div class=\"line\">\t                .ToList().ForEach(</div><div class=\"line\">\t                a =&gt;</div><div class=\"line\">\t                &#123;</div><div class=\"line\">\t                    <span class=\"comment\">//拼接成完整链接</span></div><div class=\"line\">\t                    <span class=\"keyword\">var</span> onlineURL = <span class=\"string\">\"http://www.dy2018.com\"</span> + a.GetAttribute(<span class=\"string\">\"href\"</span>);</div><div class=\"line\">\t                    <span class=\"comment\">//看一下是否已经存在于现有数据中</span></div><div class=\"line\">\t                    <span class=\"keyword\">if</span> (!_cdMovieInfo.ContainsKey(onlineURL))</div><div class=\"line\">\t                    &#123;</div><div class=\"line\">\t                        <span class=\"comment\">//获取电影的详细信息</span></div><div class=\"line\">\t                        MovieInfo movieInfo = FillMovieInfoFormWeb(a, onlineURL);</div><div class=\"line\">\t                        <span class=\"comment\">//下载链接不为空才添加到现有数据</span></div><div class=\"line\">\t                        <span class=\"keyword\">if</span> (movieInfo.XunLeiDownLoadURLList != <span class=\"literal\">null</span> </div><div class=\"line\">\t                        &amp;&amp; movieInfo.XunLeiDownLoadURLList.Count != <span class=\"number\">0</span>)</div><div class=\"line\">\t                        &#123;</div><div class=\"line\">\t                             _cdMovieInfo.TryAdd</div><div class=\"line\">\t                             (movieInfo.Dy2018OnlineUrl,movieInfo);</div><div class=\"line\">\t                        &#125;</div><div class=\"line\">\t                    &#125;</div><div class=\"line\">\t                &#125;);</div><div class=\"line\">\t            &#125;</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t</div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t    <span class=\"keyword\">catch</span>(Exception ex)</div><div class=\"line\">\t    &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"获取电影详细信息\"><a href=\"#获取电影详细信息\" class=\"headerlink\" title=\"获取电影详细信息\"></a>获取电影详细信息</h4><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> MovieInfo <span class=\"title\">FillMovieInfoFormWeb</span>(<span class=\"params\">AngleSharp.Dom.IElement a, </span></span></div><div class=\"line\"> <span class=\"keyword\">string</span> onlineURL)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> movieHTML = HTTPHelper.GetHTMLByURL(onlineURL);</div><div class=\"line\">    <span class=\"keyword\">var</span> movieDoc = htmlParser.Parse(movieHTML);</div><div class=\"line\">    <span class=\"comment\">//http://www.dy2018.com/i/97462.html 分析过程见上，不再赘述</span></div><div class=\"line\">    <span class=\"comment\">//电影的详细介绍 在id为Zoom的标签中</span></div><div class=\"line\">    <span class=\"keyword\">var</span> zoom = movieDoc.GetElementById(<span class=\"string\">\"Zoom\"</span>);</div><div class=\"line\">    <span class=\"comment\">//下载链接在 bgcolor='#fdfddf'的td中，有可能有多个链接</span></div><div class=\"line\">    <span class=\"keyword\">var</span> lstDownLoadURL = movieDoc.QuerySelectorAll(<span class=\"string\">\"[bgcolor='#fdfddf']\"</span>);</div><div class=\"line\">    <span class=\"comment\">//发布时间 在class='updatetime'的span标签中</span></div><div class=\"line\">    <span class=\"keyword\">var</span> updatetime = movieDoc.QuerySelector(<span class=\"string\">\"span.updatetime\"</span>); </div><div class=\"line\">    <span class=\"keyword\">var</span> pubDate = DateTime.Now;</div><div class=\"line\">    <span class=\"keyword\">if</span>(updatetime!=<span class=\"literal\">null</span> &amp;&amp; !<span class=\"keyword\">string</span>.IsNullOrEmpty(updatetime.InnerHtml))</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">//内容带有“发布时间：”字样，</span></div><div class=\"line\">        <span class=\"comment\">//replace成\"\"之后再去转换，转换失败不影响流程</span></div><div class=\"line\">        DateTime.TryParse(updatetime.InnerHtml.Replace(<span class=\"string\">\"发布时间：\"</span>, </div><div class=\"line\">        <span class=\"string\">\"\"</span>), <span class=\"keyword\">out</span> pubDate);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> movieInfo = <span class=\"keyword\">new</span> MovieInfo()</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">//InnerHtml中可能还包含font标签，做多一个Replace</span></div><div class=\"line\">        MovieName = a.InnerHtml.Replace(<span class=\"string\">\"&lt;font color=\\\"#0c9000\\\"&gt;\"</span>,<span class=\"string\">\"\"</span>)</div><div class=\"line\">        .Replace(<span class=\"string\">\"&lt;font color=\\\"\t#0c9000\\\"&gt;\"</span>,<span class=\"string\">\"\"</span>)</div><div class=\"line\">        .Replace(<span class=\"string\">\"&lt;/font&gt;\"</span>, <span class=\"string\">\"\"</span>),</div><div class=\"line\">        Dy2018OnlineUrl = onlineURL,</div><div class=\"line\">        MovieIntro = zoom != <span class=\"literal\">null</span> ? WebUtility.HtmlEncode(zoom.InnerHtml) : <span class=\"string\">\"暂无介绍...\"</span>,</div><div class=\"line\">        <span class=\"comment\">//可能没有简介，虽然好像不怎么可能</span></div><div class=\"line\">        XunLeiDownLoadURLList = lstDownLoadURL != <span class=\"literal\">null</span> ?</div><div class=\"line\">        lstDownLoadURL.Select(d =&gt; d.FirstElementChild.InnerHtml).ToList() : <span class=\"literal\">null</span>,</div><div class=\"line\">        <span class=\"comment\">//可能没有下载链接</span></div><div class=\"line\">        PubDate = pubDate,</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> movieInfo;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"HTTPHelper\"><a href=\"#HTTPHelper\" class=\"headerlink\" title=\"HTTPHelper\"></a>HTTPHelper</h4><p>这边有个小坑，dy2018网页编码格式是GB2312,.NET Core默认不支持GB2312，使用Encoding.GetEncoding(“GB2312”)的时候会抛出异常。</p>\n<p>解决方案是手动安装System.Text.Encoding.CodePages包(Install-Package System.Text.Encoding.CodePages),</p>\n<p>然后在Starup.cs的Configure方法中加入Encoding.RegisterProvider(CodePagesEncodingProvider.Instance),接着就可以正常使用Encoding.GetEncoding(“GB2312”)了。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> System;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Net.Http;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Net.Http.Headers;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Text;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Dy2018Crawler</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HTTPHelper</span></div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> HttpClient Client &#123; <span class=\"keyword\">get</span>; &#125; = <span class=\"keyword\">new</span> HttpClient();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetHTMLByURL</span>(<span class=\"params\"><span class=\"keyword\">string</span> url</span>)</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                System.Net.WebRequest wRequest = System.Net.WebRequest.Create(url);</div><div class=\"line\">                wRequest.ContentType = <span class=\"string\">\"text/html; charset=gb2312\"</span>;</div><div class=\"line\"></div><div class=\"line\">                wRequest.Method = <span class=\"string\">\"get\"</span>;</div><div class=\"line\">                wRequest.UseDefaultCredentials = <span class=\"literal\">true</span>;</div><div class=\"line\">                <span class=\"comment\">// Get the response instance.</span></div><div class=\"line\">                <span class=\"keyword\">var</span> task = wRequest.GetResponseAsync();</div><div class=\"line\">                System.Net.WebResponse wResp = task.Result;</div><div class=\"line\">                System.IO.Stream respStream = wResp.GetResponseStream();</div><div class=\"line\">                <span class=\"comment\">//dy2018这个网站编码方式是GB2312,</span></div><div class=\"line\">                <span class=\"keyword\">using</span> (System.IO.StreamReader reader =</div><div class=\"line\">                <span class=\"keyword\">new</span> System.IO.StreamReader(respStream,</div><div class=\"line\">                Encoding.GetEncoding(<span class=\"string\">\"GB2312\"</span>)))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> reader.ReadToEnd();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">catch</span> (Exception ex)</div><div class=\"line\">            &#123;</div><div class=\"line\">                Console.WriteLine(ex.ToString());</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>.Empty;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">       </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"定时任务的实现\"><a href=\"#定时任务的实现\" class=\"headerlink\" title=\"定时任务的实现\"></a>定时任务的实现</h3><p>定时任务我这里使用的是<a href=\"https://www.nuget.org/packages/Pomelo.AspNetCore.TimedJob/1.1.0-rtm-10026\" target=\"_blank\" rel=\"external\">Pomelo.AspNetCore.TimedJob</a>。</p>\n<p>Pomelo.AspNetCore.TimedJob是一个.NET Core实现的定时任务job库，支持毫秒级定时任务、从数据库读取定时配置、同步异步定时任务等功能。</p>\n<p>由.NET Core社区大神兼前微软MVP<a href=\"https://www.nuget.org/profiles/AmamiyaYuuko\" target=\"_blank\" rel=\"external\">AmamiyaYuuko</a>(入职微软之后就卸任MVP…)开发维护，不过好像没有开源，回头问下看看能不能开源掉。</p>\n<p>nuget上有各种版本，按需自取。地址：<a href=\"https://www.nuget.org/packages/Pomelo.AspNetCore.TimedJob/1.1.0-rtm-10026\" target=\"_blank\" rel=\"external\">https://www.nuget.org/packages/Pomelo.AspNetCore.TimedJob/1.1.0-rtm-10026</a></p>\n<p>作者自己的介绍文章：<a href=\"http://www.1234.sh/post/pomelo-extensions-timed-jobs\" target=\"_blank\" rel=\"external\">Timed Job - Pomelo扩展包系列</a></p>\n<h4 id=\"Startup-cs相关代码\"><a href=\"#Startup-cs相关代码\" class=\"headerlink\" title=\"Startup.cs相关代码\"></a>Startup.cs相关代码</h4><p>我这边使用的话，首先肯定是先安装对应的包：Install-Package Pomelo.AspNetCore.TimedJob -Pre</p>\n<p>然后在Startup.cs的ConfigureServices函数里面添加Service,在Configure函数里面Use一下。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// This method gets called by the runtime. Use this method to add services to the container.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// Add framework services.</span></div><div class=\"line\">    services.AddMvc();</div><div class=\"line\">    <span class=\"comment\">//Add TimedJob services</span></div><div class=\"line\">    services.AddTimedJob();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, </span></span></div><div class=\"line\"> IHostingEnvironment env, ILoggerFactory loggerFactory)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//使用TimedJob</span></div><div class=\"line\">    app.UseTimedJob();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (env.IsDevelopment())</div><div class=\"line\">    &#123;</div><div class=\"line\">        app.UseDeveloperExceptionPage();</div><div class=\"line\">        app.UseBrowserLink();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        app.UseExceptionHandler(<span class=\"string\">\"/Home/Error\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    app.UseStaticFiles();</div><div class=\"line\"></div><div class=\"line\">    app.UseMvc(routes =&gt;</div><div class=\"line\">    &#123;</div><div class=\"line\">        routes.MapRoute(</div><div class=\"line\">            name: <span class=\"string\">\"default\"</span>,</div><div class=\"line\">            template: <span class=\"string\">\"&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Job相关代码\"><a href=\"#Job相关代码\" class=\"headerlink\" title=\"Job相关代码\"></a>Job相关代码</h4><p>接着新建一个类，明明为XXXJob.cs,引用命名空间using Pomelo.AspNetCore.TimedJob，XXXJob继承于Job，添加以下代码。</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AutoGetMovieListJob</span>:<span class=\"title\">Job</span></div><div class=\"line\"> &#123;</div><div class=\"line\">     </div><div class=\"line\">     <span class=\"comment\">// Begin 起始时间；Interval执行时间间隔，单位是毫秒，建议使用以下格式，此处为3小时；</span></div><div class=\"line\">     <span class=\"comment\">//SkipWhileExecuting是否等待上一个执行完成，true为等待；</span></div><div class=\"line\">     [Invoke(Begin = <span class=\"string\">\"2016-11-29 22:10\"</span>, Interval = <span class=\"number\">1000</span> * <span class=\"number\">3600</span>*<span class=\"number\">3</span>, SkipWhileExecuting =<span class=\"literal\">true</span>)]</div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Run</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">     &#123;</div><div class=\"line\">          <span class=\"comment\">//Job要执行的逻辑代码</span></div><div class=\"line\">          </div><div class=\"line\">         <span class=\"comment\">//LogHelper.Info(\"Start crawling\");</span></div><div class=\"line\">         <span class=\"comment\">//AddToLatestMovieList(100);</span></div><div class=\"line\">         <span class=\"comment\">//AddToHotMovieList();</span></div><div class=\"line\">         <span class=\"comment\">//LogHelper.Info(\"Finish crawling\");</span></div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"项目发布相关\"><a href=\"#项目发布相关\" class=\"headerlink\" title=\"项目发布相关\"></a>项目发布相关</h3><h4 id=\"新增runtimes节点\"><a href=\"#新增runtimes节点\" class=\"headerlink\" title=\"新增runtimes节点\"></a>新增runtimes节点</h4><p>使用VS2015新建的模板工程，project.json配置默认是没有runtimes节点的.</p>\n<p>我们想要发布到非Windows平台的时候，需要手动配置一下此节点以便生成。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  <span class=\"string\">\"runtimes\"</span>: &#123;</div><div class=\"line\">  <span class=\"string\">\"win7-x64\"</span>: &#123;&#125;,</div><div class=\"line\">  <span class=\"string\">\"win7-x86\"</span>: &#123;&#125;,</div><div class=\"line\">  <span class=\"string\">\"osx.10.10-x64\"</span>: &#123;&#125;,</div><div class=\"line\">  <span class=\"string\">\"osx.10.11-x64\"</span>: &#123;&#125;,</div><div class=\"line\">  <span class=\"string\">\"ubuntu.14.04-x64\"</span>: &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"删除-注释scripts节点\"><a href=\"#删除-注释scripts节点\" class=\"headerlink\" title=\"删除/注释scripts节点\"></a>删除/注释scripts节点</h4><p>生成时会调用node.js脚本构建前端代码，这个不能确保每个环境都有bower存在…注释完事。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//\"scripts\": &#123;</span></div><div class=\"line\"><span class=\"comment\">//  \"prepublish\": [ \"bower install\", \"dotnet bundle\" ],</span></div><div class=\"line\"><span class=\"comment\">//  \"postpublish\": [ \"dotnet publish-iis --publish-folder %publish:OutputPath% --framework %publish:FullTargetFramework%\" ]</span></div><div class=\"line\"><span class=\"comment\">//&#125;,</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"删除-注释dependencies节点里面的type\"><a href=\"#删除-注释dependencies节点里面的type\" class=\"headerlink\" title=\"删除/注释dependencies节点里面的type\"></a>删除/注释dependencies节点里面的type</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"Microsoft.NETCore.App\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.1.0\"</span></div><div class=\"line\">      <span class=\"comment\">//\"type\": \"platform\"</span></div><div class=\"line\">    &#125;,</div></pre></td></tr></table></figure>\n<p>project.json的相关配置说明可以看下这个官方文档：<a href=\"https://github.com/aspnet/Home/wiki/Project.json-file\" target=\"_blank\" rel=\"external\">Project.json-file</a>,<br>或者张善友老师的文章<a href=\"http://www.cnblogs.com/shanyou/p/5693453.html\" target=\"_blank\" rel=\"external\">.NET Core系列 ： 2 、project.json 这葫芦里卖的什么药</a></p>\n<h4 id=\"开发编译发布\"><a href=\"#开发编译发布\" class=\"headerlink\" title=\"开发编译发布\"></a>开发编译发布</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//还原各种包文件</div><div class=\"line\">dotnet restore;</div><div class=\"line\"></div><div class=\"line\">//发布到C:\\code\\website\\Dy2018Crawler文件夹</div><div class=\"line\">dotnet publish -r ubuntu.14.04-x64 -c Release -o &quot;C:\\code\\website\\Dy2018Crawler&quot;;</div></pre></td></tr></table></figure>\n<p>最后，照旧开源……以上代码都在下面找到：</p>\n<p>Gayhub地址：<a href=\"https://github.com/liguobao/Dy2018Crawler\" target=\"_blank\" rel=\"external\">https://github.com/liguobao/Dy2018Crawler</a></p>\n<p>在线地址：<a href=\"http://codelover.win/\" target=\"_blank\" rel=\"external\">http://codelover.win/</a></p>\n<p>PS:回头写个爬片大家滋持不啊…</p>\n","excerpt":"","more":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>自从上一个项目<a href=\"https://github.com/liguobao/58HouseSearch\">58HouseSearch</a>从.NET迁移到.NET core之后，磕磕碰碰磨蹭了一个月才正式上线到新版本。<br>然后最近又开了个新坑，搞了个<a href=\"http://codelover.win/\">Dy2018Crawler</a>用来爬dy2018电影天堂上面的电影资源。这里也借机简单介绍一下如何基于.NET Core写一个爬虫。<br>PS：如有偏错，敬请指明…<br>PPS:该去电影院还是多去电影院，毕竟美人良时可无价。</p>\n<h3 id=\"准备工作（-NET-Core准备）\"><a href=\"#准备工作（-NET-Core准备）\" class=\"headerlink\" title=\"准备工作（.NET Core准备）\"></a>准备工作（.NET Core准备）</h3><p>首先，肯定是先安装.NET Core咯。下载及安装教程在这里：<a href=\"https://www.microsoft.com/net/core\">.NET - Powerful Open Source Development</a>。无论你是Windows、linux还是mac，统统可以玩。</p>\n<p>我这里的环境是：Windows10 + VS2015 community updata3 + .NET Core 1.1.0 SDK + .NET Core 1.0.1 tools Preview 2.</p>\n<p>理论上，只需要安装一下 .NET Core 1.1.0 SDK 即可开发.NET Core程序，至于用什么工具写代码都无关紧要了。</p>\n<p>安装好以上工具之后，在VS2015的新建项目就可以看到.NET Core的模板了。如下图：</p>\n<p><img src=\"https://www.microsoft.com/net/images/screenshots/FileNewProject.png\" alt=\"\"></p>\n<p>为了简单起见，我们创建的时候，直接选择VS .NET Core tools自带的模板。</p>\n<h3 id=\"一个爬虫的自我修养\"><a href=\"#一个爬虫的自我修养\" class=\"headerlink\" title=\"一个爬虫的自我修养\"></a>一个爬虫的自我修养</h3><h4 id=\"分析网页\"><a href=\"#分析网页\" class=\"headerlink\" title=\"分析网页\"></a>分析网页</h4><p>写爬虫之前，我们首先要先去了解一下即将要爬取的网页数据组成。</p>\n<p>具体到网页的话，便是分析我们要抓取的数据在HTML里面是用什么标签抑或有什么样的标记，然后使用这个标记把数据从HTML中提取出来。在我这里的话，用的更多的是HTML标签的ID和CSS属性。</p>\n<p>以本文章想要爬取的dy2018.com为例,简单描述一下这个过程。dy2018.com主页如下图：</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/123.png\" alt=\"\"></p>\n<p>在chrome里面，按F12进入开发者模式，接着如下图使用鼠标选择对应页面数据，然后去分析页面HTML组成。</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/chromeF12_Select_HTML.png\" alt=\"\"></p>\n<p>接着我们开始分析页面数据:</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/chrome_dy2018_lstmovie_divclass.png\" alt=\"\"></p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/chrome_dy2018_a.png\" alt=\"\"></p>\n<p>经过简单分析HTML，我们得到以下结论：</p>\n<ol>\n<li><p>www.dy2018.com首页的电影数据存储在一个class为co_content222的div标签里面</p>\n</li>\n<li><p>电影详情链接为a标签，标签显示文本就是电影名称，URL即详情URL</p>\n</li>\n</ol>\n<p>那么总结下来，我们的工作就是：找到class=’co_content222’ 的div标签，从里面提取所有的a标签数据。</p>\n<h4 id=\"开始写代码…\"><a href=\"#开始写代码…\" class=\"headerlink\" title=\"开始写代码…\"></a>开始写代码…</h4><p>之前在写<a href=\"https://zhuanlan.zhihu.com/p/22764927\">58HouseSearch项目迁移到asp.net core</a>简单提过AngleSharp库，一个基于.NET（C#）开发的专门为解析xHTML源码的DLL组件。</p>\n<ol>\n<li><p>AngleSharp主页在这里：<a href=\"https://anglesharp.github.io/\">https://anglesharp.github.io/</a>，</p>\n</li>\n<li><p>博客园文章：<a href=\"http://www.cnblogs.com/pandait/p/AngleSharp.html\">解析HTML利器AngleSharp介绍</a>，</p>\n</li>\n<li><p>Nuget地址:<a href=\"https://www.nuget.org/packages/AngleSharp\">Nuget AngleSharp</a> 安装命令：Install-Package AngleSharp</p>\n</li>\n</ol>\n<h5 id=\"获取电影列表数据\"><a href=\"#获取电影列表数据\" class=\"headerlink\" title=\"获取电影列表数据\"></a>获取电影列表数据</h5><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> HtmlParser htmlParser = <span class=\"keyword\">new</span> HtmlParser();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>  ConcurrentDictionary&lt;<span class=\"keyword\">string</span>, MovieInfo&gt; _cdMovieInfo = <span class=\"keyword\">new</span> ConcurrentDictionary&lt;<span class=\"keyword\">string</span>, MovieInfo&gt;();</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">AddToHotMovieList</span>(<span class=\"params\"></span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//此操作不阻塞当前其他操作，所以使用Task</span></div><div class=\"line\">\t<span class=\"comment\">// _cdMovieInfo 为线程安全字典，存储了当期所有的电影数据</span></div><div class=\"line\">\tTask.Factory.StartNew(()=&gt; </div><div class=\"line\">\t&#123;</div><div class=\"line\">\t    <span class=\"keyword\">try</span></div><div class=\"line\">\t    &#123;</div><div class=\"line\">\t        <span class=\"comment\">//通过URL获取HTML</span></div><div class=\"line\">\t        <span class=\"keyword\">var</span> htmlDoc = HTTPHelper.GetHTMLByURL(<span class=\"string\">\"http://www.dy2018.com/\"</span>);</div><div class=\"line\">\t        <span class=\"comment\">//HTML 解析成 IDocument</span></div><div class=\"line\">\t        <span class=\"keyword\">var</span> dom = htmlParser.Parse(htmlDoc);</div><div class=\"line\">\t        <span class=\"comment\">//从dom中提取所有class='co_content222'的div标签</span></div><div class=\"line\">\t        <span class=\"comment\">//QuerySelectorAll方法接受 选择器语法 </span></div><div class=\"line\">\t        <span class=\"keyword\">var</span> lstDivInfo = dom.QuerySelectorAll(<span class=\"string\">\"div.co_content222\"</span>);</div><div class=\"line\">\t        <span class=\"keyword\">if</span> (lstDivInfo != <span class=\"literal\">null</span>)</div><div class=\"line\">\t        &#123;</div><div class=\"line\">\t            <span class=\"comment\">//前三个DIV为新电影</span></div><div class=\"line\">\t            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> divInfo <span class=\"keyword\">in</span> lstDivInfo.Take(<span class=\"number\">3</span>))</div><div class=\"line\">\t            &#123;</div><div class=\"line\">\t                <span class=\"comment\">//获取div中所有的a标签且a标签中含有\"/i/\"的</span></div><div class=\"line\">\t                <span class=\"comment\">//Contains(\"/i/\") 条件的过滤是因为在测试中发现这一块div中的a标签有可能是广告链接</span></div><div class=\"line\">\t                divInfo.QuerySelectorAll(<span class=\"string\">\"a\"</span>).Where(a =&gt; </div><div class=\"line\">\t                a.GetAttribute(<span class=\"string\">\"href\"</span>).Contains(<span class=\"string\">\"/i/\"</span>))</div><div class=\"line\">\t                .ToList().ForEach(</div><div class=\"line\">\t                a =&gt;</div><div class=\"line\">\t                &#123;</div><div class=\"line\">\t                    <span class=\"comment\">//拼接成完整链接</span></div><div class=\"line\">\t                    <span class=\"keyword\">var</span> onlineURL = <span class=\"string\">\"http://www.dy2018.com\"</span> + a.GetAttribute(<span class=\"string\">\"href\"</span>);</div><div class=\"line\">\t                    <span class=\"comment\">//看一下是否已经存在于现有数据中</span></div><div class=\"line\">\t                    <span class=\"keyword\">if</span> (!_cdMovieInfo.ContainsKey(onlineURL))</div><div class=\"line\">\t                    &#123;</div><div class=\"line\">\t                        <span class=\"comment\">//获取电影的详细信息</span></div><div class=\"line\">\t                        MovieInfo movieInfo = FillMovieInfoFormWeb(a, onlineURL);</div><div class=\"line\">\t                        <span class=\"comment\">//下载链接不为空才添加到现有数据</span></div><div class=\"line\">\t                        <span class=\"keyword\">if</span> (movieInfo.XunLeiDownLoadURLList != <span class=\"literal\">null</span> </div><div class=\"line\">\t                        &amp;&amp; movieInfo.XunLeiDownLoadURLList.Count != <span class=\"number\">0</span>)</div><div class=\"line\">\t                        &#123;</div><div class=\"line\">\t                             _cdMovieInfo.TryAdd</div><div class=\"line\">\t                             (movieInfo.Dy2018OnlineUrl,movieInfo);</div><div class=\"line\">\t                        &#125;</div><div class=\"line\">\t                    &#125;</div><div class=\"line\">\t                &#125;);</div><div class=\"line\">\t            &#125;</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t</div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t    <span class=\"keyword\">catch</span>(Exception ex)</div><div class=\"line\">\t    &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"获取电影详细信息\"><a href=\"#获取电影详细信息\" class=\"headerlink\" title=\"获取电影详细信息\"></a>获取电影详细信息</h4><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> MovieInfo <span class=\"title\">FillMovieInfoFormWeb</span>(<span class=\"params\">AngleSharp.Dom.IElement a, </div><div class=\"line\"> <span class=\"keyword\">string</span> onlineURL</span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> movieHTML = HTTPHelper.GetHTMLByURL(onlineURL);</div><div class=\"line\">    <span class=\"keyword\">var</span> movieDoc = htmlParser.Parse(movieHTML);</div><div class=\"line\">    <span class=\"comment\">//http://www.dy2018.com/i/97462.html 分析过程见上，不再赘述</span></div><div class=\"line\">    <span class=\"comment\">//电影的详细介绍 在id为Zoom的标签中</span></div><div class=\"line\">    <span class=\"keyword\">var</span> zoom = movieDoc.GetElementById(<span class=\"string\">\"Zoom\"</span>);</div><div class=\"line\">    <span class=\"comment\">//下载链接在 bgcolor='#fdfddf'的td中，有可能有多个链接</span></div><div class=\"line\">    <span class=\"keyword\">var</span> lstDownLoadURL = movieDoc.QuerySelectorAll(<span class=\"string\">\"[bgcolor='#fdfddf']\"</span>);</div><div class=\"line\">    <span class=\"comment\">//发布时间 在class='updatetime'的span标签中</span></div><div class=\"line\">    <span class=\"keyword\">var</span> updatetime = movieDoc.QuerySelector(<span class=\"string\">\"span.updatetime\"</span>); </div><div class=\"line\">    <span class=\"keyword\">var</span> pubDate = DateTime.Now;</div><div class=\"line\">    <span class=\"keyword\">if</span>(updatetime!=<span class=\"literal\">null</span> &amp;&amp; !<span class=\"keyword\">string</span>.IsNullOrEmpty(updatetime.InnerHtml))</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">//内容带有“发布时间：”字样，</span></div><div class=\"line\">        <span class=\"comment\">//replace成\"\"之后再去转换，转换失败不影响流程</span></div><div class=\"line\">        DateTime.TryParse(updatetime.InnerHtml.Replace(<span class=\"string\">\"发布时间：\"</span>, </div><div class=\"line\">        <span class=\"string\">\"\"</span>), <span class=\"keyword\">out</span> pubDate);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> movieInfo = <span class=\"keyword\">new</span> MovieInfo()</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">//InnerHtml中可能还包含font标签，做多一个Replace</span></div><div class=\"line\">        MovieName = a.InnerHtml.Replace(<span class=\"string\">\"&lt;font color=\\\"#0c9000\\\"&gt;\"</span>,<span class=\"string\">\"\"</span>)</div><div class=\"line\">        .Replace(<span class=\"string\">\"&lt;font color=\\\"\t#0c9000\\\"&gt;\"</span>,<span class=\"string\">\"\"</span>)</div><div class=\"line\">        .Replace(<span class=\"string\">\"&lt;/font&gt;\"</span>, <span class=\"string\">\"\"</span>),</div><div class=\"line\">        Dy2018OnlineUrl = onlineURL,</div><div class=\"line\">        MovieIntro = zoom != <span class=\"literal\">null</span> ? WebUtility.HtmlEncode(zoom.InnerHtml) : <span class=\"string\">\"暂无介绍...\"</span>,</div><div class=\"line\">        <span class=\"comment\">//可能没有简介，虽然好像不怎么可能</span></div><div class=\"line\">        XunLeiDownLoadURLList = lstDownLoadURL != <span class=\"literal\">null</span> ?</div><div class=\"line\">        lstDownLoadURL.Select(d =&gt; d.FirstElementChild.InnerHtml).ToList() : <span class=\"literal\">null</span>,</div><div class=\"line\">        <span class=\"comment\">//可能没有下载链接</span></div><div class=\"line\">        PubDate = pubDate,</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> movieInfo;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"HTTPHelper\"><a href=\"#HTTPHelper\" class=\"headerlink\" title=\"HTTPHelper\"></a>HTTPHelper</h4><p>这边有个小坑，dy2018网页编码格式是GB2312,.NET Core默认不支持GB2312，使用Encoding.GetEncoding(“GB2312”)的时候会抛出异常。</p>\n<p>解决方案是手动安装System.Text.Encoding.CodePages包(Install-Package System.Text.Encoding.CodePages),</p>\n<p>然后在Starup.cs的Configure方法中加入Encoding.RegisterProvider(CodePagesEncodingProvider.Instance),接着就可以正常使用Encoding.GetEncoding(“GB2312”)了。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> System;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Net.Http;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Net.Http.Headers;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Text;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Dy2018Crawler</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HTTPHelper</span></div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> HttpClient Client &#123; <span class=\"keyword\">get</span>; &#125; = <span class=\"keyword\">new</span> HttpClient();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetHTMLByURL</span>(<span class=\"params\"><span class=\"keyword\">string</span> url</span>)</div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">try</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                System.Net.WebRequest wRequest = System.Net.WebRequest.Create(url);</div><div class=\"line\">                wRequest.ContentType = <span class=\"string\">\"text/html; charset=gb2312\"</span>;</div><div class=\"line\"></div><div class=\"line\">                wRequest.Method = <span class=\"string\">\"get\"</span>;</div><div class=\"line\">                wRequest.UseDefaultCredentials = <span class=\"literal\">true</span>;</div><div class=\"line\">                <span class=\"comment\">// Get the response instance.</span></div><div class=\"line\">                <span class=\"keyword\">var</span> task = wRequest.GetResponseAsync();</div><div class=\"line\">                System.Net.WebResponse wResp = task.Result;</div><div class=\"line\">                System.IO.Stream respStream = wResp.GetResponseStream();</div><div class=\"line\">                <span class=\"comment\">//dy2018这个网站编码方式是GB2312,</span></div><div class=\"line\">                <span class=\"keyword\">using</span> (System.IO.StreamReader reader =</div><div class=\"line\">                <span class=\"keyword\">new</span> System.IO.StreamReader(respStream,</div><div class=\"line\">                Encoding.GetEncoding(<span class=\"string\">\"GB2312\"</span>)))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> reader.ReadToEnd();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">catch</span> (Exception ex)</div><div class=\"line\">            &#123;</div><div class=\"line\">                Console.WriteLine(ex.ToString());</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>.Empty;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">       </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"定时任务的实现\"><a href=\"#定时任务的实现\" class=\"headerlink\" title=\"定时任务的实现\"></a>定时任务的实现</h3><p>定时任务我这里使用的是<a href=\"https://www.nuget.org/packages/Pomelo.AspNetCore.TimedJob/1.1.0-rtm-10026\">Pomelo.AspNetCore.TimedJob</a>。</p>\n<p>Pomelo.AspNetCore.TimedJob是一个.NET Core实现的定时任务job库，支持毫秒级定时任务、从数据库读取定时配置、同步异步定时任务等功能。</p>\n<p>由.NET Core社区大神兼前微软MVP<a href=\"https://www.nuget.org/profiles/AmamiyaYuuko\">AmamiyaYuuko</a>(入职微软之后就卸任MVP…)开发维护，不过好像没有开源，回头问下看看能不能开源掉。</p>\n<p>nuget上有各种版本，按需自取。地址：<a href=\"https://www.nuget.org/packages/Pomelo.AspNetCore.TimedJob/1.1.0-rtm-10026\">https://www.nuget.org/packages/Pomelo.AspNetCore.TimedJob/1.1.0-rtm-10026</a></p>\n<p>作者自己的介绍文章：<a href=\"http://www.1234.sh/post/pomelo-extensions-timed-jobs\">Timed Job - Pomelo扩展包系列</a></p>\n<h4 id=\"Startup-cs相关代码\"><a href=\"#Startup-cs相关代码\" class=\"headerlink\" title=\"Startup.cs相关代码\"></a>Startup.cs相关代码</h4><p>我这边使用的话，首先肯定是先安装对应的包：Install-Package Pomelo.AspNetCore.TimedJob -Pre</p>\n<p>然后在Startup.cs的ConfigureServices函数里面添加Service,在Configure函数里面Use一下。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// This method gets called by the runtime. Use this method to add services to the container.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Add framework services.</span></div><div class=\"line\">    services.AddMvc();</div><div class=\"line\">    <span class=\"comment\">//Add TimedJob services</span></div><div class=\"line\">    services.AddTimedJob();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, </div><div class=\"line\"> IHostingEnvironment env, ILoggerFactory loggerFactory</span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//使用TimedJob</span></div><div class=\"line\">    app.UseTimedJob();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (env.IsDevelopment())</div><div class=\"line\">    &#123;</div><div class=\"line\">        app.UseDeveloperExceptionPage();</div><div class=\"line\">        app.UseBrowserLink();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        app.UseExceptionHandler(<span class=\"string\">\"/Home/Error\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    app.UseStaticFiles();</div><div class=\"line\"></div><div class=\"line\">    app.UseMvc(routes =&gt;</div><div class=\"line\">    &#123;</div><div class=\"line\">        routes.MapRoute(</div><div class=\"line\">            name: <span class=\"string\">\"default\"</span>,</div><div class=\"line\">            template: <span class=\"string\">\"&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Job相关代码\"><a href=\"#Job相关代码\" class=\"headerlink\" title=\"Job相关代码\"></a>Job相关代码</h4><p>接着新建一个类，明明为XXXJob.cs,引用命名空间using Pomelo.AspNetCore.TimedJob，XXXJob继承于Job，添加以下代码。</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AutoGetMovieListJob</span>:<span class=\"title\">Job</span></div><div class=\"line\"> &#123;</div><div class=\"line\">     </div><div class=\"line\">     <span class=\"comment\">// Begin 起始时间；Interval执行时间间隔，单位是毫秒，建议使用以下格式，此处为3小时；</span></div><div class=\"line\">     <span class=\"comment\">//SkipWhileExecuting是否等待上一个执行完成，true为等待；</span></div><div class=\"line\">     [Invoke(Begin = <span class=\"string\">\"2016-11-29 22:10\"</span>, Interval = <span class=\"number\">1000</span> * <span class=\"number\">3600</span>*<span class=\"number\">3</span>, SkipWhileExecuting =<span class=\"literal\">true</span>)]</div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Run</span>(<span class=\"params\"></span>)</div><div class=\"line\">     </span>&#123;</div><div class=\"line\">          <span class=\"comment\">//Job要执行的逻辑代码</span></div><div class=\"line\">          </div><div class=\"line\">         <span class=\"comment\">//LogHelper.Info(\"Start crawling\");</span></div><div class=\"line\">         <span class=\"comment\">//AddToLatestMovieList(100);</span></div><div class=\"line\">         <span class=\"comment\">//AddToHotMovieList();</span></div><div class=\"line\">         <span class=\"comment\">//LogHelper.Info(\"Finish crawling\");</span></div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"项目发布相关\"><a href=\"#项目发布相关\" class=\"headerlink\" title=\"项目发布相关\"></a>项目发布相关</h3><h4 id=\"新增runtimes节点\"><a href=\"#新增runtimes节点\" class=\"headerlink\" title=\"新增runtimes节点\"></a>新增runtimes节点</h4><p>使用VS2015新建的模板工程，project.json配置默认是没有runtimes节点的.</p>\n<p>我们想要发布到非Windows平台的时候，需要手动配置一下此节点以便生成。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  <span class=\"string\">\"runtimes\"</span>: &#123;</div><div class=\"line\">  <span class=\"string\">\"win7-x64\"</span>: &#123;&#125;,</div><div class=\"line\">  <span class=\"string\">\"win7-x86\"</span>: &#123;&#125;,</div><div class=\"line\">  <span class=\"string\">\"osx.10.10-x64\"</span>: &#123;&#125;,</div><div class=\"line\">  <span class=\"string\">\"osx.10.11-x64\"</span>: &#123;&#125;,</div><div class=\"line\">  <span class=\"string\">\"ubuntu.14.04-x64\"</span>: &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"删除-注释scripts节点\"><a href=\"#删除-注释scripts节点\" class=\"headerlink\" title=\"删除/注释scripts节点\"></a>删除/注释scripts节点</h4><p>生成时会调用node.js脚本构建前端代码，这个不能确保每个环境都有bower存在…注释完事。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//\"scripts\": &#123;</span></div><div class=\"line\"><span class=\"comment\">//  \"prepublish\": [ \"bower install\", \"dotnet bundle\" ],</span></div><div class=\"line\"><span class=\"comment\">//  \"postpublish\": [ \"dotnet publish-iis --publish-folder %publish:OutputPath% --framework %publish:FullTargetFramework%\" ]</span></div><div class=\"line\"><span class=\"comment\">//&#125;,</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"删除-注释dependencies节点里面的type\"><a href=\"#删除-注释dependencies节点里面的type\" class=\"headerlink\" title=\"删除/注释dependencies节点里面的type\"></a>删除/注释dependencies节点里面的type</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"Microsoft.NETCore.App\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.1.0\"</span></div><div class=\"line\">      <span class=\"comment\">//\"type\": \"platform\"</span></div><div class=\"line\">    &#125;,</div></pre></td></tr></table></figure>\n<p>project.json的相关配置说明可以看下这个官方文档：<a href=\"https://github.com/aspnet/Home/wiki/Project.json-file\">Project.json-file</a>,<br>或者张善友老师的文章<a href=\"http://www.cnblogs.com/shanyou/p/5693453.html\">.NET Core系列 ： 2 、project.json 这葫芦里卖的什么药</a></p>\n<h4 id=\"开发编译发布\"><a href=\"#开发编译发布\" class=\"headerlink\" title=\"开发编译发布\"></a>开发编译发布</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//还原各种包文件</div><div class=\"line\">dotnet restore;</div><div class=\"line\"></div><div class=\"line\">//发布到C:\\code\\website\\Dy2018Crawler文件夹</div><div class=\"line\">dotnet publish -r ubuntu.14.04-x64 -c Release -o &quot;C:\\code\\website\\Dy2018Crawler&quot;;</div></pre></td></tr></table></figure>\n<p>最后，照旧开源……以上代码都在下面找到：</p>\n<p>Gayhub地址：<a href=\"https://github.com/liguobao/Dy2018Crawler\">https://github.com/liguobao/Dy2018Crawler</a></p>\n<p>在线地址：<a href=\"http://codelover.win/\">http://codelover.win/</a></p>\n<p>PS:回头写个爬片大家滋持不啊…</p>\n"},{"layout":"post","title":"Microsoft .NET Core 1.0.0 VS 2015 Tooling Preview 2 0x80070003","_content":"\n最近安装Microsoft .NET Core 1.0.0 VS 2015 Tooling Preview 2实在有点曲折，忍不住写个文章来讲这货的坑爹之旅了。\n\n一般我们在[.NET Downloads](https://www.microsoft.com/net/download) 下载回来的Microsoft .NET Core 1.0.0 VS 2015 Tooling Preview 2是一个简易安装包。\n\n它在安装过程中会不断去网络请求需要的msi文件，美名曰：在线安装。\n\n然而在我国的国情以及我国网络运营商的衬托下，在线安装这种东西实在不可恭维。\n\n本来网络稳定，在线安装 这种鬼也还算能用，不过最近微软爸爸不知道为嘛了，.net core相关安装包的下载地址全线失效。\n如[DotNetCore.1.0.1-SDK.1.0.0.Preview2-003133-x64.exe](https://download.microsoft.com/download/0/A/3/0A372822-205D-4A86-BFA7-084D2CBE9EDF/DotNetCore.1.0.1-SDK.1.0.0.Preview2-003133-x64.exe)，直接出502 Bad Gateway。\n\n这个还能用迅雷或者命令行下载回来，但是DotNetCore.1.0.1-SDK.1.0.0.Preview2这货安装过程中需要的一下msi安装包，就死活下不回来了。\n\n#### 安装过程报错：0x80070003 系统找不到需要的文件。\n\n此处已确认是微软爸爸的bug了。[issue在这里](https://github.com/aspnet/Tooling/issues/655)\n\n我们去看安装失败的log，能看到类似下面的log：\n\nError 0x80072efd: Failed attempt to download URL: 'https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi' to: 'C:\\Users\\cneuss\\AppData\\Local\\Temp{C307771D-8D9A-45B5-B514-B6CA69C0C6E2}\\ANCM_IISExpress_x64'\n\n\n很明显这个操作从[https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi](https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi)上面下载ancm_iis_express_x64_en_rc2_39.msi文件。\n然而我们点击进去，看到这个同样的问题：502 Bad Gateway。\n\n\n安装到这里，已经GG了。\n\n不过既然知道是因为下载文件的问题了，那么解决办法也应运而生了。\n\n我们完全手动下载文件（用迅雷或者别的下载工具），发布在本地，改hosts地址让下载请求直接从本地下载文件。\n\n这个方案听起来是没有任何的问题的，我也成功使用迅雷把无法下载的文件下载到本地了。然而在改host地址这里卡住了。\n\n不知道为嘛，无论我把[download.microsoft.com](download.microsoft.com)指向怎么改，也无法把请求重定向到本地。\n\n后来认真看了下安装log，发现所以的下载操作都是把文件下载到 C:\\Users\\cneuss\\AppData\\Local\\Temp 目录（具体目录看log文件内容）下的临时路径，报错是系统找不到需要的文件。\n\n那么，我们手动把需要的文件放到对应的位置，问题也就解决了。\n\n所以，为了清晰找到临时路径，安装之前先把“C:\\Users\\cneuss\\AppData\\Local\\Temp”的文件清空，然后点击安装包。\n\n很快可以在temp路径下看到冒出来的{xxxxxxxxxxxxx}文件夹，然后迅速把我们通过迅雷下载回来的文件仍到这个目录底下。\n\n迅速操作的原因是，在线安装包正在下载所需要的文件，如：ancm_iis_express_x64_en_rc2_39.msi，我们要在下载超时之前把文件应该在的位置，这样的话即使下载没拿到文件，安装程序还是可以拿我们的文件去执行安装。\n\n别的就是不断尝试，看缺少那个msi手动下哪个msi的事情了。\n\n#### 最终方案\n最后，根据log文件，还发现了一个更简单的方法：\n\n在DotNetCore.1.0.1-SDK.1.0.0.Preview2-003133-x64.exe的同级目录下新建packages文件夹，把上面无法在线下载到的msi仍进去，然后就一路绿灯了。\n\n\n\n\n\n\n \n","source":"_posts/install_Preview2_on_fresh_VS2015_Update3_Installation.md","raw":"---\nlayout: post\ntitle : Microsoft .NET Core 1.0.0 VS 2015 Tooling Preview 2 0x80070003\ncategory: .net core\n---\n\n最近安装Microsoft .NET Core 1.0.0 VS 2015 Tooling Preview 2实在有点曲折，忍不住写个文章来讲这货的坑爹之旅了。\n\n一般我们在[.NET Downloads](https://www.microsoft.com/net/download) 下载回来的Microsoft .NET Core 1.0.0 VS 2015 Tooling Preview 2是一个简易安装包。\n\n它在安装过程中会不断去网络请求需要的msi文件，美名曰：在线安装。\n\n然而在我国的国情以及我国网络运营商的衬托下，在线安装这种东西实在不可恭维。\n\n本来网络稳定，在线安装 这种鬼也还算能用，不过最近微软爸爸不知道为嘛了，.net core相关安装包的下载地址全线失效。\n如[DotNetCore.1.0.1-SDK.1.0.0.Preview2-003133-x64.exe](https://download.microsoft.com/download/0/A/3/0A372822-205D-4A86-BFA7-084D2CBE9EDF/DotNetCore.1.0.1-SDK.1.0.0.Preview2-003133-x64.exe)，直接出502 Bad Gateway。\n\n这个还能用迅雷或者命令行下载回来，但是DotNetCore.1.0.1-SDK.1.0.0.Preview2这货安装过程中需要的一下msi安装包，就死活下不回来了。\n\n#### 安装过程报错：0x80070003 系统找不到需要的文件。\n\n此处已确认是微软爸爸的bug了。[issue在这里](https://github.com/aspnet/Tooling/issues/655)\n\n我们去看安装失败的log，能看到类似下面的log：\n\nError 0x80072efd: Failed attempt to download URL: 'https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi' to: 'C:\\Users\\cneuss\\AppData\\Local\\Temp{C307771D-8D9A-45B5-B514-B6CA69C0C6E2}\\ANCM_IISExpress_x64'\n\n\n很明显这个操作从[https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi](https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi)上面下载ancm_iis_express_x64_en_rc2_39.msi文件。\n然而我们点击进去，看到这个同样的问题：502 Bad Gateway。\n\n\n安装到这里，已经GG了。\n\n不过既然知道是因为下载文件的问题了，那么解决办法也应运而生了。\n\n我们完全手动下载文件（用迅雷或者别的下载工具），发布在本地，改hosts地址让下载请求直接从本地下载文件。\n\n这个方案听起来是没有任何的问题的，我也成功使用迅雷把无法下载的文件下载到本地了。然而在改host地址这里卡住了。\n\n不知道为嘛，无论我把[download.microsoft.com](download.microsoft.com)指向怎么改，也无法把请求重定向到本地。\n\n后来认真看了下安装log，发现所以的下载操作都是把文件下载到 C:\\Users\\cneuss\\AppData\\Local\\Temp 目录（具体目录看log文件内容）下的临时路径，报错是系统找不到需要的文件。\n\n那么，我们手动把需要的文件放到对应的位置，问题也就解决了。\n\n所以，为了清晰找到临时路径，安装之前先把“C:\\Users\\cneuss\\AppData\\Local\\Temp”的文件清空，然后点击安装包。\n\n很快可以在temp路径下看到冒出来的{xxxxxxxxxxxxx}文件夹，然后迅速把我们通过迅雷下载回来的文件仍到这个目录底下。\n\n迅速操作的原因是，在线安装包正在下载所需要的文件，如：ancm_iis_express_x64_en_rc2_39.msi，我们要在下载超时之前把文件应该在的位置，这样的话即使下载没拿到文件，安装程序还是可以拿我们的文件去执行安装。\n\n别的就是不断尝试，看缺少那个msi手动下哪个msi的事情了。\n\n#### 最终方案\n最后，根据log文件，还发现了一个更简单的方法：\n\n在DotNetCore.1.0.1-SDK.1.0.0.Preview2-003133-x64.exe的同级目录下新建packages文件夹，把上面无法在线下载到的msi仍进去，然后就一路绿灯了。\n\n\n\n\n\n\n \n","slug":"install_Preview2_on_fresh_VS2015_Update3_Installation","published":1,"date":"2016-10-15T05:53:38.246Z","updated":"2016-10-15T07:31:54.363Z","comments":1,"photos":[],"link":"","_id":"cj0dyumx1001f6kunqgpr34q9","content":"<p>最近安装Microsoft .NET Core 1.0.0 VS 2015 Tooling Preview 2实在有点曲折，忍不住写个文章来讲这货的坑爹之旅了。</p>\n<p>一般我们在<a href=\"https://www.microsoft.com/net/download\" target=\"_blank\" rel=\"external\">.NET Downloads</a> 下载回来的Microsoft .NET Core 1.0.0 VS 2015 Tooling Preview 2是一个简易安装包。</p>\n<p>它在安装过程中会不断去网络请求需要的msi文件，美名曰：在线安装。</p>\n<p>然而在我国的国情以及我国网络运营商的衬托下，在线安装这种东西实在不可恭维。</p>\n<p>本来网络稳定，在线安装 这种鬼也还算能用，不过最近微软爸爸不知道为嘛了，.net core相关安装包的下载地址全线失效。<br>如<a href=\"https://download.microsoft.com/download/0/A/3/0A372822-205D-4A86-BFA7-084D2CBE9EDF/DotNetCore.1.0.1-SDK.1.0.0.Preview2-003133-x64.exe\" target=\"_blank\" rel=\"external\">DotNetCore.1.0.1-SDK.1.0.0.Preview2-003133-x64.exe</a>，直接出502 Bad Gateway。</p>\n<p>这个还能用迅雷或者命令行下载回来，但是DotNetCore.1.0.1-SDK.1.0.0.Preview2这货安装过程中需要的一下msi安装包，就死活下不回来了。</p>\n<h4 id=\"安装过程报错：0x80070003-系统找不到需要的文件。\"><a href=\"#安装过程报错：0x80070003-系统找不到需要的文件。\" class=\"headerlink\" title=\"安装过程报错：0x80070003 系统找不到需要的文件。\"></a>安装过程报错：0x80070003 系统找不到需要的文件。</h4><p>此处已确认是微软爸爸的bug了。<a href=\"https://github.com/aspnet/Tooling/issues/655\" target=\"_blank\" rel=\"external\">issue在这里</a></p>\n<p>我们去看安装失败的log，能看到类似下面的log：</p>\n<p>Error 0x80072efd: Failed attempt to download URL: ‘<a href=\"https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi\" target=\"_blank\" rel=\"external\">https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi</a>‘ to: ‘C:\\Users\\cneuss\\AppData\\Local\\Temp{C307771D-8D9A-45B5-B514-B6CA69C0C6E2}\\ANCM_IISExpress_x64’</p>\n<p>很明显这个操作从<a href=\"https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi\" target=\"_blank\" rel=\"external\">https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi</a>上面下载ancm_iis_express_x64_en_rc2_39.msi文件。<br>然而我们点击进去，看到这个同样的问题：502 Bad Gateway。</p>\n<p>安装到这里，已经GG了。</p>\n<p>不过既然知道是因为下载文件的问题了，那么解决办法也应运而生了。</p>\n<p>我们完全手动下载文件（用迅雷或者别的下载工具），发布在本地，改hosts地址让下载请求直接从本地下载文件。</p>\n<p>这个方案听起来是没有任何的问题的，我也成功使用迅雷把无法下载的文件下载到本地了。然而在改host地址这里卡住了。</p>\n<p>不知道为嘛，无论我把<a href=\"download.microsoft.com\">download.microsoft.com</a>指向怎么改，也无法把请求重定向到本地。</p>\n<p>后来认真看了下安装log，发现所以的下载操作都是把文件下载到 C:\\Users\\cneuss\\AppData\\Local\\Temp 目录（具体目录看log文件内容）下的临时路径，报错是系统找不到需要的文件。</p>\n<p>那么，我们手动把需要的文件放到对应的位置，问题也就解决了。</p>\n<p>所以，为了清晰找到临时路径，安装之前先把“C:\\Users\\cneuss\\AppData\\Local\\Temp”的文件清空，然后点击安装包。</p>\n<p>很快可以在temp路径下看到冒出来的{xxxxxxxxxxxxx}文件夹，然后迅速把我们通过迅雷下载回来的文件仍到这个目录底下。</p>\n<p>迅速操作的原因是，在线安装包正在下载所需要的文件，如：ancm_iis_express_x64_en_rc2_39.msi，我们要在下载超时之前把文件应该在的位置，这样的话即使下载没拿到文件，安装程序还是可以拿我们的文件去执行安装。</p>\n<p>别的就是不断尝试，看缺少那个msi手动下哪个msi的事情了。</p>\n<h4 id=\"最终方案\"><a href=\"#最终方案\" class=\"headerlink\" title=\"最终方案\"></a>最终方案</h4><p>最后，根据log文件，还发现了一个更简单的方法：</p>\n<p>在DotNetCore.1.0.1-SDK.1.0.0.Preview2-003133-x64.exe的同级目录下新建packages文件夹，把上面无法在线下载到的msi仍进去，然后就一路绿灯了。</p>\n","excerpt":"","more":"<p>最近安装Microsoft .NET Core 1.0.0 VS 2015 Tooling Preview 2实在有点曲折，忍不住写个文章来讲这货的坑爹之旅了。</p>\n<p>一般我们在<a href=\"https://www.microsoft.com/net/download\">.NET Downloads</a> 下载回来的Microsoft .NET Core 1.0.0 VS 2015 Tooling Preview 2是一个简易安装包。</p>\n<p>它在安装过程中会不断去网络请求需要的msi文件，美名曰：在线安装。</p>\n<p>然而在我国的国情以及我国网络运营商的衬托下，在线安装这种东西实在不可恭维。</p>\n<p>本来网络稳定，在线安装 这种鬼也还算能用，不过最近微软爸爸不知道为嘛了，.net core相关安装包的下载地址全线失效。<br>如<a href=\"https://download.microsoft.com/download/0/A/3/0A372822-205D-4A86-BFA7-084D2CBE9EDF/DotNetCore.1.0.1-SDK.1.0.0.Preview2-003133-x64.exe\">DotNetCore.1.0.1-SDK.1.0.0.Preview2-003133-x64.exe</a>，直接出502 Bad Gateway。</p>\n<p>这个还能用迅雷或者命令行下载回来，但是DotNetCore.1.0.1-SDK.1.0.0.Preview2这货安装过程中需要的一下msi安装包，就死活下不回来了。</p>\n<h4 id=\"安装过程报错：0x80070003-系统找不到需要的文件。\"><a href=\"#安装过程报错：0x80070003-系统找不到需要的文件。\" class=\"headerlink\" title=\"安装过程报错：0x80070003 系统找不到需要的文件。\"></a>安装过程报错：0x80070003 系统找不到需要的文件。</h4><p>此处已确认是微软爸爸的bug了。<a href=\"https://github.com/aspnet/Tooling/issues/655\">issue在这里</a></p>\n<p>我们去看安装失败的log，能看到类似下面的log：</p>\n<p>Error 0x80072efd: Failed attempt to download URL: ‘<a href=\"https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi\">https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi</a>‘ to: ‘C:\\Users\\cneuss\\AppData\\Local\\Temp{C307771D-8D9A-45B5-B514-B6CA69C0C6E2}\\ANCM_IISExpress_x64’</p>\n<p>很明显这个操作从<a href=\"https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi\">https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi</a>上面下载ancm_iis_express_x64_en_rc2_39.msi文件。<br>然而我们点击进去，看到这个同样的问题：502 Bad Gateway。</p>\n<p>安装到这里，已经GG了。</p>\n<p>不过既然知道是因为下载文件的问题了，那么解决办法也应运而生了。</p>\n<p>我们完全手动下载文件（用迅雷或者别的下载工具），发布在本地，改hosts地址让下载请求直接从本地下载文件。</p>\n<p>这个方案听起来是没有任何的问题的，我也成功使用迅雷把无法下载的文件下载到本地了。然而在改host地址这里卡住了。</p>\n<p>不知道为嘛，无论我把<a href=\"download.microsoft.com\">download.microsoft.com</a>指向怎么改，也无法把请求重定向到本地。</p>\n<p>后来认真看了下安装log，发现所以的下载操作都是把文件下载到 C:\\Users\\cneuss\\AppData\\Local\\Temp 目录（具体目录看log文件内容）下的临时路径，报错是系统找不到需要的文件。</p>\n<p>那么，我们手动把需要的文件放到对应的位置，问题也就解决了。</p>\n<p>所以，为了清晰找到临时路径，安装之前先把“C:\\Users\\cneuss\\AppData\\Local\\Temp”的文件清空，然后点击安装包。</p>\n<p>很快可以在temp路径下看到冒出来的{xxxxxxxxxxxxx}文件夹，然后迅速把我们通过迅雷下载回来的文件仍到这个目录底下。</p>\n<p>迅速操作的原因是，在线安装包正在下载所需要的文件，如：ancm_iis_express_x64_en_rc2_39.msi，我们要在下载超时之前把文件应该在的位置，这样的话即使下载没拿到文件，安装程序还是可以拿我们的文件去执行安装。</p>\n<p>别的就是不断尝试，看缺少那个msi手动下哪个msi的事情了。</p>\n<h4 id=\"最终方案\"><a href=\"#最终方案\" class=\"headerlink\" title=\"最终方案\"></a>最终方案</h4><p>最后，根据log文件，还发现了一个更简单的方法：</p>\n<p>在DotNetCore.1.0.1-SDK.1.0.0.Preview2-003133-x64.exe的同级目录下新建packages文件夹，把上面无法在线下载到的msi仍进去，然后就一路绿灯了。</p>\n"},{"layout":"post","title":"使用requirejs编写模块化代码","date":"2016-10-21T16:00:00.000Z","_content":"\n### 写在前面\n最早接触javascript的时候，javascript代码直接扔在script标签里面就完事了。\n\n反正代码不多，交互简单，逻辑不难，和HTML混在一起也未尝不可。\n\n后来交互越来越复杂，代码越多越多了，我们就开始把JS代码独立到了单独的JS文件中。\n\n公共的库引用在前，自己的逻辑代码引用在后，全局变量定义在HTML内部，在独立JS文件中直接使用变量就好。\n\n我们会经常看到下面这种代码：\n\n```\n　　<script src=\"1.js\"></script>\n　　<script src=\"2.js\"></script>\n　　<script src=\"3.js\"></script>\n　　<script src=\"4.js\"></script>\n　　<script src=\"5.js\"></script>\n　　<script src=\"6.js\"></script>\n```\n通过script标签顺序去js管理依赖关系。\n\n阮一峰老师在[Javascript模块化编程（三）：require.js的用法](http://www.ruanyifeng.com/blog/2012/11/require_js.html)\n一文中总结了这样写法的缺点：\n\n首先，加载的时候，浏览器会停止网页渲染，加载文件越多，网页失去响应的时间就会越长；\n\n其次，由于js文件之间存在依赖关系，因此必须严格保证加载顺序（比如上例的1.js要在2.js的前面），依赖性最大的模块一定要放到最后加载.\n\n当依赖关系很复杂的时候，代码的编写和维护都会变得困难。\n\n而requirejs的诞生便是为了解决这个问题。\n\n### [requirejs](http://requirejs.org/docs/download.html)\n\n在[官网](http://requirejs.org/docs/download.html)把requirejs 下载回来之后。使用一般的方法引入：\n```\n<script src=\"js/require.js\"></script>\n```\n但是这样的方法，还是可能在加载require.js的时候导致网页失去响应。解决方案一般有两种：\n\n1. 把上面的代码放到网页底部\n\n2. 使用异步的方法加载，如下：\n\n```\n<script src=\"js/require.js\" defer async=\"true\" ></script>\n```\n[async属性](http://www.w3school.com.cn/html5/att_script_async.asp) 表明这个文件需要异步加载，避免网页失去响应。\n\n不过IE下不支持这个属性，只支持defer，所以可以把defer也写上。\n\n\n\n### 加载主模块\n在上一步，我们已经引入了require了，那么require怎么知道我们究竟要加载什么东西呢？答案是使用data-main属性。\n假设我们的主模块为js/home.js,引入代码应该如下：\n```\n　<script src=\"js/require.js\" data-main=\"js/home\"></script>\n  //require.js默认文件后缀为js，所以home.js可以写成home。\n```\n接下来我使用[58HouseSearch](https://github.com/liguobao/58HouseSearch) 的代码来讲解一下require的使用。\n\n在此项目里面，重构前大概就是JS变量漫天飞，js文件里面各种函数到处乱放。一开始用起来还没什么，后来加入了更多功能的时候，JS代码维护起来就疼不欲生了。因此托了个小伙伴帮忙使用模块化思想重构了一下JS代码。\n\n上面说了，我们首先需要创建我们的模块，在这个项目里面，主模块叫home.js。\n\nhome.js中我们需要配置一下require.config.\n```\nrequire.config({\n    baseUrl: '/DomainJS/',\n    paths: {\n        jquery: \"lib/jquery-1.11.3.min\",\n        \"AMUI\": \"lib/amazeui.2.7.1.min\",\n        \"jquery.range\": \"lib/jquery.range\",\n        \"es5\": \"lib/es5\",\n        \"mapController\": \"mapController\",\n        \"addToolbar\": \"addToolbar\",\n    },\n    shim: {\n        \"addToolbar\": {\n            deps: [\"jquery\"]\n        },\n        \"jquery.range\": {\n            deps: [\"jquery\"]\n        }\n    }\n});\n\n```\n在这里我主要配置了一下baseURL(所有模块的查找根路径)，paths(名称映射)，shim(\n为那些没有使用define()来声明依赖关系、设置模块的\"浏览器全局变量注入\"型脚本做依赖和导出配置。)\n\n关于require.config的详细内容可以看下下面这些文章：\n\n1. [RequireJS进阶:配置文件的学习](https://segmentfault.com/a/1190000002401665) \n2. [RequireJS进阶:模块的优化及配置的详解](https://segmentfault.com/a/1190000002403806)\n\n配置做完了，我们也可以开始真正写我们的逻辑代码了,我们使用require来加载我们需要的库。\n代码如下：\n\n```\nrequire(['domready!', 'jquery', 'AMUI', 'mapController', 'city', 'commuteGo'], \n\nfunction (doc, $, AMUI, mapController, city, commuteGo) {\n    city.initAllCityInfo();\n    mapController.init();\n\n    $(\"input[name='locationType']\").bind('click', \n    mapController.locationMethodOnChange)\n\n    $(\"input[name='vehicle']\").bind('click', commuteGo.go)\n\n    $('#Get58Data').bind('click', function(e) {\n        e.preventDefault();\n     \n        mapController.Get58DataClick();\n        e.stopPropagation();\n    });\n\n \n    $.ajax({\n        type: \"post\",\n        url: \"../Commom/GetPVCount\",\n        data: { },\n        success: function (result)\n        {\n            if (result.IsSuccess){\n                $(\"#lblPVCount\").text(result.PVCount);\n            }else {\n                $(\"#lblPVCount\").text(0);\n                console.log(result.Error);\n            }\n        }\n    });\n\n    $('#search-offcanvas').offCanvas({ effect: 'overlay' });\n\n    $(\".amap-sug-result\").css(\"z-index\", 9999);\n})\n\n```\n\n忽略function里面的具体逻辑，加载如下：\n```\nrequire(['domready!', 'jquery', 'AMUI', 'mapController', 'city', 'commuteGo'], \nfunction (doc, $, AMUI, mapController, city, commuteGo){\n\n//todo\n\n});\n\n```\n\n第一个参数为一个数组，表示所依赖的模块，此处为['domready!', 'jquery', 'AMUI', 'mapController', 'city', 'commuteGo']；\n\n第二个参数为回调函数，当前面指定的模块都全部加载成功之后，便调用此函数。加载的模块会以参数形式传入此函数，从而在回调函数内部就可以使用这些模块啦。\n\nrequire()异步加载所需模块的时候，此时浏览器并不会失去响应；当前面的模块加载成功之后，执行回调函数才会运行我们的逻辑代码，因此解决了依赖性问题。\n\n讲完了模块加载，我们下面讲一下模块编写。\n\n### AMD模块编写\n\nrequire.js加载的模块的采用的AMD规范。所以我们的模块必须按照AMD的规定来写。\n\n关于AMD规范详情可以看这个文章：[Javascript模块化编程（二）：AMD规范](http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html)\n\n模块有两个情况，不依赖其他模块和依赖其他模块。\n\n#### 不依赖其他模块\n直接define定义，使用function回调。\n\n[58HouseSearch/DomainJS/helper.js](https://github.com/liguobao/58HouseSearch/blob/master/58HouseSearch/DomainJS/helper.js)\n```\ndefine(function () {\n\n    //获取URL中的参数\n    var getQueryString=  function (name) {\n        var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\");\n        var r = window.location.search.substr(1).match(reg);\n        if (r != null) return unescape(r[2]); return null;\n    }\n    return {\n        getQueryString: getQueryString,\n    };\n})\n```\n\n#### 依赖其他模块\ndefine中如同require一样，用数组表明需要加载的模块，function回调。\n\n[58HouseSearch/DomainJS/marker.js](https://github.com/liguobao/58HouseSearch/blob/master/58HouseSearch/DomainJS/marker.js)\n```\ndefine(['mapSignleton', 'city', 'transfer'], \nfunction(mapSignleton, city, transfer) {\n    var _map = mapSignleton.map;\n    var _workMarker = null;\n    var _markerArray = [];\n    var load = function(x, y, locationName) {\n        _workMarker = new AMap.Marker({\n            map: _map,\n            title: locationName,\n            icon: 'http://webapi.amap.com/theme/v1.3/markers/n/mark_r.png',\n            position: [x, y]\n        });\n    }\n\n    var add = function(address, rent, href, markBG) {\n        new AMap.Geocoder({\n            city: city.name,\n            radius: 1000\n        }).getLocation(address, function(status, result) {\n\n            if (status === \"complete\" && result.info === 'OK') {\n                var geocode = result.geocodes[0];\n                var rentMarker = new AMap.Marker({\n                    map: _map,\n                    title: address,\n                    icon: markBG ? 'IMG/Little/' +\n                    markBG : 'http://webapi.amap.com/theme/v1.3/markers/n/mark_b.png',\n                    position: [geocode.location.getLng(), geocode.location.getLat()]\n                });\n                _markerArray.push(rentMarker);\n\n                rentMarker.content = \"<div><a target = '_blank' href='\" \n                + href + \"'>房源：\" + address + \"  租金：\" + rent + \"</a><div>\"\n                rentMarker.on('click', function(e) {\n                    transfer.add(e, address);\n                });\n            }\n        })\n    };\n\n    var clearArray = function() {\n        if (_markerArray && _markerArray.length > 0) \n        _map.remove(_markerArray);\n        _markerArray = [];\n    }\n\n    var clear = function() {\n        if (_workMarker) {\n            _map.remove(_workMarker);\n        }\n    }\n\n    return {\n        load: load,\n        add: add,\n        clearArray: clearArray,\n        clear: clear\n    };\n});\n\n```\n这样的话，一个供require调用的模块也就写好了。\n\n\n最后感谢小伙伴[Larry Sean](https://www.zhihu.com/people/piratf) 帮忙重构代码。\n\n全文完。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/javascript_requirejs_rf_code.md","raw":"---\nlayout: post\ntitle: 使用requirejs编写模块化代码\ncategory: javascript\ndate: 2016-10-22 00:00:00\ntags:\n- javascript\n- requirejs\n---\n\n### 写在前面\n最早接触javascript的时候，javascript代码直接扔在script标签里面就完事了。\n\n反正代码不多，交互简单，逻辑不难，和HTML混在一起也未尝不可。\n\n后来交互越来越复杂，代码越多越多了，我们就开始把JS代码独立到了单独的JS文件中。\n\n公共的库引用在前，自己的逻辑代码引用在后，全局变量定义在HTML内部，在独立JS文件中直接使用变量就好。\n\n我们会经常看到下面这种代码：\n\n```\n　　<script src=\"1.js\"></script>\n　　<script src=\"2.js\"></script>\n　　<script src=\"3.js\"></script>\n　　<script src=\"4.js\"></script>\n　　<script src=\"5.js\"></script>\n　　<script src=\"6.js\"></script>\n```\n通过script标签顺序去js管理依赖关系。\n\n阮一峰老师在[Javascript模块化编程（三）：require.js的用法](http://www.ruanyifeng.com/blog/2012/11/require_js.html)\n一文中总结了这样写法的缺点：\n\n首先，加载的时候，浏览器会停止网页渲染，加载文件越多，网页失去响应的时间就会越长；\n\n其次，由于js文件之间存在依赖关系，因此必须严格保证加载顺序（比如上例的1.js要在2.js的前面），依赖性最大的模块一定要放到最后加载.\n\n当依赖关系很复杂的时候，代码的编写和维护都会变得困难。\n\n而requirejs的诞生便是为了解决这个问题。\n\n### [requirejs](http://requirejs.org/docs/download.html)\n\n在[官网](http://requirejs.org/docs/download.html)把requirejs 下载回来之后。使用一般的方法引入：\n```\n<script src=\"js/require.js\"></script>\n```\n但是这样的方法，还是可能在加载require.js的时候导致网页失去响应。解决方案一般有两种：\n\n1. 把上面的代码放到网页底部\n\n2. 使用异步的方法加载，如下：\n\n```\n<script src=\"js/require.js\" defer async=\"true\" ></script>\n```\n[async属性](http://www.w3school.com.cn/html5/att_script_async.asp) 表明这个文件需要异步加载，避免网页失去响应。\n\n不过IE下不支持这个属性，只支持defer，所以可以把defer也写上。\n\n\n\n### 加载主模块\n在上一步，我们已经引入了require了，那么require怎么知道我们究竟要加载什么东西呢？答案是使用data-main属性。\n假设我们的主模块为js/home.js,引入代码应该如下：\n```\n　<script src=\"js/require.js\" data-main=\"js/home\"></script>\n  //require.js默认文件后缀为js，所以home.js可以写成home。\n```\n接下来我使用[58HouseSearch](https://github.com/liguobao/58HouseSearch) 的代码来讲解一下require的使用。\n\n在此项目里面，重构前大概就是JS变量漫天飞，js文件里面各种函数到处乱放。一开始用起来还没什么，后来加入了更多功能的时候，JS代码维护起来就疼不欲生了。因此托了个小伙伴帮忙使用模块化思想重构了一下JS代码。\n\n上面说了，我们首先需要创建我们的模块，在这个项目里面，主模块叫home.js。\n\nhome.js中我们需要配置一下require.config.\n```\nrequire.config({\n    baseUrl: '/DomainJS/',\n    paths: {\n        jquery: \"lib/jquery-1.11.3.min\",\n        \"AMUI\": \"lib/amazeui.2.7.1.min\",\n        \"jquery.range\": \"lib/jquery.range\",\n        \"es5\": \"lib/es5\",\n        \"mapController\": \"mapController\",\n        \"addToolbar\": \"addToolbar\",\n    },\n    shim: {\n        \"addToolbar\": {\n            deps: [\"jquery\"]\n        },\n        \"jquery.range\": {\n            deps: [\"jquery\"]\n        }\n    }\n});\n\n```\n在这里我主要配置了一下baseURL(所有模块的查找根路径)，paths(名称映射)，shim(\n为那些没有使用define()来声明依赖关系、设置模块的\"浏览器全局变量注入\"型脚本做依赖和导出配置。)\n\n关于require.config的详细内容可以看下下面这些文章：\n\n1. [RequireJS进阶:配置文件的学习](https://segmentfault.com/a/1190000002401665) \n2. [RequireJS进阶:模块的优化及配置的详解](https://segmentfault.com/a/1190000002403806)\n\n配置做完了，我们也可以开始真正写我们的逻辑代码了,我们使用require来加载我们需要的库。\n代码如下：\n\n```\nrequire(['domready!', 'jquery', 'AMUI', 'mapController', 'city', 'commuteGo'], \n\nfunction (doc, $, AMUI, mapController, city, commuteGo) {\n    city.initAllCityInfo();\n    mapController.init();\n\n    $(\"input[name='locationType']\").bind('click', \n    mapController.locationMethodOnChange)\n\n    $(\"input[name='vehicle']\").bind('click', commuteGo.go)\n\n    $('#Get58Data').bind('click', function(e) {\n        e.preventDefault();\n     \n        mapController.Get58DataClick();\n        e.stopPropagation();\n    });\n\n \n    $.ajax({\n        type: \"post\",\n        url: \"../Commom/GetPVCount\",\n        data: { },\n        success: function (result)\n        {\n            if (result.IsSuccess){\n                $(\"#lblPVCount\").text(result.PVCount);\n            }else {\n                $(\"#lblPVCount\").text(0);\n                console.log(result.Error);\n            }\n        }\n    });\n\n    $('#search-offcanvas').offCanvas({ effect: 'overlay' });\n\n    $(\".amap-sug-result\").css(\"z-index\", 9999);\n})\n\n```\n\n忽略function里面的具体逻辑，加载如下：\n```\nrequire(['domready!', 'jquery', 'AMUI', 'mapController', 'city', 'commuteGo'], \nfunction (doc, $, AMUI, mapController, city, commuteGo){\n\n//todo\n\n});\n\n```\n\n第一个参数为一个数组，表示所依赖的模块，此处为['domready!', 'jquery', 'AMUI', 'mapController', 'city', 'commuteGo']；\n\n第二个参数为回调函数，当前面指定的模块都全部加载成功之后，便调用此函数。加载的模块会以参数形式传入此函数，从而在回调函数内部就可以使用这些模块啦。\n\nrequire()异步加载所需模块的时候，此时浏览器并不会失去响应；当前面的模块加载成功之后，执行回调函数才会运行我们的逻辑代码，因此解决了依赖性问题。\n\n讲完了模块加载，我们下面讲一下模块编写。\n\n### AMD模块编写\n\nrequire.js加载的模块的采用的AMD规范。所以我们的模块必须按照AMD的规定来写。\n\n关于AMD规范详情可以看这个文章：[Javascript模块化编程（二）：AMD规范](http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html)\n\n模块有两个情况，不依赖其他模块和依赖其他模块。\n\n#### 不依赖其他模块\n直接define定义，使用function回调。\n\n[58HouseSearch/DomainJS/helper.js](https://github.com/liguobao/58HouseSearch/blob/master/58HouseSearch/DomainJS/helper.js)\n```\ndefine(function () {\n\n    //获取URL中的参数\n    var getQueryString=  function (name) {\n        var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\");\n        var r = window.location.search.substr(1).match(reg);\n        if (r != null) return unescape(r[2]); return null;\n    }\n    return {\n        getQueryString: getQueryString,\n    };\n})\n```\n\n#### 依赖其他模块\ndefine中如同require一样，用数组表明需要加载的模块，function回调。\n\n[58HouseSearch/DomainJS/marker.js](https://github.com/liguobao/58HouseSearch/blob/master/58HouseSearch/DomainJS/marker.js)\n```\ndefine(['mapSignleton', 'city', 'transfer'], \nfunction(mapSignleton, city, transfer) {\n    var _map = mapSignleton.map;\n    var _workMarker = null;\n    var _markerArray = [];\n    var load = function(x, y, locationName) {\n        _workMarker = new AMap.Marker({\n            map: _map,\n            title: locationName,\n            icon: 'http://webapi.amap.com/theme/v1.3/markers/n/mark_r.png',\n            position: [x, y]\n        });\n    }\n\n    var add = function(address, rent, href, markBG) {\n        new AMap.Geocoder({\n            city: city.name,\n            radius: 1000\n        }).getLocation(address, function(status, result) {\n\n            if (status === \"complete\" && result.info === 'OK') {\n                var geocode = result.geocodes[0];\n                var rentMarker = new AMap.Marker({\n                    map: _map,\n                    title: address,\n                    icon: markBG ? 'IMG/Little/' +\n                    markBG : 'http://webapi.amap.com/theme/v1.3/markers/n/mark_b.png',\n                    position: [geocode.location.getLng(), geocode.location.getLat()]\n                });\n                _markerArray.push(rentMarker);\n\n                rentMarker.content = \"<div><a target = '_blank' href='\" \n                + href + \"'>房源：\" + address + \"  租金：\" + rent + \"</a><div>\"\n                rentMarker.on('click', function(e) {\n                    transfer.add(e, address);\n                });\n            }\n        })\n    };\n\n    var clearArray = function() {\n        if (_markerArray && _markerArray.length > 0) \n        _map.remove(_markerArray);\n        _markerArray = [];\n    }\n\n    var clear = function() {\n        if (_workMarker) {\n            _map.remove(_workMarker);\n        }\n    }\n\n    return {\n        load: load,\n        add: add,\n        clearArray: clearArray,\n        clear: clear\n    };\n});\n\n```\n这样的话，一个供require调用的模块也就写好了。\n\n\n最后感谢小伙伴[Larry Sean](https://www.zhihu.com/people/piratf) 帮忙重构代码。\n\n全文完。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"javascript_requirejs_rf_code","published":1,"updated":"2016-10-22T14:27:09.575Z","comments":1,"photos":[],"link":"","_id":"cj0dyumx3001h6kunoksb224x","content":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>最早接触javascript的时候，javascript代码直接扔在script标签里面就完事了。</p>\n<p>反正代码不多，交互简单，逻辑不难，和HTML混在一起也未尝不可。</p>\n<p>后来交互越来越复杂，代码越多越多了，我们就开始把JS代码独立到了单独的JS文件中。</p>\n<p>公共的库引用在前，自己的逻辑代码引用在后，全局变量定义在HTML内部，在独立JS文件中直接使用变量就好。</p>\n<p>我们会经常看到下面这种代码：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"1.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"2.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"3.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"4.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"5.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"6.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>通过script标签顺序去js管理依赖关系。</p>\n<p>阮一峰老师在<a href=\"http://www.ruanyifeng.com/blog/2012/11/require_js.html\" target=\"_blank\" rel=\"external\">Javascript模块化编程（三）：require.js的用法</a><br>一文中总结了这样写法的缺点：</p>\n<p>首先，加载的时候，浏览器会停止网页渲染，加载文件越多，网页失去响应的时间就会越长；</p>\n<p>其次，由于js文件之间存在依赖关系，因此必须严格保证加载顺序（比如上例的1.js要在2.js的前面），依赖性最大的模块一定要放到最后加载.</p>\n<p>当依赖关系很复杂的时候，代码的编写和维护都会变得困难。</p>\n<p>而requirejs的诞生便是为了解决这个问题。</p>\n<h3 id=\"requirejs\"><a href=\"#requirejs\" class=\"headerlink\" title=\"requirejs\"></a><a href=\"http://requirejs.org/docs/download.html\" target=\"_blank\" rel=\"external\">requirejs</a></h3><p>在<a href=\"http://requirejs.org/docs/download.html\" target=\"_blank\" rel=\"external\">官网</a>把requirejs 下载回来之后。使用一般的方法引入：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/require.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>但是这样的方法，还是可能在加载require.js的时候导致网页失去响应。解决方案一般有两种：</p>\n<ol>\n<li><p>把上面的代码放到网页底部</p>\n</li>\n<li><p>使用异步的方法加载，如下：</p>\n</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/require.js\"</span> <span class=\"attr\">defer</span> <span class=\"attr\">async</span>=<span class=\"string\">\"true\"</span> &gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><a href=\"http://www.w3school.com.cn/html5/att_script_async.asp\" target=\"_blank\" rel=\"external\">async属性</a> 表明这个文件需要异步加载，避免网页失去响应。</p>\n<p>不过IE下不支持这个属性，只支持defer，所以可以把defer也写上。</p>\n<h3 id=\"加载主模块\"><a href=\"#加载主模块\" class=\"headerlink\" title=\"加载主模块\"></a>加载主模块</h3><p>在上一步，我们已经引入了require了，那么require怎么知道我们究竟要加载什么东西呢？答案是使用data-main属性。<br>假设我们的主模块为js/home.js,引入代码应该如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/require.js\"</span> <span class=\"attr\">data-main</span>=<span class=\"string\">\"js/home\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">//require.js默认文件后缀为js，所以home.js可以写成home。</div></pre></td></tr></table></figure></p>\n<p>接下来我使用<a href=\"https://github.com/liguobao/58HouseSearch\" target=\"_blank\" rel=\"external\">58HouseSearch</a> 的代码来讲解一下require的使用。</p>\n<p>在此项目里面，重构前大概就是JS变量漫天飞，js文件里面各种函数到处乱放。一开始用起来还没什么，后来加入了更多功能的时候，JS代码维护起来就疼不欲生了。因此托了个小伙伴帮忙使用模块化思想重构了一下JS代码。</p>\n<p>上面说了，我们首先需要创建我们的模块，在这个项目里面，主模块叫home.js。</p>\n<p>home.js中我们需要配置一下require.config.<br><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">require.config(&#123;</div><div class=\"line\">    baseUrl: <span class=\"string\">'/DomainJS/'</span>,</div><div class=\"line\">    paths: &#123;</div><div class=\"line\">        jquery: <span class=\"string\">\"lib/jquery-1.11.3.min\"</span>,</div><div class=\"line\">        <span class=\"string\">\"AMUI\"</span>: <span class=\"string\">\"lib/amazeui.2.7.1.min\"</span>,</div><div class=\"line\">        <span class=\"string\">\"jquery.range\"</span>: <span class=\"string\">\"lib/jquery.range\"</span>,</div><div class=\"line\">        <span class=\"string\">\"es5\"</span>: <span class=\"string\">\"lib/es5\"</span>,</div><div class=\"line\">        <span class=\"string\">\"mapController\"</span>: <span class=\"string\">\"mapController\"</span>,</div><div class=\"line\">        <span class=\"string\">\"addToolbar\"</span>: <span class=\"string\">\"addToolbar\"</span>,</div><div class=\"line\">    &#125;,</div><div class=\"line\">    shim: &#123;</div><div class=\"line\">        <span class=\"string\">\"addToolbar\"</span>: &#123;</div><div class=\"line\">            deps: [<span class=\"string\">\"jquery\"</span>]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">\"jquery.range\"</span>: &#123;</div><div class=\"line\">            deps: [<span class=\"string\">\"jquery\"</span>]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>在这里我主要配置了一下baseURL(所有模块的查找根路径)，paths(名称映射)，shim(<br>为那些没有使用define()来声明依赖关系、设置模块的”浏览器全局变量注入”型脚本做依赖和导出配置。)</p>\n<p>关于require.config的详细内容可以看下下面这些文章：</p>\n<ol>\n<li><a href=\"https://segmentfault.com/a/1190000002401665\" target=\"_blank\" rel=\"external\">RequireJS进阶:配置文件的学习</a> </li>\n<li><a href=\"https://segmentfault.com/a/1190000002403806\" target=\"_blank\" rel=\"external\">RequireJS进阶:模块的优化及配置的详解</a></li>\n</ol>\n<p>配置做完了，我们也可以开始真正写我们的逻辑代码了,我们使用require来加载我们需要的库。<br>代码如下：</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">require(['domready!', 'jquery', 'AMUI', 'mapController', 'city', 'commuteGo'], </div><div class=\"line\"></div><div class=\"line\">function (<span class=\"name\">doc</span>, $, AMUI, mapController, city, commuteGo) &#123;</div><div class=\"line\">    city.initAllCityInfo()<span class=\"comment\">;</span></div><div class=\"line\">    mapController.init()<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">    $(<span class=\"string\">\"input[name='locationType']\"</span>).bind('click', </div><div class=\"line\">    mapController.locationMethodOnChange)</div><div class=\"line\"></div><div class=\"line\">    $(<span class=\"string\">\"input[name='vehicle']\"</span>).bind('click', commuteGo.go)</div><div class=\"line\"></div><div class=\"line\">    $('#Get58Data').bind('click', function(<span class=\"name\">e</span>) &#123;</div><div class=\"line\">        e.preventDefault()<span class=\"comment\">;</span></div><div class=\"line\">     </div><div class=\"line\">        mapController.Get58DataClick()<span class=\"comment\">;</span></div><div class=\"line\">        e.stopPropagation()<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\">    $.ajax(&#123;</div><div class=\"line\">        type: <span class=\"string\">\"post\"</span>,</div><div class=\"line\">        url: <span class=\"string\">\"../Commom/GetPVCount\"</span>,</div><div class=\"line\">        data: &#123; &#125;,</div><div class=\"line\">        success: function (<span class=\"name\">result</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            if (<span class=\"name\">result</span>.IsSuccess)&#123;</div><div class=\"line\">                $(<span class=\"string\">\"#lblPVCount\"</span>).text(<span class=\"name\">result</span>.PVCount)<span class=\"comment\">;</span></div><div class=\"line\">            &#125;else &#123;</div><div class=\"line\">                $(<span class=\"string\">\"#lblPVCount\"</span>).text(<span class=\"number\">0</span>)<span class=\"comment\">;</span></div><div class=\"line\">                console.log(<span class=\"name\">result</span>.Error)<span class=\"comment\">;</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">    $('#search-offcanvas').offCanvas(&#123; effect: 'overlay' &#125;)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">    $(<span class=\"string\">\".amap-sug-result\"</span>).css(<span class=\"string\">\"z-index\"</span>, <span class=\"number\">9999</span>)<span class=\"comment\">;</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>忽略function里面的具体逻辑，加载如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'domready!'</span>, <span class=\"string\">'jquery'</span>, <span class=\"string\">'AMUI'</span>, <span class=\"string\">'mapController'</span>, <span class=\"string\">'city'</span>, <span class=\"string\">'commuteGo'</span>], </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">doc, $, AMUI, mapController, city, commuteGo</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//todo</span></div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>第一个参数为一个数组，表示所依赖的模块，此处为[‘domready!’, ‘jquery’, ‘AMUI’, ‘mapController’, ‘city’, ‘commuteGo’]；</p>\n<p>第二个参数为回调函数，当前面指定的模块都全部加载成功之后，便调用此函数。加载的模块会以参数形式传入此函数，从而在回调函数内部就可以使用这些模块啦。</p>\n<p>require()异步加载所需模块的时候，此时浏览器并不会失去响应；当前面的模块加载成功之后，执行回调函数才会运行我们的逻辑代码，因此解决了依赖性问题。</p>\n<p>讲完了模块加载，我们下面讲一下模块编写。</p>\n<h3 id=\"AMD模块编写\"><a href=\"#AMD模块编写\" class=\"headerlink\" title=\"AMD模块编写\"></a>AMD模块编写</h3><p>require.js加载的模块的采用的AMD规范。所以我们的模块必须按照AMD的规定来写。</p>\n<p>关于AMD规范详情可以看这个文章：<a href=\"http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html\" target=\"_blank\" rel=\"external\">Javascript模块化编程（二）：AMD规范</a></p>\n<p>模块有两个情况，不依赖其他模块和依赖其他模块。</p>\n<h4 id=\"不依赖其他模块\"><a href=\"#不依赖其他模块\" class=\"headerlink\" title=\"不依赖其他模块\"></a>不依赖其他模块</h4><p>直接define定义，使用function回调。</p>\n<p><a href=\"https://github.com/liguobao/58HouseSearch/blob/master/58HouseSearch/DomainJS/helper.js\" target=\"_blank\" rel=\"external\">58HouseSearch/DomainJS/helper.js</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//获取URL中的参数</span></div><div class=\"line\">    <span class=\"keyword\">var</span> getQueryString=  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(^|&amp;)\"</span> + name + <span class=\"string\">\"=([^&amp;]*)(&amp;|$)\"</span>);</div><div class=\"line\">        <span class=\"keyword\">var</span> r = <span class=\"built_in\">window</span>.location.search.substr(<span class=\"number\">1</span>).match(reg);</div><div class=\"line\">        <span class=\"keyword\">if</span> (r != <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">unescape</span>(r[<span class=\"number\">2</span>]); <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        getQueryString: getQueryString,</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h4 id=\"依赖其他模块\"><a href=\"#依赖其他模块\" class=\"headerlink\" title=\"依赖其他模块\"></a>依赖其他模块</h4><p>define中如同require一样，用数组表明需要加载的模块，function回调。</p>\n<p><a href=\"https://github.com/liguobao/58HouseSearch/blob/master/58HouseSearch/DomainJS/marker.js\" target=\"_blank\" rel=\"external\">58HouseSearch/DomainJS/marker.js</a><br><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(['mapSignleton', 'city', 'transfer'], </div><div class=\"line\">function(<span class=\"name\">mapSignleton</span>, city, transfer) &#123;</div><div class=\"line\">    var _map = mapSignleton.map<span class=\"comment\">;</span></div><div class=\"line\">    var _workMarker = null<span class=\"comment\">;</span></div><div class=\"line\">    var _markerArray = []<span class=\"comment\">;</span></div><div class=\"line\">    var load = function(<span class=\"name\">x</span>, y, locationName) &#123;</div><div class=\"line\">        _workMarker = new AMap.Marker(&#123;</div><div class=\"line\">            map: _map,</div><div class=\"line\">            title: locationName,</div><div class=\"line\">            icon: 'http<span class=\"symbol\">://webapi</span>.amap.com/theme/v1.<span class=\"number\">3</span>/markers/n/mark_r.png',</div><div class=\"line\">            position: [x, y]</div><div class=\"line\">        &#125;)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var add = function(<span class=\"name\">address</span>, rent, href, markBG) &#123;</div><div class=\"line\">        new AMap.Geocoder(&#123;</div><div class=\"line\">            city: city.name,</div><div class=\"line\">            radius: <span class=\"number\">1000</span></div><div class=\"line\">        &#125;).getLocation(<span class=\"name\">address</span>, function(<span class=\"name\">status</span>, result) &#123;</div><div class=\"line\"></div><div class=\"line\">            if (<span class=\"name\">status</span> === <span class=\"string\">\"complete\"</span> <span class=\"symbol\">&amp;&amp;</span> result.info === 'OK') &#123;</div><div class=\"line\">                var geocode = result.geocodes[<span class=\"number\">0</span>]<span class=\"comment\">;</span></div><div class=\"line\">                var rentMarker = new AMap.Marker(&#123;</div><div class=\"line\">                    map: _map,</div><div class=\"line\">                    title: address,</div><div class=\"line\">                    icon: markBG ? 'IMG/Little/' +</div><div class=\"line\">                    markBG : 'http<span class=\"symbol\">://webapi</span>.amap.com/theme/v1.<span class=\"number\">3</span>/markers/n/mark_b.png',</div><div class=\"line\">                    position: [geocode.location.getLng(), geocode.location.getLat()]</div><div class=\"line\">                &#125;)<span class=\"comment\">;</span></div><div class=\"line\">                _markerArray.push(<span class=\"name\">rentMarker</span>)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">                rentMarker.content = <span class=\"string\">\"&lt;div&gt;&lt;a target = '_blank' href='\"</span> </div><div class=\"line\">                + href + <span class=\"string\">\"'&gt;房源：\"</span> + address + <span class=\"string\">\"  租金：\"</span> + rent + <span class=\"string\">\"&lt;/a&gt;&lt;div&gt;\"</span></div><div class=\"line\">                rentMarker.on('click', function(<span class=\"name\">e</span>) &#123;</div><div class=\"line\">                    transfer.add(<span class=\"name\">e</span>, address)<span class=\"comment\">;</span></div><div class=\"line\">                &#125;)<span class=\"comment\">;</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">    var clearArray = function() &#123;</div><div class=\"line\">        if (<span class=\"name\">_markerArray</span> <span class=\"symbol\">&amp;&amp;</span> _markerArray.length &gt; <span class=\"number\">0</span>) </div><div class=\"line\">        _map.remove(<span class=\"name\">_markerArray</span>)<span class=\"comment\">;</span></div><div class=\"line\">        _markerArray = []<span class=\"comment\">;</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var clear = function() &#123;</div><div class=\"line\">        if (<span class=\"name\">_workMarker</span>) &#123;</div><div class=\"line\">            _map.remove(<span class=\"name\">_workMarker</span>)<span class=\"comment\">;</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return &#123;</div><div class=\"line\">        load: load,</div><div class=\"line\">        add: add,</div><div class=\"line\">        clearArray: clearArray,</div><div class=\"line\">        clear: clear</div><div class=\"line\">    &#125;<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p>这样的话，一个供require调用的模块也就写好了。</p>\n<p>最后感谢小伙伴<a href=\"https://www.zhihu.com/people/piratf\" target=\"_blank\" rel=\"external\">Larry Sean</a> 帮忙重构代码。</p>\n<p>全文完。</p>\n","excerpt":"","more":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>最早接触javascript的时候，javascript代码直接扔在script标签里面就完事了。</p>\n<p>反正代码不多，交互简单，逻辑不难，和HTML混在一起也未尝不可。</p>\n<p>后来交互越来越复杂，代码越多越多了，我们就开始把JS代码独立到了单独的JS文件中。</p>\n<p>公共的库引用在前，自己的逻辑代码引用在后，全局变量定义在HTML内部，在独立JS文件中直接使用变量就好。</p>\n<p>我们会经常看到下面这种代码：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"1.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"2.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"3.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"4.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"5.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"6.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>通过script标签顺序去js管理依赖关系。</p>\n<p>阮一峰老师在<a href=\"http://www.ruanyifeng.com/blog/2012/11/require_js.html\">Javascript模块化编程（三）：require.js的用法</a><br>一文中总结了这样写法的缺点：</p>\n<p>首先，加载的时候，浏览器会停止网页渲染，加载文件越多，网页失去响应的时间就会越长；</p>\n<p>其次，由于js文件之间存在依赖关系，因此必须严格保证加载顺序（比如上例的1.js要在2.js的前面），依赖性最大的模块一定要放到最后加载.</p>\n<p>当依赖关系很复杂的时候，代码的编写和维护都会变得困难。</p>\n<p>而requirejs的诞生便是为了解决这个问题。</p>\n<h3 id=\"requirejs\"><a href=\"#requirejs\" class=\"headerlink\" title=\"requirejs\"></a><a href=\"http://requirejs.org/docs/download.html\">requirejs</a></h3><p>在<a href=\"http://requirejs.org/docs/download.html\">官网</a>把requirejs 下载回来之后。使用一般的方法引入：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/require.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>但是这样的方法，还是可能在加载require.js的时候导致网页失去响应。解决方案一般有两种：</p>\n<ol>\n<li><p>把上面的代码放到网页底部</p>\n</li>\n<li><p>使用异步的方法加载，如下：</p>\n</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/require.js\"</span> <span class=\"attr\">defer</span> <span class=\"attr\">async</span>=<span class=\"string\">\"true\"</span> &gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><a href=\"http://www.w3school.com.cn/html5/att_script_async.asp\">async属性</a> 表明这个文件需要异步加载，避免网页失去响应。</p>\n<p>不过IE下不支持这个属性，只支持defer，所以可以把defer也写上。</p>\n<h3 id=\"加载主模块\"><a href=\"#加载主模块\" class=\"headerlink\" title=\"加载主模块\"></a>加载主模块</h3><p>在上一步，我们已经引入了require了，那么require怎么知道我们究竟要加载什么东西呢？答案是使用data-main属性。<br>假设我们的主模块为js/home.js,引入代码应该如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/require.js\"</span> <span class=\"attr\">data-main</span>=<span class=\"string\">\"js/home\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">//require.js默认文件后缀为js，所以home.js可以写成home。</div></pre></td></tr></table></figure></p>\n<p>接下来我使用<a href=\"https://github.com/liguobao/58HouseSearch\">58HouseSearch</a> 的代码来讲解一下require的使用。</p>\n<p>在此项目里面，重构前大概就是JS变量漫天飞，js文件里面各种函数到处乱放。一开始用起来还没什么，后来加入了更多功能的时候，JS代码维护起来就疼不欲生了。因此托了个小伙伴帮忙使用模块化思想重构了一下JS代码。</p>\n<p>上面说了，我们首先需要创建我们的模块，在这个项目里面，主模块叫home.js。</p>\n<p>home.js中我们需要配置一下require.config.<br><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">require.config(&#123;</div><div class=\"line\">    baseUrl: <span class=\"string\">'/DomainJS/'</span>,</div><div class=\"line\">    paths: &#123;</div><div class=\"line\">        jquery: <span class=\"string\">\"lib/jquery-1.11.3.min\"</span>,</div><div class=\"line\">        <span class=\"string\">\"AMUI\"</span>: <span class=\"string\">\"lib/amazeui.2.7.1.min\"</span>,</div><div class=\"line\">        <span class=\"string\">\"jquery.range\"</span>: <span class=\"string\">\"lib/jquery.range\"</span>,</div><div class=\"line\">        <span class=\"string\">\"es5\"</span>: <span class=\"string\">\"lib/es5\"</span>,</div><div class=\"line\">        <span class=\"string\">\"mapController\"</span>: <span class=\"string\">\"mapController\"</span>,</div><div class=\"line\">        <span class=\"string\">\"addToolbar\"</span>: <span class=\"string\">\"addToolbar\"</span>,</div><div class=\"line\">    &#125;,</div><div class=\"line\">    shim: &#123;</div><div class=\"line\">        <span class=\"string\">\"addToolbar\"</span>: &#123;</div><div class=\"line\">            deps: [<span class=\"string\">\"jquery\"</span>]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">\"jquery.range\"</span>: &#123;</div><div class=\"line\">            deps: [<span class=\"string\">\"jquery\"</span>]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>在这里我主要配置了一下baseURL(所有模块的查找根路径)，paths(名称映射)，shim(<br>为那些没有使用define()来声明依赖关系、设置模块的”浏览器全局变量注入”型脚本做依赖和导出配置。)</p>\n<p>关于require.config的详细内容可以看下下面这些文章：</p>\n<ol>\n<li><a href=\"https://segmentfault.com/a/1190000002401665\">RequireJS进阶:配置文件的学习</a> </li>\n<li><a href=\"https://segmentfault.com/a/1190000002403806\">RequireJS进阶:模块的优化及配置的详解</a></li>\n</ol>\n<p>配置做完了，我们也可以开始真正写我们的逻辑代码了,我们使用require来加载我们需要的库。<br>代码如下：</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">require(['domready!', 'jquery', 'AMUI', 'mapController', 'city', 'commuteGo'], </div><div class=\"line\"></div><div class=\"line\">function (<span class=\"name\">doc</span>, $, AMUI, mapController, city, commuteGo) &#123;</div><div class=\"line\">    city.initAllCityInfo()<span class=\"comment\">;</span></div><div class=\"line\">    mapController.init()<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">    $(<span class=\"string\">\"input[name='locationType']\"</span>).bind('click', </div><div class=\"line\">    mapController.locationMethodOnChange)</div><div class=\"line\"></div><div class=\"line\">    $(<span class=\"string\">\"input[name='vehicle']\"</span>).bind('click', commuteGo.go)</div><div class=\"line\"></div><div class=\"line\">    $('#Get58Data').bind('click', function(<span class=\"name\">e</span>) &#123;</div><div class=\"line\">        e.preventDefault()<span class=\"comment\">;</span></div><div class=\"line\">     </div><div class=\"line\">        mapController.Get58DataClick()<span class=\"comment\">;</span></div><div class=\"line\">        e.stopPropagation()<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\">    $.ajax(&#123;</div><div class=\"line\">        type: <span class=\"string\">\"post\"</span>,</div><div class=\"line\">        url: <span class=\"string\">\"../Commom/GetPVCount\"</span>,</div><div class=\"line\">        data: &#123; &#125;,</div><div class=\"line\">        success: function (<span class=\"name\">result</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            if (<span class=\"name\">result</span>.IsSuccess)&#123;</div><div class=\"line\">                $(<span class=\"string\">\"#lblPVCount\"</span>).text(<span class=\"name\">result</span>.PVCount)<span class=\"comment\">;</span></div><div class=\"line\">            &#125;else &#123;</div><div class=\"line\">                $(<span class=\"string\">\"#lblPVCount\"</span>).text(<span class=\"number\">0</span>)<span class=\"comment\">;</span></div><div class=\"line\">                console.log(<span class=\"name\">result</span>.Error)<span class=\"comment\">;</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">    $('#search-offcanvas').offCanvas(&#123; effect: 'overlay' &#125;)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">    $(<span class=\"string\">\".amap-sug-result\"</span>).css(<span class=\"string\">\"z-index\"</span>, <span class=\"number\">9999</span>)<span class=\"comment\">;</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>忽略function里面的具体逻辑，加载如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'domready!'</span>, <span class=\"string\">'jquery'</span>, <span class=\"string\">'AMUI'</span>, <span class=\"string\">'mapController'</span>, <span class=\"string\">'city'</span>, <span class=\"string\">'commuteGo'</span>], </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">doc, $, AMUI, mapController, city, commuteGo</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//todo</span></div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>第一个参数为一个数组，表示所依赖的模块，此处为[‘domready!’, ‘jquery’, ‘AMUI’, ‘mapController’, ‘city’, ‘commuteGo’]；</p>\n<p>第二个参数为回调函数，当前面指定的模块都全部加载成功之后，便调用此函数。加载的模块会以参数形式传入此函数，从而在回调函数内部就可以使用这些模块啦。</p>\n<p>require()异步加载所需模块的时候，此时浏览器并不会失去响应；当前面的模块加载成功之后，执行回调函数才会运行我们的逻辑代码，因此解决了依赖性问题。</p>\n<p>讲完了模块加载，我们下面讲一下模块编写。</p>\n<h3 id=\"AMD模块编写\"><a href=\"#AMD模块编写\" class=\"headerlink\" title=\"AMD模块编写\"></a>AMD模块编写</h3><p>require.js加载的模块的采用的AMD规范。所以我们的模块必须按照AMD的规定来写。</p>\n<p>关于AMD规范详情可以看这个文章：<a href=\"http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html\">Javascript模块化编程（二）：AMD规范</a></p>\n<p>模块有两个情况，不依赖其他模块和依赖其他模块。</p>\n<h4 id=\"不依赖其他模块\"><a href=\"#不依赖其他模块\" class=\"headerlink\" title=\"不依赖其他模块\"></a>不依赖其他模块</h4><p>直接define定义，使用function回调。</p>\n<p><a href=\"https://github.com/liguobao/58HouseSearch/blob/master/58HouseSearch/DomainJS/helper.js\">58HouseSearch/DomainJS/helper.js</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//获取URL中的参数</span></div><div class=\"line\">    <span class=\"keyword\">var</span> getQueryString=  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(^|&amp;)\"</span> + name + <span class=\"string\">\"=([^&amp;]*)(&amp;|$)\"</span>);</div><div class=\"line\">        <span class=\"keyword\">var</span> r = <span class=\"built_in\">window</span>.location.search.substr(<span class=\"number\">1</span>).match(reg);</div><div class=\"line\">        <span class=\"keyword\">if</span> (r != <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">unescape</span>(r[<span class=\"number\">2</span>]); <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        getQueryString: getQueryString,</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h4 id=\"依赖其他模块\"><a href=\"#依赖其他模块\" class=\"headerlink\" title=\"依赖其他模块\"></a>依赖其他模块</h4><p>define中如同require一样，用数组表明需要加载的模块，function回调。</p>\n<p><a href=\"https://github.com/liguobao/58HouseSearch/blob/master/58HouseSearch/DomainJS/marker.js\">58HouseSearch/DomainJS/marker.js</a><br><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(['mapSignleton', 'city', 'transfer'], </div><div class=\"line\">function(<span class=\"name\">mapSignleton</span>, city, transfer) &#123;</div><div class=\"line\">    var _map = mapSignleton.map<span class=\"comment\">;</span></div><div class=\"line\">    var _workMarker = null<span class=\"comment\">;</span></div><div class=\"line\">    var _markerArray = []<span class=\"comment\">;</span></div><div class=\"line\">    var load = function(<span class=\"name\">x</span>, y, locationName) &#123;</div><div class=\"line\">        _workMarker = new AMap.Marker(&#123;</div><div class=\"line\">            map: _map,</div><div class=\"line\">            title: locationName,</div><div class=\"line\">            icon: 'http<span class=\"symbol\">://webapi</span>.amap.com/theme/v1.<span class=\"number\">3</span>/markers/n/mark_r.png',</div><div class=\"line\">            position: [x, y]</div><div class=\"line\">        &#125;)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var add = function(<span class=\"name\">address</span>, rent, href, markBG) &#123;</div><div class=\"line\">        new AMap.Geocoder(&#123;</div><div class=\"line\">            city: city.name,</div><div class=\"line\">            radius: <span class=\"number\">1000</span></div><div class=\"line\">        &#125;).getLocation(<span class=\"name\">address</span>, function(<span class=\"name\">status</span>, result) &#123;</div><div class=\"line\"></div><div class=\"line\">            if (<span class=\"name\">status</span> === <span class=\"string\">\"complete\"</span> <span class=\"symbol\">&amp;&amp;</span> result.info === 'OK') &#123;</div><div class=\"line\">                var geocode = result.geocodes[<span class=\"number\">0</span>]<span class=\"comment\">;</span></div><div class=\"line\">                var rentMarker = new AMap.Marker(&#123;</div><div class=\"line\">                    map: _map,</div><div class=\"line\">                    title: address,</div><div class=\"line\">                    icon: markBG ? 'IMG/Little/' +</div><div class=\"line\">                    markBG : 'http<span class=\"symbol\">://webapi</span>.amap.com/theme/v1.<span class=\"number\">3</span>/markers/n/mark_b.png',</div><div class=\"line\">                    position: [geocode.location.getLng(), geocode.location.getLat()]</div><div class=\"line\">                &#125;)<span class=\"comment\">;</span></div><div class=\"line\">                _markerArray.push(<span class=\"name\">rentMarker</span>)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">                rentMarker.content = <span class=\"string\">\"&lt;div&gt;&lt;a target = '_blank' href='\"</span> </div><div class=\"line\">                + href + <span class=\"string\">\"'&gt;房源：\"</span> + address + <span class=\"string\">\"  租金：\"</span> + rent + <span class=\"string\">\"&lt;/a&gt;&lt;div&gt;\"</span></div><div class=\"line\">                rentMarker.on('click', function(<span class=\"name\">e</span>) &#123;</div><div class=\"line\">                    transfer.add(<span class=\"name\">e</span>, address)<span class=\"comment\">;</span></div><div class=\"line\">                &#125;)<span class=\"comment\">;</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">    var clearArray = function() &#123;</div><div class=\"line\">        if (<span class=\"name\">_markerArray</span> <span class=\"symbol\">&amp;&amp;</span> _markerArray.length &gt; <span class=\"number\">0</span>) </div><div class=\"line\">        _map.remove(<span class=\"name\">_markerArray</span>)<span class=\"comment\">;</span></div><div class=\"line\">        _markerArray = []<span class=\"comment\">;</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var clear = function() &#123;</div><div class=\"line\">        if (<span class=\"name\">_workMarker</span>) &#123;</div><div class=\"line\">            _map.remove(<span class=\"name\">_workMarker</span>)<span class=\"comment\">;</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return &#123;</div><div class=\"line\">        load: load,</div><div class=\"line\">        add: add,</div><div class=\"line\">        clearArray: clearArray,</div><div class=\"line\">        clear: clear</div><div class=\"line\">    &#125;<span class=\"comment\">;</span></div><div class=\"line\">&#125;)<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p>这样的话，一个供require调用的模块也就写好了。</p>\n<p>最后感谢小伙伴<a href=\"https://www.zhihu.com/people/piratf\">Larry Sean</a> 帮忙重构代码。</p>\n<p>全文完。</p>\n"},{"layout":"post","title":"小米触摸板手势说明","date":"2015-12-31T16:00:00.000Z","_content":"\n\n亲爱的米粉，如下为小米笔记本触控板功能介绍： \n\n小米笔记本的触摸板设计简洁大方，将传统笔记本中的左右按键和触摸版合二为一，在占用更少空间的基础上，可以实现左右键功能，同时加入了更多的手势操作，大大提高了触控板的使用效率，在触摸面板可以通过点击/轻触来实现鼠标左键和右键，单击和双击的功能。\n\n1. 左键：单指单击/单指轻触 \n2. 右键：双指单击/双指轻触 \n3. 选取并打开：单指双击/单指轻触两次 \n4. 页面滚动：双指向上/下/左右（浏览器，文档等常用） \n5. 拖拽项目:双击/轻触两次并拖拽 \n6. 双指捏合/张开：将页面缩小和放大 \n7. 三指左右滑动：切换打开的程序 \n8. 三指上滑：打开虚拟桌面\n9. 三指下滑：将当前页面程序最小化 \n\n","source":"_posts/mibook_touchpap_gesture.md","raw":"\n---\nlayout: post\ntitle: 小米触摸板手势说明\ncategory: memorandum\ndate: 2016-01-01 00:00:00\ntags:\n- memorandum\n---\n\n\n亲爱的米粉，如下为小米笔记本触控板功能介绍： \n\n小米笔记本的触摸板设计简洁大方，将传统笔记本中的左右按键和触摸版合二为一，在占用更少空间的基础上，可以实现左右键功能，同时加入了更多的手势操作，大大提高了触控板的使用效率，在触摸面板可以通过点击/轻触来实现鼠标左键和右键，单击和双击的功能。\n\n1. 左键：单指单击/单指轻触 \n2. 右键：双指单击/双指轻触 \n3. 选取并打开：单指双击/单指轻触两次 \n4. 页面滚动：双指向上/下/左右（浏览器，文档等常用） \n5. 拖拽项目:双击/轻触两次并拖拽 \n6. 双指捏合/张开：将页面缩小和放大 \n7. 三指左右滑动：切换打开的程序 \n8. 三指上滑：打开虚拟桌面\n9. 三指下滑：将当前页面程序最小化 \n\n","slug":"mibook_touchpap_gesture","published":1,"updated":"2016-10-16T13:30:35.031Z","comments":1,"photos":[],"link":"","_id":"cj0dyumx6001k6kun40eiq0o1","content":"<p>亲爱的米粉，如下为小米笔记本触控板功能介绍： </p>\n<p>小米笔记本的触摸板设计简洁大方，将传统笔记本中的左右按键和触摸版合二为一，在占用更少空间的基础上，可以实现左右键功能，同时加入了更多的手势操作，大大提高了触控板的使用效率，在触摸面板可以通过点击/轻触来实现鼠标左键和右键，单击和双击的功能。</p>\n<ol>\n<li>左键：单指单击/单指轻触 </li>\n<li>右键：双指单击/双指轻触 </li>\n<li>选取并打开：单指双击/单指轻触两次 </li>\n<li>页面滚动：双指向上/下/左右（浏览器，文档等常用） </li>\n<li>拖拽项目:双击/轻触两次并拖拽 </li>\n<li>双指捏合/张开：将页面缩小和放大 </li>\n<li>三指左右滑动：切换打开的程序 </li>\n<li>三指上滑：打开虚拟桌面</li>\n<li>三指下滑：将当前页面程序最小化 </li>\n</ol>\n","excerpt":"","more":"<p>亲爱的米粉，如下为小米笔记本触控板功能介绍： </p>\n<p>小米笔记本的触摸板设计简洁大方，将传统笔记本中的左右按键和触摸版合二为一，在占用更少空间的基础上，可以实现左右键功能，同时加入了更多的手势操作，大大提高了触控板的使用效率，在触摸面板可以通过点击/轻触来实现鼠标左键和右键，单击和双击的功能。</p>\n<ol>\n<li>左键：单指单击/单指轻触 </li>\n<li>右键：双指单击/双指轻触 </li>\n<li>选取并打开：单指双击/单指轻触两次 </li>\n<li>页面滚动：双指向上/下/左右（浏览器，文档等常用） </li>\n<li>拖拽项目:双击/轻触两次并拖拽 </li>\n<li>双指捏合/张开：将页面缩小和放大 </li>\n<li>三指左右滑动：切换打开的程序 </li>\n<li>三指上滑：打开虚拟桌面</li>\n<li>三指下滑：将当前页面程序最小化 </li>\n</ol>\n"},{"layout":"post","title":"mono webreques https exception","date":"2016-04-10T04:39:04.000Z","_content":"\n前几天在做一个使用URL通过WebRequest请求HTML页面的功能的时候遇到了点坑，程序在开发环境没有任何的问题，部署到linux mono上之后就跪了。代码如下：\n\n```csharp\npublic static string GetHTML(string url)\n{\n    string htmlCode;\n    try\n    {\n        HttpWebRequest webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(url);\n        webRequest.Timeout = 30000;\n        webRequest.Method = \"GET\";\n        webRequest.UserAgent = \"Mozilla/4.0\";\n        webRequest.Headers.Add(\"Accept-Encoding\", \"gzip, deflate\");\n\n        HttpWebResponse webResponse = (System.Net.HttpWebResponse)webRequest.GetResponse();\n        //获取目标网站的编码格式\n        string contentype = webResponse.Headers[\"Content-Type\"];\n        Regex regex = new Regex(\"charset\\\\s*=\\\\s*[\\\\W]?\\\\s*([\\\\w-]+)\", RegexOptions.IgnoreCase);\n        if (webResponse.ContentEncoding.ToLower() == \"gzip\")//如果使用了GZip则先解压\n        {\n            using (System.IO.Stream streamReceive = webResponse.GetResponseStream())\n            {\n                using (var zipStream = new System.IO.Compression.GZipStream(streamReceive, \n                System.IO.Compression.CompressionMode.Decompress))\n                {\n                    //匹配编码格式\n                    if (regex.IsMatch(contentype))\n                    {\n                        Encoding ending = Encoding.GetEncoding(regex.Match(contentype).Groups[1].Value.Trim());\n                        using (StreamReader sr = new System.IO.StreamReader(zipStream, ending))\n                        {\n                            htmlCode = sr.ReadToEnd();\n                        }\n                    }\n                    else\n                    {\n                        using (StreamReader sr = \n                        new System.IO.StreamReader(zipStream, Encoding.UTF8))\n                        {\n                            htmlCode = sr.ReadToEnd();\n                        }\n                    }\n                }\n            }\n        }\n        else\n        {\n            using (System.IO.Stream streamReceive = webResponse.GetResponseStream())\n            {\n                using (System.IO.StreamReader sr = new System.IO.StreamReader(streamReceive, Encoding.Default))\n                {\n                    htmlCode = sr.ReadToEnd();\n                }\n            }\n        }\n        return htmlCode;\n\n    }catch(Exception ex)\n    {\n        LogHelper.WriteException(\"GetHTML\", ex, new { Url = url });\n        return \"\";\n    }\n\n}\n```\n\n开发环境在Windows10 + VS2013,整个代码跑起来没什么问题。\n\n无论是HTTP还是HTTPS协议，网页HTML一样能获取得到。\n\n网站部署到linux Jexus之后HTTP协议的网站同样可以获取到HTML，遇到HTTPS协议的网站的时候就跪了。\n\n抓到的异常信息如下：\n\n```csharp\n   System.Net.WebException: Error: TrustFailure (The authentication or decryption has failed.) \n   ---> System.IO.IOException: The authentication or decryption has failed.\n   ---> System.IO.IOException: The authentication or decryption has failed. \n   ---> Mono.Security.Protocol.Tls.TlsException:\n   Invalid certificate received from server. Error code: 0xffffffff800b0109\n   at Mono.Security.Protocol.Tls.RecordProtocol.EndReceiveRecord \n   (IAsyncResult asyncResult) <0x41b58d80 + 0x0013e> in <filename unknown>:0 \n   at Mono.Security.Protocol.Tls.SslClientStream.SafeEndReceiveRecord\n   (IAsyncResult ar, Boolean ignoreEmpty) <0x41b58cb0 + 0x00031> in <filename unknown>:0 \n   at Mono.Security.Protocol.Tls.SslClientStream.NegotiateAsyncWorker\n   (IAsyncResult result) <0x41b72a40 + 0x0023f> in <filename unknown>:0 \n   --- End of inner exception stack trace ---\n   at Mono.Security.Protocol.Tls.SslClientStream.EndNegotiateHandshake \n   (IAsyncResult result) <0x41ba07e0 + 0x000f3> in <filename unknown>:0 \n   at Mono.Security.Protocol.Tls.SslStreamBase.AsyncHandshakeCallback \n   (IAsyncResult asyncResult) <0x41ba0540 + 0x00086> in <filename unknown>:0 \n   --- End of inner exception stack trace ---\n   at Mono.Security.Protocol.Tls.SslStreamBase.EndRead \n   (IAsyncResult asyncResult) <0x41b73fd0 + 0x00199> in <filename unknown>:0 \n   at Mono.Net.Security.Private.LegacySslStream.EndAuthenticateAsClient \n   (IAsyncResult asyncResult) <0x41b73f30 + 0x00042> in <filename unknown>:0 \n   at Mono.Net.Security.Private.LegacySslStream.AuthenticateAsClient (System.String targetHost, \n   System.Security.Cryptography.X509Certificates.X509CertificateCollection\n   clientCertificates, SslProtocols enabledSslProtocols,\n   Boolean checkCertificateRevocation) <0x41b6a660 + 0x00055> in <filename unknown>:0 \n   at Mono.Net.Security.MonoTlsStream.CreateStream (System.Byte[] buffer) \n   <0x41b69c30 + 0x00159> in <filename unknown>:0 \n   --- End of inner exception stack trace ---\n   at System.Net.HttpWebRequest.EndGetResponse (IAsyncResult asyncResult) \n   <0x41b67660 + 0x001f9> in <filename unknown>:0 \n   at System.Net.HttpWebRequest.GetResponse () <0x41b60920 + 0x0005a> in <filename unknown>:0 \n   at WebBookmarkUI.Commom.HTTPHelper.GetHTML (System.String url) <0x41b59b70 + 0x00235> \n   in <filename unknown>:0 \n\n```\n\n有用的信息基本就是：\n\n1. Invalid certificate received from server\n2. The authentication or decryption has failed\n\n一开始百思不得其解，为嘛好好的程序在开发环境跑得都好的，到了mono上就挂了，多疑的我还以为是mono的bug。\n今天静下心来去找了一下资料，发现Mono的文档有这个问题的描述，认真读了一遍，又去请教了一番宇内流云大大，终于弄懂了是什么回事。\n\n先贴一下相关资料：\n\n1. [stackoverflow mono-webrequest-fails-with-https](http://stackoverflow.com/questions/4926676/mono-webrequest-fails-with-https)\n\n2. [mono doc security](http://www.mono-project.com/docs/faq/security/)\n\n\n这个问题是出现的原因是Windows自带了HTPPS的根证书，linux默认则是没有带有根证书的。我们的mono在调用WebRequest去请求HTTPS协议的网站的时候，找不到任何有效的根证书，所以抛出上面的异常了。\n\n解决方案也很简单，为linux导入一下HTTPS根证书就好。\n\n在linux服务器上面执行下面这条命令。\n```\nmozroots --import --ask-remove --machine\n\n```\n\n\n然后在网站的Application_Start()里面添加下面代码：\n\n```csharp\n System.Net.ServicePointManager.ServerCertificateValidationCallback +=\n delegate(object sender, System.Security.Cryptography.X509Certificates.X509Certificate certificate,\n System.Security.Cryptography.X509Certificates.X509Chain chain,\n System.Net.Security.SslPolicyErrors sslPolicyErrors)\n{\n    return true; // **** Always accept\n};\n\n```\n\n完事。\n\n这个故事告诉我们，linux干活都是要亲力亲为呀。\n\n\n\n","source":"_posts/mono-webreques-https-exception.md","raw":"---\nlayout: post\ntitle: mono webreques https exception\ncategory: .net\ndate: 2016-04-10 12:39:04\ntags:\n  - mono\n  - webreques exception\n---\n\n前几天在做一个使用URL通过WebRequest请求HTML页面的功能的时候遇到了点坑，程序在开发环境没有任何的问题，部署到linux mono上之后就跪了。代码如下：\n\n```csharp\npublic static string GetHTML(string url)\n{\n    string htmlCode;\n    try\n    {\n        HttpWebRequest webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(url);\n        webRequest.Timeout = 30000;\n        webRequest.Method = \"GET\";\n        webRequest.UserAgent = \"Mozilla/4.0\";\n        webRequest.Headers.Add(\"Accept-Encoding\", \"gzip, deflate\");\n\n        HttpWebResponse webResponse = (System.Net.HttpWebResponse)webRequest.GetResponse();\n        //获取目标网站的编码格式\n        string contentype = webResponse.Headers[\"Content-Type\"];\n        Regex regex = new Regex(\"charset\\\\s*=\\\\s*[\\\\W]?\\\\s*([\\\\w-]+)\", RegexOptions.IgnoreCase);\n        if (webResponse.ContentEncoding.ToLower() == \"gzip\")//如果使用了GZip则先解压\n        {\n            using (System.IO.Stream streamReceive = webResponse.GetResponseStream())\n            {\n                using (var zipStream = new System.IO.Compression.GZipStream(streamReceive, \n                System.IO.Compression.CompressionMode.Decompress))\n                {\n                    //匹配编码格式\n                    if (regex.IsMatch(contentype))\n                    {\n                        Encoding ending = Encoding.GetEncoding(regex.Match(contentype).Groups[1].Value.Trim());\n                        using (StreamReader sr = new System.IO.StreamReader(zipStream, ending))\n                        {\n                            htmlCode = sr.ReadToEnd();\n                        }\n                    }\n                    else\n                    {\n                        using (StreamReader sr = \n                        new System.IO.StreamReader(zipStream, Encoding.UTF8))\n                        {\n                            htmlCode = sr.ReadToEnd();\n                        }\n                    }\n                }\n            }\n        }\n        else\n        {\n            using (System.IO.Stream streamReceive = webResponse.GetResponseStream())\n            {\n                using (System.IO.StreamReader sr = new System.IO.StreamReader(streamReceive, Encoding.Default))\n                {\n                    htmlCode = sr.ReadToEnd();\n                }\n            }\n        }\n        return htmlCode;\n\n    }catch(Exception ex)\n    {\n        LogHelper.WriteException(\"GetHTML\", ex, new { Url = url });\n        return \"\";\n    }\n\n}\n```\n\n开发环境在Windows10 + VS2013,整个代码跑起来没什么问题。\n\n无论是HTTP还是HTTPS协议，网页HTML一样能获取得到。\n\n网站部署到linux Jexus之后HTTP协议的网站同样可以获取到HTML，遇到HTTPS协议的网站的时候就跪了。\n\n抓到的异常信息如下：\n\n```csharp\n   System.Net.WebException: Error: TrustFailure (The authentication or decryption has failed.) \n   ---> System.IO.IOException: The authentication or decryption has failed.\n   ---> System.IO.IOException: The authentication or decryption has failed. \n   ---> Mono.Security.Protocol.Tls.TlsException:\n   Invalid certificate received from server. Error code: 0xffffffff800b0109\n   at Mono.Security.Protocol.Tls.RecordProtocol.EndReceiveRecord \n   (IAsyncResult asyncResult) <0x41b58d80 + 0x0013e> in <filename unknown>:0 \n   at Mono.Security.Protocol.Tls.SslClientStream.SafeEndReceiveRecord\n   (IAsyncResult ar, Boolean ignoreEmpty) <0x41b58cb0 + 0x00031> in <filename unknown>:0 \n   at Mono.Security.Protocol.Tls.SslClientStream.NegotiateAsyncWorker\n   (IAsyncResult result) <0x41b72a40 + 0x0023f> in <filename unknown>:0 \n   --- End of inner exception stack trace ---\n   at Mono.Security.Protocol.Tls.SslClientStream.EndNegotiateHandshake \n   (IAsyncResult result) <0x41ba07e0 + 0x000f3> in <filename unknown>:0 \n   at Mono.Security.Protocol.Tls.SslStreamBase.AsyncHandshakeCallback \n   (IAsyncResult asyncResult) <0x41ba0540 + 0x00086> in <filename unknown>:0 \n   --- End of inner exception stack trace ---\n   at Mono.Security.Protocol.Tls.SslStreamBase.EndRead \n   (IAsyncResult asyncResult) <0x41b73fd0 + 0x00199> in <filename unknown>:0 \n   at Mono.Net.Security.Private.LegacySslStream.EndAuthenticateAsClient \n   (IAsyncResult asyncResult) <0x41b73f30 + 0x00042> in <filename unknown>:0 \n   at Mono.Net.Security.Private.LegacySslStream.AuthenticateAsClient (System.String targetHost, \n   System.Security.Cryptography.X509Certificates.X509CertificateCollection\n   clientCertificates, SslProtocols enabledSslProtocols,\n   Boolean checkCertificateRevocation) <0x41b6a660 + 0x00055> in <filename unknown>:0 \n   at Mono.Net.Security.MonoTlsStream.CreateStream (System.Byte[] buffer) \n   <0x41b69c30 + 0x00159> in <filename unknown>:0 \n   --- End of inner exception stack trace ---\n   at System.Net.HttpWebRequest.EndGetResponse (IAsyncResult asyncResult) \n   <0x41b67660 + 0x001f9> in <filename unknown>:0 \n   at System.Net.HttpWebRequest.GetResponse () <0x41b60920 + 0x0005a> in <filename unknown>:0 \n   at WebBookmarkUI.Commom.HTTPHelper.GetHTML (System.String url) <0x41b59b70 + 0x00235> \n   in <filename unknown>:0 \n\n```\n\n有用的信息基本就是：\n\n1. Invalid certificate received from server\n2. The authentication or decryption has failed\n\n一开始百思不得其解，为嘛好好的程序在开发环境跑得都好的，到了mono上就挂了，多疑的我还以为是mono的bug。\n今天静下心来去找了一下资料，发现Mono的文档有这个问题的描述，认真读了一遍，又去请教了一番宇内流云大大，终于弄懂了是什么回事。\n\n先贴一下相关资料：\n\n1. [stackoverflow mono-webrequest-fails-with-https](http://stackoverflow.com/questions/4926676/mono-webrequest-fails-with-https)\n\n2. [mono doc security](http://www.mono-project.com/docs/faq/security/)\n\n\n这个问题是出现的原因是Windows自带了HTPPS的根证书，linux默认则是没有带有根证书的。我们的mono在调用WebRequest去请求HTTPS协议的网站的时候，找不到任何有效的根证书，所以抛出上面的异常了。\n\n解决方案也很简单，为linux导入一下HTTPS根证书就好。\n\n在linux服务器上面执行下面这条命令。\n```\nmozroots --import --ask-remove --machine\n\n```\n\n\n然后在网站的Application_Start()里面添加下面代码：\n\n```csharp\n System.Net.ServicePointManager.ServerCertificateValidationCallback +=\n delegate(object sender, System.Security.Cryptography.X509Certificates.X509Certificate certificate,\n System.Security.Cryptography.X509Certificates.X509Chain chain,\n System.Net.Security.SslPolicyErrors sslPolicyErrors)\n{\n    return true; // **** Always accept\n};\n\n```\n\n完事。\n\n这个故事告诉我们，linux干活都是要亲力亲为呀。\n\n\n\n","slug":"mono-webreques-https-exception","published":1,"updated":"2016-10-15T05:20:24.932Z","comments":1,"photos":[],"link":"","_id":"cj0dyumxa001o6kunkticvhaz","content":"<p>前几天在做一个使用URL通过WebRequest请求HTML页面的功能的时候遇到了点坑，程序在开发环境没有任何的问题，部署到linux mono上之后就跪了。代码如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetHTML</span>(<span class=\"params\"><span class=\"keyword\">string</span> url</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">string</span> htmlCode;</div><div class=\"line\">    <span class=\"keyword\">try</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        HttpWebRequest webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(url);</div><div class=\"line\">        webRequest.Timeout = <span class=\"number\">30000</span>;</div><div class=\"line\">        webRequest.Method = <span class=\"string\">\"GET\"</span>;</div><div class=\"line\">        webRequest.UserAgent = <span class=\"string\">\"Mozilla/4.0\"</span>;</div><div class=\"line\">        webRequest.Headers.Add(<span class=\"string\">\"Accept-Encoding\"</span>, <span class=\"string\">\"gzip, deflate\"</span>);</div><div class=\"line\"></div><div class=\"line\">        HttpWebResponse webResponse = (System.Net.HttpWebResponse)webRequest.GetResponse();</div><div class=\"line\">        <span class=\"comment\">//获取目标网站的编码格式</span></div><div class=\"line\">        <span class=\"keyword\">string</span> contentype = webResponse.Headers[<span class=\"string\">\"Content-Type\"</span>];</div><div class=\"line\">        Regex regex = <span class=\"keyword\">new</span> Regex(<span class=\"string\">\"charset\\\\s*=\\\\s*[\\\\W]?\\\\s*([\\\\w-]+)\"</span>, RegexOptions.IgnoreCase);</div><div class=\"line\">        <span class=\"keyword\">if</span> (webResponse.ContentEncoding.ToLower() == <span class=\"string\">\"gzip\"</span>)<span class=\"comment\">//如果使用了GZip则先解压</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">using</span> (System.IO.Stream streamReceive = webResponse.GetResponseStream())</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> zipStream = <span class=\"keyword\">new</span> System.IO.Compression.GZipStream(streamReceive, </div><div class=\"line\">                System.IO.Compression.CompressionMode.Decompress))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"comment\">//匹配编码格式</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (regex.IsMatch(contentype))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        Encoding ending = Encoding.GetEncoding(regex.Match(contentype).Groups[<span class=\"number\">1</span>].Value.Trim());</div><div class=\"line\">                        <span class=\"keyword\">using</span> (StreamReader sr = <span class=\"keyword\">new</span> System.IO.StreamReader(zipStream, ending))</div><div class=\"line\">                        &#123;</div><div class=\"line\">                            htmlCode = sr.ReadToEnd();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">else</span></div><div class=\"line\">                    &#123;</div><div class=\"line\">                        <span class=\"keyword\">using</span> (StreamReader sr = </div><div class=\"line\">                        <span class=\"keyword\">new</span> System.IO.StreamReader(zipStream, Encoding.UTF8))</div><div class=\"line\">                        &#123;</div><div class=\"line\">                            htmlCode = sr.ReadToEnd();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">using</span> (System.IO.Stream streamReceive = webResponse.GetResponseStream())</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">using</span> (System.IO.StreamReader sr = <span class=\"keyword\">new</span> System.IO.StreamReader(streamReceive, Encoding.Default))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    htmlCode = sr.ReadToEnd();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> htmlCode;</div><div class=\"line\"></div><div class=\"line\">    &#125;<span class=\"keyword\">catch</span>(Exception ex)</div><div class=\"line\">    &#123;</div><div class=\"line\">        LogHelper.WriteException(<span class=\"string\">\"GetHTML\"</span>, ex, <span class=\"keyword\">new</span> &#123; Url = url &#125;);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>开发环境在Windows10 + VS2013,整个代码跑起来没什么问题。</p>\n<p>无论是HTTP还是HTTPS协议，网页HTML一样能获取得到。</p>\n<p>网站部署到linux Jexus之后HTTP协议的网站同样可以获取到HTML，遇到HTTPS协议的网站的时候就跪了。</p>\n<p>抓到的异常信息如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.Net.WebException: Error: TrustFailure (The authentication or decryption has failed.) </div><div class=\"line\">---&gt; System.IO.IOException: The authentication or decryption has failed.</div><div class=\"line\">---&gt; System.IO.IOException: The authentication or decryption has failed. </div><div class=\"line\">---&gt; Mono.Security.Protocol.Tls.TlsException:</div><div class=\"line\">Invalid certificate received <span class=\"keyword\">from</span> server. Error code: <span class=\"number\">0xffffffff800b0109</span></div><div class=\"line\">at Mono.Security.Protocol.Tls.RecordProtocol.EndReceiveRecord </div><div class=\"line\">(IAsyncResult asyncResult) &lt;<span class=\"number\">0x41b58d80</span> + <span class=\"number\">0x0013e</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </div><div class=\"line\">at Mono.Security.Protocol.Tls.SslClientStream.SafeEndReceiveRecord</div><div class=\"line\">(IAsyncResult ar, Boolean ignoreEmpty) &lt;<span class=\"number\">0x41b58cb0</span> + <span class=\"number\">0x00031</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </div><div class=\"line\">at Mono.Security.Protocol.Tls.SslClientStream.NegotiateAsyncWorker</div><div class=\"line\">(IAsyncResult result) &lt;<span class=\"number\">0x41b72a40</span> + <span class=\"number\">0x0023f</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </div><div class=\"line\">--- End of inner exception stack trace ---</div><div class=\"line\">at Mono.Security.Protocol.Tls.SslClientStream.EndNegotiateHandshake </div><div class=\"line\">(IAsyncResult result) &lt;<span class=\"number\">0x41ba07e0</span> + <span class=\"number\">0x000f3</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </div><div class=\"line\">at Mono.Security.Protocol.Tls.SslStreamBase.AsyncHandshakeCallback </div><div class=\"line\">(IAsyncResult asyncResult) &lt;<span class=\"number\">0x41ba0540</span> + <span class=\"number\">0x00086</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </div><div class=\"line\">--- End of inner exception stack trace ---</div><div class=\"line\">at Mono.Security.Protocol.Tls.SslStreamBase.EndRead </div><div class=\"line\">(IAsyncResult asyncResult) &lt;<span class=\"number\">0x41b73fd0</span> + <span class=\"number\">0x00199</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </div><div class=\"line\">at Mono.Net.Security.Private.LegacySslStream.EndAuthenticateAsClient </div><div class=\"line\">(IAsyncResult asyncResult) &lt;<span class=\"number\">0x41b73f30</span> + <span class=\"number\">0x00042</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </div><div class=\"line\">at Mono.Net.Security.Private.LegacySslStream.AuthenticateAsClient (System.String targetHost, </div><div class=\"line\">System.Security.Cryptography.X509Certificates.X509CertificateCollection</div><div class=\"line\">clientCertificates, SslProtocols enabledSslProtocols,</div><div class=\"line\">Boolean checkCertificateRevocation) &lt;<span class=\"number\">0x41b6a660</span> + <span class=\"number\">0x00055</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </div><div class=\"line\">at Mono.Net.Security.MonoTlsStream.CreateStream (System.Byte[] buffer) </div><div class=\"line\">&lt;<span class=\"number\">0x41b69c30</span> + <span class=\"number\">0x00159</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </div><div class=\"line\">--- End of inner exception stack trace ---</div><div class=\"line\">at System.Net.HttpWebRequest.EndGetResponse (IAsyncResult asyncResult) </div><div class=\"line\">&lt;<span class=\"number\">0x41b67660</span> + <span class=\"number\">0x001f9</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </div><div class=\"line\">at System.Net.HttpWebRequest.GetResponse () &lt;<span class=\"number\">0x41b60920</span> + <span class=\"number\">0x0005a</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </div><div class=\"line\">at WebBookmarkUI.Commom.HTTPHelper.GetHTML (System.String url) &lt;<span class=\"number\">0x41b59b70</span> + <span class=\"number\">0x00235</span>&gt; </div><div class=\"line\"><span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<p>有用的信息基本就是：</p>\n<ol>\n<li>Invalid certificate received from server</li>\n<li>The authentication or decryption has failed</li>\n</ol>\n<p>一开始百思不得其解，为嘛好好的程序在开发环境跑得都好的，到了mono上就挂了，多疑的我还以为是mono的bug。<br>今天静下心来去找了一下资料，发现Mono的文档有这个问题的描述，认真读了一遍，又去请教了一番宇内流云大大，终于弄懂了是什么回事。</p>\n<p>先贴一下相关资料：</p>\n<ol>\n<li><p><a href=\"http://stackoverflow.com/questions/4926676/mono-webrequest-fails-with-https\" target=\"_blank\" rel=\"external\">stackoverflow mono-webrequest-fails-with-https</a></p>\n</li>\n<li><p><a href=\"http://www.mono-project.com/docs/faq/security/\" target=\"_blank\" rel=\"external\">mono doc security</a></p>\n</li>\n</ol>\n<p>这个问题是出现的原因是Windows自带了HTPPS的根证书，linux默认则是没有带有根证书的。我们的mono在调用WebRequest去请求HTTPS协议的网站的时候，找不到任何有效的根证书，所以抛出上面的异常了。</p>\n<p>解决方案也很简单，为linux导入一下HTTPS根证书就好。</p>\n<p>在linux服务器上面执行下面这条命令。<br><figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">mozroots</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">import</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">ask</span><span class=\"literal\">-</span><span class=\"comment\">remove</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">machine</span></div></pre></td></tr></table></figure></p>\n<p>然后在网站的Application_Start()里面添加下面代码：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> System.Net.ServicePointManager.ServerCertificateValidationCallback +=</div><div class=\"line\"> <span class=\"keyword\">delegate</span>(<span class=\"keyword\">object</span> sender, System.Security.Cryptography.X509Certificates.X509Certificate certificate,</div><div class=\"line\"> System.Security.Cryptography.X509Certificates.X509Chain chain,</div><div class=\"line\"> System.Net.Security.SslPolicyErrors sslPolicyErrors)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// **** Always accept</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>完事。</p>\n<p>这个故事告诉我们，linux干活都是要亲力亲为呀。</p>\n","excerpt":"","more":"<p>前几天在做一个使用URL通过WebRequest请求HTML页面的功能的时候遇到了点坑，程序在开发环境没有任何的问题，部署到linux mono上之后就跪了。代码如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetHTML</span>(<span class=\"params\"><span class=\"keyword\">string</span> url</span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">string</span> htmlCode;</div><div class=\"line\">    <span class=\"keyword\">try</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        HttpWebRequest webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(url);</div><div class=\"line\">        webRequest.Timeout = <span class=\"number\">30000</span>;</div><div class=\"line\">        webRequest.Method = <span class=\"string\">\"GET\"</span>;</div><div class=\"line\">        webRequest.UserAgent = <span class=\"string\">\"Mozilla/4.0\"</span>;</div><div class=\"line\">        webRequest.Headers.Add(<span class=\"string\">\"Accept-Encoding\"</span>, <span class=\"string\">\"gzip, deflate\"</span>);</div><div class=\"line\"></div><div class=\"line\">        HttpWebResponse webResponse = (System.Net.HttpWebResponse)webRequest.GetResponse();</div><div class=\"line\">        <span class=\"comment\">//获取目标网站的编码格式</span></div><div class=\"line\">        <span class=\"keyword\">string</span> contentype = webResponse.Headers[<span class=\"string\">\"Content-Type\"</span>];</div><div class=\"line\">        Regex regex = <span class=\"keyword\">new</span> Regex(<span class=\"string\">\"charset\\\\s*=\\\\s*[\\\\W]?\\\\s*([\\\\w-]+)\"</span>, RegexOptions.IgnoreCase);</div><div class=\"line\">        <span class=\"keyword\">if</span> (webResponse.ContentEncoding.ToLower() == <span class=\"string\">\"gzip\"</span>)<span class=\"comment\">//如果使用了GZip则先解压</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">using</span> (System.IO.Stream streamReceive = webResponse.GetResponseStream())</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> zipStream = <span class=\"keyword\">new</span> System.IO.Compression.GZipStream(streamReceive, </div><div class=\"line\">                System.IO.Compression.CompressionMode.Decompress))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"comment\">//匹配编码格式</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (regex.IsMatch(contentype))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        Encoding ending = Encoding.GetEncoding(regex.Match(contentype).Groups[<span class=\"number\">1</span>].Value.Trim());</div><div class=\"line\">                        <span class=\"keyword\">using</span> (StreamReader sr = <span class=\"keyword\">new</span> System.IO.StreamReader(zipStream, ending))</div><div class=\"line\">                        &#123;</div><div class=\"line\">                            htmlCode = sr.ReadToEnd();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">else</span></div><div class=\"line\">                    &#123;</div><div class=\"line\">                        <span class=\"keyword\">using</span> (StreamReader sr = </div><div class=\"line\">                        <span class=\"keyword\">new</span> System.IO.StreamReader(zipStream, Encoding.UTF8))</div><div class=\"line\">                        &#123;</div><div class=\"line\">                            htmlCode = sr.ReadToEnd();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">using</span> (System.IO.Stream streamReceive = webResponse.GetResponseStream())</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">using</span> (System.IO.StreamReader sr = <span class=\"keyword\">new</span> System.IO.StreamReader(streamReceive, Encoding.Default))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    htmlCode = sr.ReadToEnd();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> htmlCode;</div><div class=\"line\"></div><div class=\"line\">    &#125;<span class=\"keyword\">catch</span>(Exception ex)</div><div class=\"line\">    &#123;</div><div class=\"line\">        LogHelper.WriteException(<span class=\"string\">\"GetHTML\"</span>, ex, <span class=\"keyword\">new</span> &#123; Url = url &#125;);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>开发环境在Windows10 + VS2013,整个代码跑起来没什么问题。</p>\n<p>无论是HTTP还是HTTPS协议，网页HTML一样能获取得到。</p>\n<p>网站部署到linux Jexus之后HTTP协议的网站同样可以获取到HTML，遇到HTTPS协议的网站的时候就跪了。</p>\n<p>抓到的异常信息如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.Net.WebException: Error: TrustFailure (The authentication or decryption has failed.) </div><div class=\"line\">---&gt; System.IO.IOException: The authentication or decryption has failed.</div><div class=\"line\">---&gt; System.IO.IOException: The authentication or decryption has failed. </div><div class=\"line\">---&gt; Mono.Security.Protocol.Tls.TlsException:</div><div class=\"line\">Invalid certificate received <span class=\"keyword\">from</span> server. Error code: <span class=\"number\">0xffffffff800b0109</span></div><div class=\"line\">at Mono.Security.Protocol.Tls.RecordProtocol.EndReceiveRecord </div><div class=\"line\">(IAsyncResult asyncResult) &lt;<span class=\"number\">0x41b58d80</span> + <span class=\"number\">0x0013e</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </div><div class=\"line\">at Mono.Security.Protocol.Tls.SslClientStream.SafeEndReceiveRecord</div><div class=\"line\">(IAsyncResult ar, Boolean ignoreEmpty) &lt;<span class=\"number\">0x41b58cb0</span> + <span class=\"number\">0x00031</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </div><div class=\"line\">at Mono.Security.Protocol.Tls.SslClientStream.NegotiateAsyncWorker</div><div class=\"line\">(IAsyncResult result) &lt;<span class=\"number\">0x41b72a40</span> + <span class=\"number\">0x0023f</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </div><div class=\"line\">--- End of inner exception stack trace ---</div><div class=\"line\">at Mono.Security.Protocol.Tls.SslClientStream.EndNegotiateHandshake </div><div class=\"line\">(IAsyncResult result) &lt;<span class=\"number\">0x41ba07e0</span> + <span class=\"number\">0x000f3</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </div><div class=\"line\">at Mono.Security.Protocol.Tls.SslStreamBase.AsyncHandshakeCallback </div><div class=\"line\">(IAsyncResult asyncResult) &lt;<span class=\"number\">0x41ba0540</span> + <span class=\"number\">0x00086</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </div><div class=\"line\">--- End of inner exception stack trace ---</div><div class=\"line\">at Mono.Security.Protocol.Tls.SslStreamBase.EndRead </div><div class=\"line\">(IAsyncResult asyncResult) &lt;<span class=\"number\">0x41b73fd0</span> + <span class=\"number\">0x00199</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </div><div class=\"line\">at Mono.Net.Security.Private.LegacySslStream.EndAuthenticateAsClient </div><div class=\"line\">(IAsyncResult asyncResult) &lt;<span class=\"number\">0x41b73f30</span> + <span class=\"number\">0x00042</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </div><div class=\"line\">at Mono.Net.Security.Private.LegacySslStream.AuthenticateAsClient (System.String targetHost, </div><div class=\"line\">System.Security.Cryptography.X509Certificates.X509CertificateCollection</div><div class=\"line\">clientCertificates, SslProtocols enabledSslProtocols,</div><div class=\"line\">Boolean checkCertificateRevocation) &lt;<span class=\"number\">0x41b6a660</span> + <span class=\"number\">0x00055</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </div><div class=\"line\">at Mono.Net.Security.MonoTlsStream.CreateStream (System.Byte[] buffer) </div><div class=\"line\">&lt;<span class=\"number\">0x41b69c30</span> + <span class=\"number\">0x00159</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </div><div class=\"line\">--- End of inner exception stack trace ---</div><div class=\"line\">at System.Net.HttpWebRequest.EndGetResponse (IAsyncResult asyncResult) </div><div class=\"line\">&lt;<span class=\"number\">0x41b67660</span> + <span class=\"number\">0x001f9</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </div><div class=\"line\">at System.Net.HttpWebRequest.GetResponse () &lt;<span class=\"number\">0x41b60920</span> + <span class=\"number\">0x0005a</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </div><div class=\"line\">at WebBookmarkUI.Commom.HTTPHelper.GetHTML (System.String url) &lt;<span class=\"number\">0x41b59b70</span> + <span class=\"number\">0x00235</span>&gt; </div><div class=\"line\"><span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<p>有用的信息基本就是：</p>\n<ol>\n<li>Invalid certificate received from server</li>\n<li>The authentication or decryption has failed</li>\n</ol>\n<p>一开始百思不得其解，为嘛好好的程序在开发环境跑得都好的，到了mono上就挂了，多疑的我还以为是mono的bug。<br>今天静下心来去找了一下资料，发现Mono的文档有这个问题的描述，认真读了一遍，又去请教了一番宇内流云大大，终于弄懂了是什么回事。</p>\n<p>先贴一下相关资料：</p>\n<ol>\n<li><p><a href=\"http://stackoverflow.com/questions/4926676/mono-webrequest-fails-with-https\">stackoverflow mono-webrequest-fails-with-https</a></p>\n</li>\n<li><p><a href=\"http://www.mono-project.com/docs/faq/security/\">mono doc security</a></p>\n</li>\n</ol>\n<p>这个问题是出现的原因是Windows自带了HTPPS的根证书，linux默认则是没有带有根证书的。我们的mono在调用WebRequest去请求HTTPS协议的网站的时候，找不到任何有效的根证书，所以抛出上面的异常了。</p>\n<p>解决方案也很简单，为linux导入一下HTTPS根证书就好。</p>\n<p>在linux服务器上面执行下面这条命令。<br><figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">mozroots</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">import</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">ask</span><span class=\"literal\">-</span><span class=\"comment\">remove</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">machine</span></div></pre></td></tr></table></figure></p>\n<p>然后在网站的Application_Start()里面添加下面代码：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> System.Net.ServicePointManager.ServerCertificateValidationCallback +=</div><div class=\"line\"> <span class=\"keyword\">delegate</span>(<span class=\"keyword\">object</span> sender, System.Security.Cryptography.X509Certificates.X509Certificate certificate,</div><div class=\"line\"> System.Security.Cryptography.X509Certificates.X509Chain chain,</div><div class=\"line\"> System.Net.Security.SslPolicyErrors sslPolicyErrors)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// **** Always accept</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>完事。</p>\n<p>这个故事告诉我们，linux干活都是要亲力亲为呀。</p>\n"},{"layout":"post","title":"ASP.NET core 初体验","date":"2016-05-29T16:00:00.000Z","_content":"\n在大神的带领下体验了一下asp.net core，感觉很不错，简单写个手把手教程。\n\n环境要求：VS2015 update2，版本不限。\n\n首先到这里：[https://www.microsoft.com/net/download](https://www.microsoft.com/net/download)\n\n下载.NET Core Install 和SDK Install。\n\n如下图：\n![图一](http://7xread.com1.z0.glb.clouddn.com/5f4576e6-6fa0-4fbb-83c9-009428480e83)\n\n接着无脑安装。\n![图二](http://7xread.com1.z0.glb.clouddn.com/a996d00e-5aa5-4034-96ae-548e35c2ba95)\n\n两个都装完之后环境已经搭好了。不过在VS中还没对应的.NET Core模板。\n我们还需要去下载一个\n[.NET Core Tooling Preview 1 for Visual Studio 2015](https://go.microsoft.com/fwlink/?LinkId=798481)\n\n![图三](http://7xread.com1.z0.glb.clouddn.com/07ec4ff1-64ea-486b-8cb8-99dc400c279a)\n\n这个安装略慢，稍等。\n\n上面的都安装好了之后，打开VS，新建项目，选中web，即可看到asp.net core.\n如下图：\n![图五](http://7xread.com1.z0.glb.clouddn.com/aa3a9677-701e-45f0-90ea-b47b57dcb85e)\n完事....\n下次再来聊asp.net core项目...","source":"_posts/the_first_aspnetcore.md","raw":"---\nlayout: post\ntitle: ASP.NET core 初体验\ncategory: .net core\ndate: 2016-05-30 00:00:00\n---\n\n在大神的带领下体验了一下asp.net core，感觉很不错，简单写个手把手教程。\n\n环境要求：VS2015 update2，版本不限。\n\n首先到这里：[https://www.microsoft.com/net/download](https://www.microsoft.com/net/download)\n\n下载.NET Core Install 和SDK Install。\n\n如下图：\n![图一](http://7xread.com1.z0.glb.clouddn.com/5f4576e6-6fa0-4fbb-83c9-009428480e83)\n\n接着无脑安装。\n![图二](http://7xread.com1.z0.glb.clouddn.com/a996d00e-5aa5-4034-96ae-548e35c2ba95)\n\n两个都装完之后环境已经搭好了。不过在VS中还没对应的.NET Core模板。\n我们还需要去下载一个\n[.NET Core Tooling Preview 1 for Visual Studio 2015](https://go.microsoft.com/fwlink/?LinkId=798481)\n\n![图三](http://7xread.com1.z0.glb.clouddn.com/07ec4ff1-64ea-486b-8cb8-99dc400c279a)\n\n这个安装略慢，稍等。\n\n上面的都安装好了之后，打开VS，新建项目，选中web，即可看到asp.net core.\n如下图：\n![图五](http://7xread.com1.z0.glb.clouddn.com/aa3a9677-701e-45f0-90ea-b47b57dcb85e)\n完事....\n下次再来聊asp.net core项目...","slug":"the_first_aspnetcore","published":1,"updated":"2016-10-15T07:14:38.318Z","comments":1,"photos":[],"link":"","_id":"cj0dyumxc001r6kunlijhhunq","content":"<p>在大神的带领下体验了一下asp.net core，感觉很不错，简单写个手把手教程。</p>\n<p>环境要求：VS2015 update2，版本不限。</p>\n<p>首先到这里：<a href=\"https://www.microsoft.com/net/download\" target=\"_blank\" rel=\"external\">https://www.microsoft.com/net/download</a></p>\n<p>下载.NET Core Install 和SDK Install。</p>\n<p>如下图：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/5f4576e6-6fa0-4fbb-83c9-009428480e83\" alt=\"图一\"></p>\n<p>接着无脑安装。<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/a996d00e-5aa5-4034-96ae-548e35c2ba95\" alt=\"图二\"></p>\n<p>两个都装完之后环境已经搭好了。不过在VS中还没对应的.NET Core模板。<br>我们还需要去下载一个<br><a href=\"https://go.microsoft.com/fwlink/?LinkId=798481\" target=\"_blank\" rel=\"external\">.NET Core Tooling Preview 1 for Visual Studio 2015</a></p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/07ec4ff1-64ea-486b-8cb8-99dc400c279a\" alt=\"图三\"></p>\n<p>这个安装略慢，稍等。</p>\n<p>上面的都安装好了之后，打开VS，新建项目，选中web，即可看到asp.net core.<br>如下图：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/aa3a9677-701e-45f0-90ea-b47b57dcb85e\" alt=\"图五\"><br>完事….<br>下次再来聊asp.net core项目…</p>\n","excerpt":"","more":"<p>在大神的带领下体验了一下asp.net core，感觉很不错，简单写个手把手教程。</p>\n<p>环境要求：VS2015 update2，版本不限。</p>\n<p>首先到这里：<a href=\"https://www.microsoft.com/net/download\">https://www.microsoft.com/net/download</a></p>\n<p>下载.NET Core Install 和SDK Install。</p>\n<p>如下图：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/5f4576e6-6fa0-4fbb-83c9-009428480e83\" alt=\"图一\"></p>\n<p>接着无脑安装。<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/a996d00e-5aa5-4034-96ae-548e35c2ba95\" alt=\"图二\"></p>\n<p>两个都装完之后环境已经搭好了。不过在VS中还没对应的.NET Core模板。<br>我们还需要去下载一个<br><a href=\"https://go.microsoft.com/fwlink/?LinkId=798481\">.NET Core Tooling Preview 1 for Visual Studio 2015</a></p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/07ec4ff1-64ea-486b-8cb8-99dc400c279a\" alt=\"图三\"></p>\n<p>这个安装略慢，稍等。</p>\n<p>上面的都安装好了之后，打开VS，新建项目，选中web，即可看到asp.net core.<br>如下图：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/aa3a9677-701e-45f0-90ea-b47b57dcb85e\" alt=\"图五\"><br>完事….<br>下次再来聊asp.net core项目…</p>\n"},{"layout":"post","title":"ubuntu使用Jexus搭建MyWebSQL","date":"2016-04-06T16:00:00.000Z","_content":"\n\n之前在阿里云上装了一个ubuntu，后来也没怎么用力，就挂这一个mysql数据库。最近在家里用MySQL Workbench 连接阿里云上面的MySQL的时候，连着过了一会就中断了。后来看了一圈回来才发现，目测是家里电信宽带的锅，不断给我动态分配IP地址....后来群里面的小伙伴说，搭个websql了事啦。听起来不错的想法，于是昨天就试了一下。\n\n之前在ubuntu上装过apache，后来为了跑asp.net，把apache停了，换成了jexus。\nJexus是国内.NET 跨平台大牛们写的一个web服务器，使用方便，很稳定，也在不断加入新特性。相关资料直接访问[www.jexus.org](http://www.jexus.org/)。\n\njexus是以mono为基础的，其实首先应该先配置mono的运行环境。\n\n###第一步 安装mono\n相关资料链接：\n\n\n[在Ubuntu操作系统上安装mono的具体方法](http://www.linuxdot.net/bbsfile-3090)\n\n[Ubuntu 14.04 安装 Mono](http://www.isvee.com/archives/763)\n\n\n\n我的ubuntu老早之前就安装好了mono，这个就此瞥过咯。\n\n\n###第二步 安装jexus\n\n[Jexus web server V5.1 安装配置要点](http://www.linuxdot.net/bbsfile-3084)\n\n[jexus首页](http://www.jexus.org/)\n\n\n```\nA、安装：\ncd /tmp\nwget linuxdot.net/down/jexus-5.8.1.tar.gz \ntar -zxvf jexus-5.8.1.tar.gz \ncd jexus-5.8.1 \nsudo ./install \n\nB、更新\ncd /tmp\nsudo /usr/jexus/jws stop\nwget linuxdot.net/down/jexus-5.8.1.tar.gz\ntar -zxvf jexus-5.8.1.tar.gz\ncd jexus-5.8.1\nsudo ./upgrade\n\n```\n\n5.8.1差不多是现在最新版本了。\n\n###第三步 jexus 支持PHP\n\n先在ubuntu上安装一下PHP5-CGI.\n\n[用 Jexus ASP.NET WEB服务器搭建 PHP 网站的具体方法](http://www.linuxidc.com/Linux/2012-05/60172.htm)\n\n\n总结来说就是下面两句：\n```\nsudo apt-get update\n\nsudo apt-get install php5-cgi\n\n```\n\n接着：\n\n```\n1)修改“/etc/php.ini”文件:\n\n找到cgi.force_redirect=1一行，把前边的\"#\"号去掉，把值从1改为0，如：\n\ncgi.force_redirect=0\n\n2)修改jws.conf。打开jexus文件夹中的jws.conf，作如下配置：\n\n填写PHP-CGI程序路径和工作进程数。如：“php-fcgi.set=/usr/bin/php-cgi,6”。\n\n3)修改网站配置。在需要使用PHP的网站的配置文件中添加:\n\nfastcgi.add=php|socket:/var/run/jexus/phpsvr\n```\n\n[Jexus 支持PHP的三种方式-张善友](http://www.cnblogs.com/shanyou/p/3369322.html)\n\n\n搞完上面这些，理论上你的jexus已经能跑PHP网站了。\n\n\n\n###第四步 安装mywebsql\n\n[mywebsql首页](http://mywebsql.net/)\n\nmywebsql跑起来应该是下图的：\n\n![mywebsql效果图](http://7xread.com1.z0.glb.clouddn.com/7d902b94-f132-4041-84fa-78f044f91358)\n\n[下载地址](https://sourceforge.net/projects/mywebsql/files/stable/mywebsql-3.6.zip/download)\n\n```\ncd /tmp\n\nwget https://sourceforge.net/projects/mywebsql/files/stable/mywebsql-3.6.zip\n\ncp mywebsql-3.6.zip /var/www \n\ncd /var/www\n\ntar -zxvf mywebsql-3.6.zip \n\n```\n\n\n把mywebsql网站文件弄好之后，就可以去看jexus配置php网站了。\n\njexus的网站配置文件夹一般路径就是/usr/jexus/siteconf/\n\n```\ncd /usr/jexus/siteconf/\n\nvi mywebSQL #创建网站配置文件\n\ncd .. \n\n./jexus restart\n\n```\n\n上面的mywebSQL里面就写网站配置了，主要是端口号/运行环境之类的配置。\n\n贴一下我的配置：\n\n```\n#仅供参考\n######################\n# Web Site: Default\n########################################\n\nport=2016\nroot=/ /var/www/mywebsql\nhosts=*    #OR your.com,*.your.com\nusephp =true\nfastcgi.add=php|socket:/var/run/jexus/phpsvr\n\n# addr=0.0.0.0\n# CheckQuery=false\n# NoLog=true\n# NoFile=/index.aspx\n# Keep_Alive=false\n# UseGZIP=true\n# UseHttps=true\n# DenyFrom=192.168.0.233, 192.168.1.*, 192.168.2.0/24\n# AllowFrom=192.168.*.*\n# DenyDirs=~/cgi, ~/upfiles\n# indexes=myindex.aspx\n# rewrite=^/.+?\\.(asp|php|cgi|pl|sh)$ /index.aspx\n\n# reproxy=/bbs/ http://192.168.1.112/bbs/\n\n# Jexus php fastcgi address is '/var/run/jexus/phpsvr'\n#######################################################\n# fastcgi.add=php|socket:/var/run/jexus/phpsvr\n\n# php-fpm listen address is '127.0.0.1:9000'\n############################################\n# fastcgi.add=php|tcp:127.0.0.1:9000\n\n```\n\n\n到这里，访问http://你的主机IP:上面配置的端口号 就能看到下面的页面了。\n\n![MywWebSQL登陆页](http://7xread.com1.z0.glb.clouddn.com/df3951c0-9d3d-4085-b577-743df68c1d98)\n\n\n输入账号密码就能登陆。\n\n\n###然而....\n我登陆的时候显示，系统提示：没有安装客户端库。\n\n###第五步 配置PHP MySQL库\n\n\n于是又跑去看了一下MyWebSQL的说明，文档上说可以在/install.php上面看配置。\n\n\n\n![这是配置好的效果图](http://7xread.com1.z0.glb.clouddn.com/cf8d88d8-fb5d-42f0-81cc-e0fbb566ebe5)\n\n显示：\n\nMySQL Client Library\tclient library is not installed\nMySQL improved functionality\tclient library is not installed\n\n\n好吧，PHP MySQL客户端库没有安装....\n\n那就安装咯。\n于是找到了下面一个文章：\n[ZH奶酪：Ubuntu 14.04安装LAMP(Linux，Apache，MySQL，PHP)](http://www.cnblogs.com/CheeseZH/p/4694135.html)\n\n安装一下基础库\n```\nsudo apt-get install php5 libapache2-mod-php5 php5-mcrypt php5-curl php5-imagick php5-cli\n\n```\n\n搜索一下还有什么库可以安装。\n\napt-cache search php5-\n\n\n![](http://7xread.com1.z0.glb.clouddn.com/7bac43bc-01ea-4ce0-ba4b-37a06a51fe3a)\n\n\n```\nsudo apt-get install php5 php5-mysqlnd \n\nsudo apt-get install php5 php5-mysqlnd-ms\n\n```\n\n接着重启一下jexus的网站，万事大吉。\n\n","source":"_posts/ubuntu-jexus-mywebsql.md","raw":"---\nlayout: post\ntitle: ubuntu使用Jexus搭建MyWebSQL\ncategory: ubuntu\ndate: 2016-04-07 00:00:00\n\n---\n\n\n之前在阿里云上装了一个ubuntu，后来也没怎么用力，就挂这一个mysql数据库。最近在家里用MySQL Workbench 连接阿里云上面的MySQL的时候，连着过了一会就中断了。后来看了一圈回来才发现，目测是家里电信宽带的锅，不断给我动态分配IP地址....后来群里面的小伙伴说，搭个websql了事啦。听起来不错的想法，于是昨天就试了一下。\n\n之前在ubuntu上装过apache，后来为了跑asp.net，把apache停了，换成了jexus。\nJexus是国内.NET 跨平台大牛们写的一个web服务器，使用方便，很稳定，也在不断加入新特性。相关资料直接访问[www.jexus.org](http://www.jexus.org/)。\n\njexus是以mono为基础的，其实首先应该先配置mono的运行环境。\n\n###第一步 安装mono\n相关资料链接：\n\n\n[在Ubuntu操作系统上安装mono的具体方法](http://www.linuxdot.net/bbsfile-3090)\n\n[Ubuntu 14.04 安装 Mono](http://www.isvee.com/archives/763)\n\n\n\n我的ubuntu老早之前就安装好了mono，这个就此瞥过咯。\n\n\n###第二步 安装jexus\n\n[Jexus web server V5.1 安装配置要点](http://www.linuxdot.net/bbsfile-3084)\n\n[jexus首页](http://www.jexus.org/)\n\n\n```\nA、安装：\ncd /tmp\nwget linuxdot.net/down/jexus-5.8.1.tar.gz \ntar -zxvf jexus-5.8.1.tar.gz \ncd jexus-5.8.1 \nsudo ./install \n\nB、更新\ncd /tmp\nsudo /usr/jexus/jws stop\nwget linuxdot.net/down/jexus-5.8.1.tar.gz\ntar -zxvf jexus-5.8.1.tar.gz\ncd jexus-5.8.1\nsudo ./upgrade\n\n```\n\n5.8.1差不多是现在最新版本了。\n\n###第三步 jexus 支持PHP\n\n先在ubuntu上安装一下PHP5-CGI.\n\n[用 Jexus ASP.NET WEB服务器搭建 PHP 网站的具体方法](http://www.linuxidc.com/Linux/2012-05/60172.htm)\n\n\n总结来说就是下面两句：\n```\nsudo apt-get update\n\nsudo apt-get install php5-cgi\n\n```\n\n接着：\n\n```\n1)修改“/etc/php.ini”文件:\n\n找到cgi.force_redirect=1一行，把前边的\"#\"号去掉，把值从1改为0，如：\n\ncgi.force_redirect=0\n\n2)修改jws.conf。打开jexus文件夹中的jws.conf，作如下配置：\n\n填写PHP-CGI程序路径和工作进程数。如：“php-fcgi.set=/usr/bin/php-cgi,6”。\n\n3)修改网站配置。在需要使用PHP的网站的配置文件中添加:\n\nfastcgi.add=php|socket:/var/run/jexus/phpsvr\n```\n\n[Jexus 支持PHP的三种方式-张善友](http://www.cnblogs.com/shanyou/p/3369322.html)\n\n\n搞完上面这些，理论上你的jexus已经能跑PHP网站了。\n\n\n\n###第四步 安装mywebsql\n\n[mywebsql首页](http://mywebsql.net/)\n\nmywebsql跑起来应该是下图的：\n\n![mywebsql效果图](http://7xread.com1.z0.glb.clouddn.com/7d902b94-f132-4041-84fa-78f044f91358)\n\n[下载地址](https://sourceforge.net/projects/mywebsql/files/stable/mywebsql-3.6.zip/download)\n\n```\ncd /tmp\n\nwget https://sourceforge.net/projects/mywebsql/files/stable/mywebsql-3.6.zip\n\ncp mywebsql-3.6.zip /var/www \n\ncd /var/www\n\ntar -zxvf mywebsql-3.6.zip \n\n```\n\n\n把mywebsql网站文件弄好之后，就可以去看jexus配置php网站了。\n\njexus的网站配置文件夹一般路径就是/usr/jexus/siteconf/\n\n```\ncd /usr/jexus/siteconf/\n\nvi mywebSQL #创建网站配置文件\n\ncd .. \n\n./jexus restart\n\n```\n\n上面的mywebSQL里面就写网站配置了，主要是端口号/运行环境之类的配置。\n\n贴一下我的配置：\n\n```\n#仅供参考\n######################\n# Web Site: Default\n########################################\n\nport=2016\nroot=/ /var/www/mywebsql\nhosts=*    #OR your.com,*.your.com\nusephp =true\nfastcgi.add=php|socket:/var/run/jexus/phpsvr\n\n# addr=0.0.0.0\n# CheckQuery=false\n# NoLog=true\n# NoFile=/index.aspx\n# Keep_Alive=false\n# UseGZIP=true\n# UseHttps=true\n# DenyFrom=192.168.0.233, 192.168.1.*, 192.168.2.0/24\n# AllowFrom=192.168.*.*\n# DenyDirs=~/cgi, ~/upfiles\n# indexes=myindex.aspx\n# rewrite=^/.+?\\.(asp|php|cgi|pl|sh)$ /index.aspx\n\n# reproxy=/bbs/ http://192.168.1.112/bbs/\n\n# Jexus php fastcgi address is '/var/run/jexus/phpsvr'\n#######################################################\n# fastcgi.add=php|socket:/var/run/jexus/phpsvr\n\n# php-fpm listen address is '127.0.0.1:9000'\n############################################\n# fastcgi.add=php|tcp:127.0.0.1:9000\n\n```\n\n\n到这里，访问http://你的主机IP:上面配置的端口号 就能看到下面的页面了。\n\n![MywWebSQL登陆页](http://7xread.com1.z0.glb.clouddn.com/df3951c0-9d3d-4085-b577-743df68c1d98)\n\n\n输入账号密码就能登陆。\n\n\n###然而....\n我登陆的时候显示，系统提示：没有安装客户端库。\n\n###第五步 配置PHP MySQL库\n\n\n于是又跑去看了一下MyWebSQL的说明，文档上说可以在/install.php上面看配置。\n\n\n\n![这是配置好的效果图](http://7xread.com1.z0.glb.clouddn.com/cf8d88d8-fb5d-42f0-81cc-e0fbb566ebe5)\n\n显示：\n\nMySQL Client Library\tclient library is not installed\nMySQL improved functionality\tclient library is not installed\n\n\n好吧，PHP MySQL客户端库没有安装....\n\n那就安装咯。\n于是找到了下面一个文章：\n[ZH奶酪：Ubuntu 14.04安装LAMP(Linux，Apache，MySQL，PHP)](http://www.cnblogs.com/CheeseZH/p/4694135.html)\n\n安装一下基础库\n```\nsudo apt-get install php5 libapache2-mod-php5 php5-mcrypt php5-curl php5-imagick php5-cli\n\n```\n\n搜索一下还有什么库可以安装。\n\napt-cache search php5-\n\n\n![](http://7xread.com1.z0.glb.clouddn.com/7bac43bc-01ea-4ce0-ba4b-37a06a51fe3a)\n\n\n```\nsudo apt-get install php5 php5-mysqlnd \n\nsudo apt-get install php5 php5-mysqlnd-ms\n\n```\n\n接着重启一下jexus的网站，万事大吉。\n\n","slug":"ubuntu-jexus-mywebsql","published":1,"updated":"2016-10-15T05:20:25.009Z","comments":1,"photos":[],"link":"","_id":"cj0dyumxe001u6kunhot851vr","content":"<p>之前在阿里云上装了一个ubuntu，后来也没怎么用力，就挂这一个mysql数据库。最近在家里用MySQL Workbench 连接阿里云上面的MySQL的时候，连着过了一会就中断了。后来看了一圈回来才发现，目测是家里电信宽带的锅，不断给我动态分配IP地址….后来群里面的小伙伴说，搭个websql了事啦。听起来不错的想法，于是昨天就试了一下。</p>\n<p>之前在ubuntu上装过apache，后来为了跑asp.net，把apache停了，换成了jexus。<br>Jexus是国内.NET 跨平台大牛们写的一个web服务器，使用方便，很稳定，也在不断加入新特性。相关资料直接访问<a href=\"http://www.jexus.org/\" target=\"_blank\" rel=\"external\">www.jexus.org</a>。</p>\n<p>jexus是以mono为基础的，其实首先应该先配置mono的运行环境。</p>\n<p>###第一步 安装mono<br>相关资料链接：</p>\n<p><a href=\"http://www.linuxdot.net/bbsfile-3090\" target=\"_blank\" rel=\"external\">在Ubuntu操作系统上安装mono的具体方法</a></p>\n<p><a href=\"http://www.isvee.com/archives/763\" target=\"_blank\" rel=\"external\">Ubuntu 14.04 安装 Mono</a></p>\n<p>我的ubuntu老早之前就安装好了mono，这个就此瞥过咯。</p>\n<p>###第二步 安装jexus</p>\n<p><a href=\"http://www.linuxdot.net/bbsfile-3084\" target=\"_blank\" rel=\"external\">Jexus web server V5.1 安装配置要点</a></p>\n<p><a href=\"http://www.jexus.org/\" target=\"_blank\" rel=\"external\">jexus首页</a></p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">A、安装：</div><div class=\"line\">cd /tmp</div><div class=\"line\">wget linuxdot.net/down/jexus<span class=\"number\">-5.8</span><span class=\"number\">.1</span>.tar.gz </div><div class=\"line\">tar -zxvf jexus<span class=\"number\">-5.8</span><span class=\"number\">.1</span>.tar.gz </div><div class=\"line\">cd jexus<span class=\"number\">-5.8</span><span class=\"number\">.1</span> </div><div class=\"line\">sudo ./install </div><div class=\"line\"></div><div class=\"line\">B、更新</div><div class=\"line\">cd /tmp</div><div class=\"line\">sudo /usr/jexus/jws stop</div><div class=\"line\">wget linuxdot.net/down/jexus<span class=\"number\">-5.8</span><span class=\"number\">.1</span>.tar.gz</div><div class=\"line\">tar -zxvf jexus<span class=\"number\">-5.8</span><span class=\"number\">.1</span>.tar.gz</div><div class=\"line\">cd jexus<span class=\"number\">-5.8</span><span class=\"number\">.1</span></div><div class=\"line\">sudo ./upgrade</div></pre></td></tr></table></figure>\n<p>5.8.1差不多是现在最新版本了。</p>\n<p>###第三步 jexus 支持PHP</p>\n<p>先在ubuntu上安装一下PHP5-CGI.</p>\n<p><a href=\"http://www.linuxidc.com/Linux/2012-05/60172.htm\" target=\"_blank\" rel=\"external\">用 Jexus ASP.NET WEB服务器搭建 PHP 网站的具体方法</a></p>\n<p>总结来说就是下面两句：<br><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span></div><div class=\"line\"></div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> install php5-cgi</div></pre></td></tr></table></figure></p>\n<p>接着：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span>)修改“<span class=\"regexp\">/etc/</span>php.ini”文件:</div><div class=\"line\"></div><div class=\"line\">找到cgi.force_redirect=<span class=\"number\">1</span>一行，把前边的<span class=\"string\">\"#\"</span>号去掉，把值从<span class=\"number\">1</span>改为<span class=\"number\">0</span>，如：</div><div class=\"line\"></div><div class=\"line\">cgi.force_redirect=<span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">2</span>)修改jws.conf。打开jexus文件夹中的jws.conf，作如下配置：</div><div class=\"line\"></div><div class=\"line\">填写PHP-CGI程序路径和工作进程数。如：“php-fcgi.set=<span class=\"regexp\">/usr/</span>bin/php-cgi,<span class=\"number\">6</span>”。</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">3</span>)修改网站配置。在需要使用PHP的网站的配置文件中添加:</div><div class=\"line\"></div><div class=\"line\">fastcgi.add=php|<span class=\"string\">socket:</span><span class=\"regexp\">/var/</span>run<span class=\"regexp\">/jexus/</span>phpsvr</div></pre></td></tr></table></figure>\n<p><a href=\"http://www.cnblogs.com/shanyou/p/3369322.html\" target=\"_blank\" rel=\"external\">Jexus 支持PHP的三种方式-张善友</a></p>\n<p>搞完上面这些，理论上你的jexus已经能跑PHP网站了。</p>\n<p>###第四步 安装mywebsql</p>\n<p><a href=\"http://mywebsql.net/\" target=\"_blank\" rel=\"external\">mywebsql首页</a></p>\n<p>mywebsql跑起来应该是下图的：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/7d902b94-f132-4041-84fa-78f044f91358\" alt=\"mywebsql效果图\"></p>\n<p><a href=\"https://sourceforge.net/projects/mywebsql/files/stable/mywebsql-3.6.zip/download\" target=\"_blank\" rel=\"external\">下载地址</a></p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">cd</span> /tmp</div><div class=\"line\"></div><div class=\"line\">wget https:<span class=\"comment\">//sourceforge.net/projects/mywebsql/files/stable/mywebsql-3.6.zip</span></div><div class=\"line\"></div><div class=\"line\">cp mywebsql-3.6.<span class=\"keyword\">zip</span> /<span class=\"keyword\">var</span>/www </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">cd</span> /<span class=\"keyword\">var</span>/www</div><div class=\"line\"></div><div class=\"line\">tar -zxvf mywebsql-3.6.<span class=\"keyword\">zip</span></div></pre></td></tr></table></figure>\n<p>把mywebsql网站文件弄好之后，就可以去看jexus配置php网站了。</p>\n<p>jexus的网站配置文件夹一般路径就是/usr/jexus/siteconf/</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd <span class=\"regexp\">/usr/</span>jexus<span class=\"regexp\">/siteconf/</span></div><div class=\"line\"></div><div class=\"line\">vi mywebSQL <span class=\"comment\">#创建网站配置文件</span></div><div class=\"line\"></div><div class=\"line\">cd .. </div><div class=\"line\"></div><div class=\"line\">.<span class=\"regexp\">/jexus restart</span></div></pre></td></tr></table></figure>\n<p>上面的mywebSQL里面就写网站配置了，主要是端口号/运行环境之类的配置。</p>\n<p>贴一下我的配置：</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#仅供参考</span></div><div class=\"line\"><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">####</span></div><div class=\"line\"># Web Site: Default</div><div class=\"line\">###<span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">#</span></div><div class=\"line\"></div><div class=\"line\">port=<span class=\"number\">2016</span></div><div class=\"line\">root=/ /var/www/mywebsql</div><div class=\"line\">hosts=*    <span class=\"comment\">#OR your.com,*.your.com</span></div><div class=\"line\">usephp =<span class=\"literal\">true</span></div><div class=\"line\">fastcgi.add=php|socket:/var/run/jexus/phpsvr</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># addr=0.0.0.0</span></div><div class=\"line\"><span class=\"comment\"># CheckQuery=false</span></div><div class=\"line\"><span class=\"comment\"># NoLog=true</span></div><div class=\"line\"><span class=\"comment\"># NoFile=/index.aspx</span></div><div class=\"line\"><span class=\"comment\"># Keep_Alive=false</span></div><div class=\"line\"><span class=\"comment\"># UseGZIP=true</span></div><div class=\"line\"><span class=\"comment\"># UseHttps=true</span></div><div class=\"line\"><span class=\"comment\"># DenyFrom=192.168.0.233, 192.168.1.*, 192.168.2.0/24</span></div><div class=\"line\"><span class=\"comment\"># AllowFrom=192.168.*.*</span></div><div class=\"line\"><span class=\"comment\"># DenyDirs=~/cgi, ~/upfiles</span></div><div class=\"line\"><span class=\"comment\"># indexes=myindex.aspx</span></div><div class=\"line\"><span class=\"comment\"># rewrite=^/.+?\\.(asp|php|cgi|pl|sh)$ /index.aspx</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># reproxy=/bbs/ http://192.168.1.112/bbs/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Jexus php fastcgi address is '/var/run/jexus/phpsvr'</span></div><div class=\"line\"><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># fastcgi.add=php|socket:/var/run/jexus/phpsvr</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># php-fpm listen address is '127.0.0.1:9000'</span></div><div class=\"line\"><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">##</span></div><div class=\"line\"><span class=\"comment\"># fastcgi.add=php|tcp:127.0.0.1:9000</span></div></pre></td></tr></table></figure>\n<p>到这里，访问<a href=\"http://你的主机IP:上面配置的端口号\" target=\"_blank\" rel=\"external\">http://你的主机IP:上面配置的端口号</a> 就能看到下面的页面了。</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/df3951c0-9d3d-4085-b577-743df68c1d98\" alt=\"MywWebSQL登陆页\"></p>\n<p>输入账号密码就能登陆。</p>\n<p>###然而….<br>我登陆的时候显示，系统提示：没有安装客户端库。</p>\n<p>###第五步 配置PHP MySQL库</p>\n<p>于是又跑去看了一下MyWebSQL的说明，文档上说可以在/install.php上面看配置。</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/cf8d88d8-fb5d-42f0-81cc-e0fbb566ebe5\" alt=\"这是配置好的效果图\"></p>\n<p>显示：</p>\n<p>MySQL Client Library    client library is not installed<br>MySQL improved functionality    client library is not installed</p>\n<p>好吧，PHP MySQL客户端库没有安装….</p>\n<p>那就安装咯。<br>于是找到了下面一个文章：<br><a href=\"http://www.cnblogs.com/CheeseZH/p/4694135.html\" target=\"_blank\" rel=\"external\">ZH奶酪：Ubuntu 14.04安装LAMP(Linux，Apache，MySQL，PHP)</a></p>\n<p>安装一下基础库<br><figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install php5 libapache2-mod-php5 php5-mcrypt php5-curl php5-imagick php5-cli</div></pre></td></tr></table></figure></p>\n<p>搜索一下还有什么库可以安装。</p>\n<p>apt-cache search php5-</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/7bac43bc-01ea-4ce0-ba4b-37a06a51fe3a\" alt=\"\"></p>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install php5 php5-mysqlnd </div><div class=\"line\"></div><div class=\"line\">sudo apt-get install php5 php5-mysqlnd-ms</div></pre></td></tr></table></figure>\n<p>接着重启一下jexus的网站，万事大吉。</p>\n","excerpt":"","more":"<p>之前在阿里云上装了一个ubuntu，后来也没怎么用力，就挂这一个mysql数据库。最近在家里用MySQL Workbench 连接阿里云上面的MySQL的时候，连着过了一会就中断了。后来看了一圈回来才发现，目测是家里电信宽带的锅，不断给我动态分配IP地址….后来群里面的小伙伴说，搭个websql了事啦。听起来不错的想法，于是昨天就试了一下。</p>\n<p>之前在ubuntu上装过apache，后来为了跑asp.net，把apache停了，换成了jexus。<br>Jexus是国内.NET 跨平台大牛们写的一个web服务器，使用方便，很稳定，也在不断加入新特性。相关资料直接访问<a href=\"http://www.jexus.org/\">www.jexus.org</a>。</p>\n<p>jexus是以mono为基础的，其实首先应该先配置mono的运行环境。</p>\n<p>###第一步 安装mono<br>相关资料链接：</p>\n<p><a href=\"http://www.linuxdot.net/bbsfile-3090\">在Ubuntu操作系统上安装mono的具体方法</a></p>\n<p><a href=\"http://www.isvee.com/archives/763\">Ubuntu 14.04 安装 Mono</a></p>\n<p>我的ubuntu老早之前就安装好了mono，这个就此瞥过咯。</p>\n<p>###第二步 安装jexus</p>\n<p><a href=\"http://www.linuxdot.net/bbsfile-3084\">Jexus web server V5.1 安装配置要点</a></p>\n<p><a href=\"http://www.jexus.org/\">jexus首页</a></p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">A、安装：</div><div class=\"line\">cd /tmp</div><div class=\"line\">wget linuxdot.net/down/jexus<span class=\"number\">-5.8</span><span class=\"number\">.1</span>.tar.gz </div><div class=\"line\">tar -zxvf jexus<span class=\"number\">-5.8</span><span class=\"number\">.1</span>.tar.gz </div><div class=\"line\">cd jexus<span class=\"number\">-5.8</span><span class=\"number\">.1</span> </div><div class=\"line\">sudo ./install </div><div class=\"line\"></div><div class=\"line\">B、更新</div><div class=\"line\">cd /tmp</div><div class=\"line\">sudo /usr/jexus/jws stop</div><div class=\"line\">wget linuxdot.net/down/jexus<span class=\"number\">-5.8</span><span class=\"number\">.1</span>.tar.gz</div><div class=\"line\">tar -zxvf jexus<span class=\"number\">-5.8</span><span class=\"number\">.1</span>.tar.gz</div><div class=\"line\">cd jexus<span class=\"number\">-5.8</span><span class=\"number\">.1</span></div><div class=\"line\">sudo ./upgrade</div></pre></td></tr></table></figure>\n<p>5.8.1差不多是现在最新版本了。</p>\n<p>###第三步 jexus 支持PHP</p>\n<p>先在ubuntu上安装一下PHP5-CGI.</p>\n<p><a href=\"http://www.linuxidc.com/Linux/2012-05/60172.htm\">用 Jexus ASP.NET WEB服务器搭建 PHP 网站的具体方法</a></p>\n<p>总结来说就是下面两句：<br><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span></div><div class=\"line\"></div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> install php5-cgi</div></pre></td></tr></table></figure></p>\n<p>接着：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span>)修改“<span class=\"regexp\">/etc/</span>php.ini”文件:</div><div class=\"line\"></div><div class=\"line\">找到cgi.force_redirect=<span class=\"number\">1</span>一行，把前边的<span class=\"string\">\"#\"</span>号去掉，把值从<span class=\"number\">1</span>改为<span class=\"number\">0</span>，如：</div><div class=\"line\"></div><div class=\"line\">cgi.force_redirect=<span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">2</span>)修改jws.conf。打开jexus文件夹中的jws.conf，作如下配置：</div><div class=\"line\"></div><div class=\"line\">填写PHP-CGI程序路径和工作进程数。如：“php-fcgi.set=<span class=\"regexp\">/usr/</span>bin/php-cgi,<span class=\"number\">6</span>”。</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">3</span>)修改网站配置。在需要使用PHP的网站的配置文件中添加:</div><div class=\"line\"></div><div class=\"line\">fastcgi.add=php|<span class=\"string\">socket:</span><span class=\"regexp\">/var/</span>run<span class=\"regexp\">/jexus/</span>phpsvr</div></pre></td></tr></table></figure>\n<p><a href=\"http://www.cnblogs.com/shanyou/p/3369322.html\">Jexus 支持PHP的三种方式-张善友</a></p>\n<p>搞完上面这些，理论上你的jexus已经能跑PHP网站了。</p>\n<p>###第四步 安装mywebsql</p>\n<p><a href=\"http://mywebsql.net/\">mywebsql首页</a></p>\n<p>mywebsql跑起来应该是下图的：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/7d902b94-f132-4041-84fa-78f044f91358\" alt=\"mywebsql效果图\"></p>\n<p><a href=\"https://sourceforge.net/projects/mywebsql/files/stable/mywebsql-3.6.zip/download\">下载地址</a></p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">cd</span> /tmp</div><div class=\"line\"></div><div class=\"line\">wget https:<span class=\"comment\">//sourceforge.net/projects/mywebsql/files/stable/mywebsql-3.6.zip</span></div><div class=\"line\"></div><div class=\"line\">cp mywebsql-3.6.<span class=\"keyword\">zip</span> /<span class=\"keyword\">var</span>/www </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">cd</span> /<span class=\"keyword\">var</span>/www</div><div class=\"line\"></div><div class=\"line\">tar -zxvf mywebsql-3.6.<span class=\"keyword\">zip</span></div></pre></td></tr></table></figure>\n<p>把mywebsql网站文件弄好之后，就可以去看jexus配置php网站了。</p>\n<p>jexus的网站配置文件夹一般路径就是/usr/jexus/siteconf/</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd <span class=\"regexp\">/usr/</span>jexus<span class=\"regexp\">/siteconf/</span></div><div class=\"line\"></div><div class=\"line\">vi mywebSQL <span class=\"comment\">#创建网站配置文件</span></div><div class=\"line\"></div><div class=\"line\">cd .. </div><div class=\"line\"></div><div class=\"line\">.<span class=\"regexp\">/jexus restart</span></div></pre></td></tr></table></figure>\n<p>上面的mywebSQL里面就写网站配置了，主要是端口号/运行环境之类的配置。</p>\n<p>贴一下我的配置：</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#仅供参考</span></div><div class=\"line\"><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">####</div><div class=\"line\"># Web Site: Default</div><div class=\"line\">###</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">#</span></div><div class=\"line\"></div><div class=\"line\">port=<span class=\"number\">2016</span></div><div class=\"line\">root=/ /var/www/mywebsql</div><div class=\"line\">hosts=*    <span class=\"comment\">#OR your.com,*.your.com</span></div><div class=\"line\">usephp =<span class=\"literal\">true</span></div><div class=\"line\">fastcgi.add=php|socket:/var/run/jexus/phpsvr</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># addr=0.0.0.0</span></div><div class=\"line\"><span class=\"comment\"># CheckQuery=false</span></div><div class=\"line\"><span class=\"comment\"># NoLog=true</span></div><div class=\"line\"><span class=\"comment\"># NoFile=/index.aspx</span></div><div class=\"line\"><span class=\"comment\"># Keep_Alive=false</span></div><div class=\"line\"><span class=\"comment\"># UseGZIP=true</span></div><div class=\"line\"><span class=\"comment\"># UseHttps=true</span></div><div class=\"line\"><span class=\"comment\"># DenyFrom=192.168.0.233, 192.168.1.*, 192.168.2.0/24</span></div><div class=\"line\"><span class=\"comment\"># AllowFrom=192.168.*.*</span></div><div class=\"line\"><span class=\"comment\"># DenyDirs=~/cgi, ~/upfiles</span></div><div class=\"line\"><span class=\"comment\"># indexes=myindex.aspx</span></div><div class=\"line\"><span class=\"comment\"># rewrite=^/.+?\\.(asp|php|cgi|pl|sh)$ /index.aspx</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># reproxy=/bbs/ http://192.168.1.112/bbs/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Jexus php fastcgi address is '/var/run/jexus/phpsvr'</span></div><div class=\"line\"><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># fastcgi.add=php|socket:/var/run/jexus/phpsvr</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># php-fpm listen address is '127.0.0.1:9000'</span></div><div class=\"line\"><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">######</span><span class=\"comment\">##</span></div><div class=\"line\"><span class=\"comment\"># fastcgi.add=php|tcp:127.0.0.1:9000</span></div></pre></td></tr></table></figure>\n<p>到这里，访问<a href=\"http://你的主机IP:上面配置的端口号\">http://你的主机IP:上面配置的端口号</a> 就能看到下面的页面了。</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/df3951c0-9d3d-4085-b577-743df68c1d98\" alt=\"MywWebSQL登陆页\"></p>\n<p>输入账号密码就能登陆。</p>\n<p>###然而….<br>我登陆的时候显示，系统提示：没有安装客户端库。</p>\n<p>###第五步 配置PHP MySQL库</p>\n<p>于是又跑去看了一下MyWebSQL的说明，文档上说可以在/install.php上面看配置。</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/cf8d88d8-fb5d-42f0-81cc-e0fbb566ebe5\" alt=\"这是配置好的效果图\"></p>\n<p>显示：</p>\n<p>MySQL Client Library    client library is not installed<br>MySQL improved functionality    client library is not installed</p>\n<p>好吧，PHP MySQL客户端库没有安装….</p>\n<p>那就安装咯。<br>于是找到了下面一个文章：<br><a href=\"http://www.cnblogs.com/CheeseZH/p/4694135.html\">ZH奶酪：Ubuntu 14.04安装LAMP(Linux，Apache，MySQL，PHP)</a></p>\n<p>安装一下基础库<br><figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install php5 libapache2-mod-php5 php5-mcrypt php5-curl php5-imagick php5-cli</div></pre></td></tr></table></figure></p>\n<p>搜索一下还有什么库可以安装。</p>\n<p>apt-cache search php5-</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/7bac43bc-01ea-4ce0-ba4b-37a06a51fe3a\" alt=\"\"></p>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install php5 php5-mysqlnd </div><div class=\"line\"></div><div class=\"line\">sudo apt-get install php5 php5-mysqlnd-ms</div></pre></td></tr></table></figure>\n<p>接着重启一下jexus的网站，万事大吉。</p>\n"},{"layout":"post","title":"VS快捷键（转载）","date":"2016-10-13T16:00:00.000Z","_content":"原文：[http://www.cnblogs.com/xiaofeixiang/p/3785167.html](http://www.cnblogs.com/xiaofeixiang/p/3785167.html)\n\nctrl+s         保存（这个确实很简单，要说常用，这玩意绝对排名第一）\n\nctrl+Shift+S   保存所有VS中打开的所有文件\n\nctrl+O         打开新文件\n\nctrl+Shift+O   打开项目\n\nctrl+Shift+A   当前项目中添加新建项\n\nctrl+F4        关闭当前打开页\n\nctrl+F6        跳到下一个窗口\n\nctrl+Shift+F6  跳到前一个打开的窗口\n\nF12            转到函数定义实现处，或者转到变量定义处（一堆代码中使用这个键确实逻辑会更清晰一点）\n\nctrl+-         这个相对来说跟F12是配套使用的，F12到函数定义，然后返回原代码中继续查看\n\nshift+ctrl+-   相对于上一个步骤，这个可以再次转到函数定义的地方\n\nctrl+tab       页面切换，打开页面过多的话，切换用的还是比较多的\n\nctrl+F         搜索，查找，功能简单粗暴有的时候比很高效\n\nctrl+F3        在选中区域搜索\n\nctrl+K，ctrl+D 整个文档格式化\n\nctrl+K,ctrl+F  格式化选中部分代码\n\nctrl+K，ctrl+C  代码注释\n\nctrl+K，ctrl+U  取消代码注释\n\nctrl+L          删除，删除当前行或者删除选中行\n\nShift+Alt+Enter 当前代码区域全屏，再按一次取消全屏\n\nctrl+M，ctrl+M  写代码都喜欢折叠，折叠之后还是还要打开的，可以试试这个快捷键\n\nctrl+space      代码补全\n\nctrl+Enter      假如现在当前行上面添加代码光标跳到当前行的上一行\n\nctrl+Shift+Enter假如现在当前行下面添加代码光标跳到当前行的下一行\n\nShift+F12       查找函数或者变量的所有引用\n\nctrl+g          查找行，跳转到你想要跳转的行数\n\nctrl+Shift+↑    向上查找引用\n\nctrl+Shift+↓    向下查找引用\n\n \n\nShift+Alt+↑    向上画一条直线，通常如果拷贝代码的时候有行号可以这样去除\n\n \n\nShift+Alt+↓    向下画一条直线，同上\n\nShift+↑         向上选中代码区域\n\nShift+↓         向下选中代码区域\n\n\n","source":"_posts/visualstudio_shortcut_key.md","raw":"---\nlayout: post\ntitle: VS快捷键（转载）\ncategory: memorandum\ndate: 2016-10-14 00:00:00\ntags:\n- Visual Studio\n---\n原文：[http://www.cnblogs.com/xiaofeixiang/p/3785167.html](http://www.cnblogs.com/xiaofeixiang/p/3785167.html)\n\nctrl+s         保存（这个确实很简单，要说常用，这玩意绝对排名第一）\n\nctrl+Shift+S   保存所有VS中打开的所有文件\n\nctrl+O         打开新文件\n\nctrl+Shift+O   打开项目\n\nctrl+Shift+A   当前项目中添加新建项\n\nctrl+F4        关闭当前打开页\n\nctrl+F6        跳到下一个窗口\n\nctrl+Shift+F6  跳到前一个打开的窗口\n\nF12            转到函数定义实现处，或者转到变量定义处（一堆代码中使用这个键确实逻辑会更清晰一点）\n\nctrl+-         这个相对来说跟F12是配套使用的，F12到函数定义，然后返回原代码中继续查看\n\nshift+ctrl+-   相对于上一个步骤，这个可以再次转到函数定义的地方\n\nctrl+tab       页面切换，打开页面过多的话，切换用的还是比较多的\n\nctrl+F         搜索，查找，功能简单粗暴有的时候比很高效\n\nctrl+F3        在选中区域搜索\n\nctrl+K，ctrl+D 整个文档格式化\n\nctrl+K,ctrl+F  格式化选中部分代码\n\nctrl+K，ctrl+C  代码注释\n\nctrl+K，ctrl+U  取消代码注释\n\nctrl+L          删除，删除当前行或者删除选中行\n\nShift+Alt+Enter 当前代码区域全屏，再按一次取消全屏\n\nctrl+M，ctrl+M  写代码都喜欢折叠，折叠之后还是还要打开的，可以试试这个快捷键\n\nctrl+space      代码补全\n\nctrl+Enter      假如现在当前行上面添加代码光标跳到当前行的上一行\n\nctrl+Shift+Enter假如现在当前行下面添加代码光标跳到当前行的下一行\n\nShift+F12       查找函数或者变量的所有引用\n\nctrl+g          查找行，跳转到你想要跳转的行数\n\nctrl+Shift+↑    向上查找引用\n\nctrl+Shift+↓    向下查找引用\n\n \n\nShift+Alt+↑    向上画一条直线，通常如果拷贝代码的时候有行号可以这样去除\n\n \n\nShift+Alt+↓    向下画一条直线，同上\n\nShift+↑         向上选中代码区域\n\nShift+↓         向下选中代码区域\n\n\n","slug":"visualstudio_shortcut_key","published":1,"updated":"2016-10-15T07:23:43.214Z","comments":1,"photos":[],"link":"","_id":"cj0dyumxg001y6kunb5hwp4gr","content":"<p>原文：<a href=\"http://www.cnblogs.com/xiaofeixiang/p/3785167.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/xiaofeixiang/p/3785167.html</a></p>\n<p>ctrl+s         保存（这个确实很简单，要说常用，这玩意绝对排名第一）</p>\n<p>ctrl+Shift+S   保存所有VS中打开的所有文件</p>\n<p>ctrl+O         打开新文件</p>\n<p>ctrl+Shift+O   打开项目</p>\n<p>ctrl+Shift+A   当前项目中添加新建项</p>\n<p>ctrl+F4        关闭当前打开页</p>\n<p>ctrl+F6        跳到下一个窗口</p>\n<p>ctrl+Shift+F6  跳到前一个打开的窗口</p>\n<p>F12            转到函数定义实现处，或者转到变量定义处（一堆代码中使用这个键确实逻辑会更清晰一点）</p>\n<p>ctrl+-         这个相对来说跟F12是配套使用的，F12到函数定义，然后返回原代码中继续查看</p>\n<p>shift+ctrl+-   相对于上一个步骤，这个可以再次转到函数定义的地方</p>\n<p>ctrl+tab       页面切换，打开页面过多的话，切换用的还是比较多的</p>\n<p>ctrl+F         搜索，查找，功能简单粗暴有的时候比很高效</p>\n<p>ctrl+F3        在选中区域搜索</p>\n<p>ctrl+K，ctrl+D 整个文档格式化</p>\n<p>ctrl+K,ctrl+F  格式化选中部分代码</p>\n<p>ctrl+K，ctrl+C  代码注释</p>\n<p>ctrl+K，ctrl+U  取消代码注释</p>\n<p>ctrl+L          删除，删除当前行或者删除选中行</p>\n<p>Shift+Alt+Enter 当前代码区域全屏，再按一次取消全屏</p>\n<p>ctrl+M，ctrl+M  写代码都喜欢折叠，折叠之后还是还要打开的，可以试试这个快捷键</p>\n<p>ctrl+space      代码补全</p>\n<p>ctrl+Enter      假如现在当前行上面添加代码光标跳到当前行的上一行</p>\n<p>ctrl+Shift+Enter假如现在当前行下面添加代码光标跳到当前行的下一行</p>\n<p>Shift+F12       查找函数或者变量的所有引用</p>\n<p>ctrl+g          查找行，跳转到你想要跳转的行数</p>\n<p>ctrl+Shift+↑    向上查找引用</p>\n<p>ctrl+Shift+↓    向下查找引用</p>\n<p>Shift+Alt+↑    向上画一条直线，通常如果拷贝代码的时候有行号可以这样去除</p>\n<p>Shift+Alt+↓    向下画一条直线，同上</p>\n<p>Shift+↑         向上选中代码区域</p>\n<p>Shift+↓         向下选中代码区域</p>\n","excerpt":"","more":"<p>原文：<a href=\"http://www.cnblogs.com/xiaofeixiang/p/3785167.html\">http://www.cnblogs.com/xiaofeixiang/p/3785167.html</a></p>\n<p>ctrl+s         保存（这个确实很简单，要说常用，这玩意绝对排名第一）</p>\n<p>ctrl+Shift+S   保存所有VS中打开的所有文件</p>\n<p>ctrl+O         打开新文件</p>\n<p>ctrl+Shift+O   打开项目</p>\n<p>ctrl+Shift+A   当前项目中添加新建项</p>\n<p>ctrl+F4        关闭当前打开页</p>\n<p>ctrl+F6        跳到下一个窗口</p>\n<p>ctrl+Shift+F6  跳到前一个打开的窗口</p>\n<p>F12            转到函数定义实现处，或者转到变量定义处（一堆代码中使用这个键确实逻辑会更清晰一点）</p>\n<p>ctrl+-         这个相对来说跟F12是配套使用的，F12到函数定义，然后返回原代码中继续查看</p>\n<p>shift+ctrl+-   相对于上一个步骤，这个可以再次转到函数定义的地方</p>\n<p>ctrl+tab       页面切换，打开页面过多的话，切换用的还是比较多的</p>\n<p>ctrl+F         搜索，查找，功能简单粗暴有的时候比很高效</p>\n<p>ctrl+F3        在选中区域搜索</p>\n<p>ctrl+K，ctrl+D 整个文档格式化</p>\n<p>ctrl+K,ctrl+F  格式化选中部分代码</p>\n<p>ctrl+K，ctrl+C  代码注释</p>\n<p>ctrl+K，ctrl+U  取消代码注释</p>\n<p>ctrl+L          删除，删除当前行或者删除选中行</p>\n<p>Shift+Alt+Enter 当前代码区域全屏，再按一次取消全屏</p>\n<p>ctrl+M，ctrl+M  写代码都喜欢折叠，折叠之后还是还要打开的，可以试试这个快捷键</p>\n<p>ctrl+space      代码补全</p>\n<p>ctrl+Enter      假如现在当前行上面添加代码光标跳到当前行的上一行</p>\n<p>ctrl+Shift+Enter假如现在当前行下面添加代码光标跳到当前行的下一行</p>\n<p>Shift+F12       查找函数或者变量的所有引用</p>\n<p>ctrl+g          查找行，跳转到你想要跳转的行数</p>\n<p>ctrl+Shift+↑    向上查找引用</p>\n<p>ctrl+Shift+↓    向下查找引用</p>\n<p>Shift+Alt+↑    向上画一条直线，通常如果拷贝代码的时候有行号可以这样去除</p>\n<p>Shift+Alt+↓    向下画一条直线，同上</p>\n<p>Shift+↑         向上选中代码区域</p>\n<p>Shift+↓         向下选中代码区域</p>\n"},{"layout":"post","title":"用Visual Studio Code Debug世界上最好的语言","date":"2017-03-16T16:00:00.000Z","_content":"\n#### 前言\n这阵子因缘巧合接手了一个辣鸡项目，是用世界上最好的拍黄片写的，项目基本是另一个小伙伴在撸码，我就兼职打杂和发布做点运维的工作。\n\n然后昨天项目上了测试版之后，一用起来Error满天飞了。让小伙伴查了很久都没有头绪，实在尴尬，只好自己动手了...\n\n作为一个后端狗，虽然知道PHP大体原理和框架，看着项目的业务逻辑也大体知道个所以然，在此之前还是没撸过代码的。\n\n看代码基本是Visual Studio Code或者HBuilder工具，本地跑代码很白痴的在用phpStudy。\n\nError出来了，第一反应就是debug咯...然后问了下小伙伴他以前怎么玩的，答曰：echo。\n\n一口老血都...\n\n查了下谷歌发现，Visual Studio Code + 插件是完全可以用来调试PHP的，所以就撸起了。\n\n\n#### Visual Studio Code + php-debug插件 + phpStudy + xdebug\n\n#### 安装Visual Studio Code\n\n首先肯定是先下载[Visual Studio Code](http://code.visualstudio.com/) 咯。\n\n安装好之后，随便在一个文件夹内鼠标“右键”，都能看到Open with code，打开之后如下图：\n\n![Open with code](http://7xread.com1.z0.glb.clouddn.com/b1cee12e-6215-4f04-9dea-3721400e238b)\n\n#### 安装Visual Studio Code php-debug插件\n装好VS Code之后，接下来是安装一下PHP-Debug插件了。我们在插件商城搜索一下php，排名第二的PHP Debug就是我们要的插件了。\n如下图：\n![PHP-Debug](http://7xread.com1.z0.glb.clouddn.com/3f798ea9-bba9-4768-9f58-14257ddc1999)\n\n装好了之后重启一下vs code即可。\n\n#### phpStudy\n对于我这种懒人来说，去配置什么PHP运行环境肯定是不愿意的，那么类似的集成环境有么？\n\n小伙伴和我说，你下个[phpStudy](http://www.phpstudy.net/)撸就算了，别去倒腾什么版本了。\n\n然后...\n\n![phpStudy](http://7xread.com1.z0.glb.clouddn.com/6c8ea274-9da5-4168-ba80-f6a0f6e173c3)\n\n下载好了安装完了，打开程序如下图：\n\n![phpStudy](http://7xread.com1.z0.glb.clouddn.com/7d2d12e2-783f-4402-8900-0315905c6948)\n\n看了下功能，其实这个软件就是集成了各种版本的PHP，可以方便切换PHP版本；同时自带一个Apache和MySQL，各种配置管理起来也挺方便的。\n（感觉dalao们应该不怎么会用这么白痴的东西，233...\n\n装好之后，启动一下服务，点击一下phpMyAdmin，看看它打开的网站是否能登录到本地的MySQL数据库。\n\n如果可以，说明PHP环境应该是正常的了；如果有问题，请自行谷歌了...\n\n接着切换PHP版本到意向版本，点击一下运行模式旁边的“切换版本”就可以选择版本了。\n\n#### xdebug设置\n[xdebug](https://xdebug.org/)是什么呢？\n```\nXdebug作为PHP调试工具，提供了丰富的调试函数，\n也可将Xdebug安装配置为zend studio、editplus调试PHP的第三方插件，\n\n通过开启自动跟踪(auto_trace)和分析器功能，可以直观的看到PHP源代码的性能数据，\n以便优化PHP代码。\n\n引用自：[PHP调试工具Xdebug安装配置教程]\n(http://www.cnblogs.com/qiantuwuliang/archive/2011/01/23/1942382.html)\n\n```\n我们可以在[xdebug.org](https://xdebug.org/)（自备梯子）上面下载到PHP各个版本的xdebug dll使用。\n\n不过当我打开phpStudy的php-ini打算手动开启debug的时候，非常高兴得发现已经phpStudy已自带了对应版本的xdebug，而且路径都配好了。\n\nphpStudy的php.ini在“其他选项-打开配置文件-php-ini”，如下图：\n\n![php.ini](http://7xread.com1.z0.glb.clouddn.com/76b103cd-399c-4bce-a716-098adbd4d212)\n\n把文档拉到最后，看得到xdebug的配置如下：\n\n![xdebug](http://7xread.com1.z0.glb.clouddn.com/00285d82-f76f-4fd8-8ba6-f429de194809)\n\nphpStudy已经帮我们配置好xdebug dll的路径了，我们只需要手动在zend_extension上面添加远程调试和自动启动配置即可，代码如下：\n\n```\n\nxdebug.remote_enable = 1\nxdebug.remote_autostart= 1\n\n```\n\n\n完整配置如下：\n```\n[XDebug]\n;xdebug.profiler_output_dir=\"C:\\phpStudy\\tmp\\xdebug\"\n;xdebug.trace_output_dir=\"C:\\phpStudy\\tmp\\xdebug\"\nxdebug.remote_enable = 1\nxdebug.remote_autostart= 1\n;你的PHP版本的php_xdebug.dll，phpStudy自动设置的\nzend_extension=\"C:\\phpStudy\\php\\php-5.5.38\\ext\\php_xdebug.dll\"\n```\n\n\n保存文件，重启一下phpStudy服务。\n\n\n#### Visual Studio Code 设置用户配置和调试配置\n\n这个时候，我们随便在PHP文件夹中打开vs code，vs code会自动提示我们：Cannot validate since no PHP executable is set. Use the setting 'php.validate.executablePath' to configure the PHP executable.\n\n嗯，没有设置PHP执行文件，可以通过设置php.validate.executablePath属性来配置它。\n\n这个在哪配置呢？在“文件-首选项-设置”，打开之后如下图：\n\n\n![php.validate.executablePath](http://7xread.com1.z0.glb.clouddn.com/df4428e9-9ef2-435a-a5f5-ae8bade00a39)\n\n这个php.validate.executablePath对应就是当前phpStudy中运行的php.exe的路径，可以在phpStudy-其他选项菜单-打开文件位置-PHP中找到此路径。\n\n保存好了之后，回到Visual Studio Code界面，转到Debug，选择添加配置，之后选择PHP，生成如下图的launch.json：\n\n![Listen for XDebug](http://7xread.com1.z0.glb.clouddn.com/e1b74467-9142-4a2f-bf5e-89aa2c2e0127)\n\n\n不用改任何东西，直接开撸...\n\n#### 开启Debug\n\n确保phpStudy启动了，网站也正常运行起来了,然后在Visual Studio Code中启动调试，打上要的断点，接着启动调试。\n\n如下图：\n\n![图片描述](http://7xread.com1.z0.glb.clouddn.com/7ac86cce-edc6-49a6-abb6-44f74c55a027)\n\n接着访问你要调试的页面对应的PHP代码，打上你的断点，华丽丽的Debug出来了...\n\n![异常](http://7xread.com1.z0.glb.clouddn.com/7f7739df-02d4-47e5-8e42-67b9bd9f75ee)\n\n\n![命中断点](http://7xread.com1.z0.glb.clouddn.com/41913030-362c-45cb-a187-08eed7728e8c)\n\n\nF10单步调试，F11跳入函数，F5直接运行之类的快捷键自己玩吧。\n\n\n#### 其他运行环境下的配置\n\n基本没什么区别，配置php.ini，下载到对应版本的xdebug.dll，php.validate.executablePath配置正确就完事。\n\n其他参考链接：\n\n1. [ 如何使用XDebug调试php](http://blog.csdn.net/ruihanchen/article/details/7705842)\n\n2. [XAMPP环境下用phpStorm+XDebug进行断点调试的配置](http://www.chenxuanyi.cn/xampp-phpstorm-xdebug.html)\n\n3. [PHPStorm下XDebug配置](http://blog.csdn.net/dc_726/article/details/9905517)\n\n\n#### PS:果然是世界上最好的语言...(逃\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/visualstudiocode_for_php_debug.md","raw":"---\nlayout: post\ntitle: 用Visual Studio Code Debug世界上最好的语言\ncategory: Visual Studio\ndate: 2017-03-17 00:00:00\ntags:\n- VisualStudio\n- PHP\n- Debug\n---\n\n#### 前言\n这阵子因缘巧合接手了一个辣鸡项目，是用世界上最好的拍黄片写的，项目基本是另一个小伙伴在撸码，我就兼职打杂和发布做点运维的工作。\n\n然后昨天项目上了测试版之后，一用起来Error满天飞了。让小伙伴查了很久都没有头绪，实在尴尬，只好自己动手了...\n\n作为一个后端狗，虽然知道PHP大体原理和框架，看着项目的业务逻辑也大体知道个所以然，在此之前还是没撸过代码的。\n\n看代码基本是Visual Studio Code或者HBuilder工具，本地跑代码很白痴的在用phpStudy。\n\nError出来了，第一反应就是debug咯...然后问了下小伙伴他以前怎么玩的，答曰：echo。\n\n一口老血都...\n\n查了下谷歌发现，Visual Studio Code + 插件是完全可以用来调试PHP的，所以就撸起了。\n\n\n#### Visual Studio Code + php-debug插件 + phpStudy + xdebug\n\n#### 安装Visual Studio Code\n\n首先肯定是先下载[Visual Studio Code](http://code.visualstudio.com/) 咯。\n\n安装好之后，随便在一个文件夹内鼠标“右键”，都能看到Open with code，打开之后如下图：\n\n![Open with code](http://7xread.com1.z0.glb.clouddn.com/b1cee12e-6215-4f04-9dea-3721400e238b)\n\n#### 安装Visual Studio Code php-debug插件\n装好VS Code之后，接下来是安装一下PHP-Debug插件了。我们在插件商城搜索一下php，排名第二的PHP Debug就是我们要的插件了。\n如下图：\n![PHP-Debug](http://7xread.com1.z0.glb.clouddn.com/3f798ea9-bba9-4768-9f58-14257ddc1999)\n\n装好了之后重启一下vs code即可。\n\n#### phpStudy\n对于我这种懒人来说，去配置什么PHP运行环境肯定是不愿意的，那么类似的集成环境有么？\n\n小伙伴和我说，你下个[phpStudy](http://www.phpstudy.net/)撸就算了，别去倒腾什么版本了。\n\n然后...\n\n![phpStudy](http://7xread.com1.z0.glb.clouddn.com/6c8ea274-9da5-4168-ba80-f6a0f6e173c3)\n\n下载好了安装完了，打开程序如下图：\n\n![phpStudy](http://7xread.com1.z0.glb.clouddn.com/7d2d12e2-783f-4402-8900-0315905c6948)\n\n看了下功能，其实这个软件就是集成了各种版本的PHP，可以方便切换PHP版本；同时自带一个Apache和MySQL，各种配置管理起来也挺方便的。\n（感觉dalao们应该不怎么会用这么白痴的东西，233...\n\n装好之后，启动一下服务，点击一下phpMyAdmin，看看它打开的网站是否能登录到本地的MySQL数据库。\n\n如果可以，说明PHP环境应该是正常的了；如果有问题，请自行谷歌了...\n\n接着切换PHP版本到意向版本，点击一下运行模式旁边的“切换版本”就可以选择版本了。\n\n#### xdebug设置\n[xdebug](https://xdebug.org/)是什么呢？\n```\nXdebug作为PHP调试工具，提供了丰富的调试函数，\n也可将Xdebug安装配置为zend studio、editplus调试PHP的第三方插件，\n\n通过开启自动跟踪(auto_trace)和分析器功能，可以直观的看到PHP源代码的性能数据，\n以便优化PHP代码。\n\n引用自：[PHP调试工具Xdebug安装配置教程]\n(http://www.cnblogs.com/qiantuwuliang/archive/2011/01/23/1942382.html)\n\n```\n我们可以在[xdebug.org](https://xdebug.org/)（自备梯子）上面下载到PHP各个版本的xdebug dll使用。\n\n不过当我打开phpStudy的php-ini打算手动开启debug的时候，非常高兴得发现已经phpStudy已自带了对应版本的xdebug，而且路径都配好了。\n\nphpStudy的php.ini在“其他选项-打开配置文件-php-ini”，如下图：\n\n![php.ini](http://7xread.com1.z0.glb.clouddn.com/76b103cd-399c-4bce-a716-098adbd4d212)\n\n把文档拉到最后，看得到xdebug的配置如下：\n\n![xdebug](http://7xread.com1.z0.glb.clouddn.com/00285d82-f76f-4fd8-8ba6-f429de194809)\n\nphpStudy已经帮我们配置好xdebug dll的路径了，我们只需要手动在zend_extension上面添加远程调试和自动启动配置即可，代码如下：\n\n```\n\nxdebug.remote_enable = 1\nxdebug.remote_autostart= 1\n\n```\n\n\n完整配置如下：\n```\n[XDebug]\n;xdebug.profiler_output_dir=\"C:\\phpStudy\\tmp\\xdebug\"\n;xdebug.trace_output_dir=\"C:\\phpStudy\\tmp\\xdebug\"\nxdebug.remote_enable = 1\nxdebug.remote_autostart= 1\n;你的PHP版本的php_xdebug.dll，phpStudy自动设置的\nzend_extension=\"C:\\phpStudy\\php\\php-5.5.38\\ext\\php_xdebug.dll\"\n```\n\n\n保存文件，重启一下phpStudy服务。\n\n\n#### Visual Studio Code 设置用户配置和调试配置\n\n这个时候，我们随便在PHP文件夹中打开vs code，vs code会自动提示我们：Cannot validate since no PHP executable is set. Use the setting 'php.validate.executablePath' to configure the PHP executable.\n\n嗯，没有设置PHP执行文件，可以通过设置php.validate.executablePath属性来配置它。\n\n这个在哪配置呢？在“文件-首选项-设置”，打开之后如下图：\n\n\n![php.validate.executablePath](http://7xread.com1.z0.glb.clouddn.com/df4428e9-9ef2-435a-a5f5-ae8bade00a39)\n\n这个php.validate.executablePath对应就是当前phpStudy中运行的php.exe的路径，可以在phpStudy-其他选项菜单-打开文件位置-PHP中找到此路径。\n\n保存好了之后，回到Visual Studio Code界面，转到Debug，选择添加配置，之后选择PHP，生成如下图的launch.json：\n\n![Listen for XDebug](http://7xread.com1.z0.glb.clouddn.com/e1b74467-9142-4a2f-bf5e-89aa2c2e0127)\n\n\n不用改任何东西，直接开撸...\n\n#### 开启Debug\n\n确保phpStudy启动了，网站也正常运行起来了,然后在Visual Studio Code中启动调试，打上要的断点，接着启动调试。\n\n如下图：\n\n![图片描述](http://7xread.com1.z0.glb.clouddn.com/7ac86cce-edc6-49a6-abb6-44f74c55a027)\n\n接着访问你要调试的页面对应的PHP代码，打上你的断点，华丽丽的Debug出来了...\n\n![异常](http://7xread.com1.z0.glb.clouddn.com/7f7739df-02d4-47e5-8e42-67b9bd9f75ee)\n\n\n![命中断点](http://7xread.com1.z0.glb.clouddn.com/41913030-362c-45cb-a187-08eed7728e8c)\n\n\nF10单步调试，F11跳入函数，F5直接运行之类的快捷键自己玩吧。\n\n\n#### 其他运行环境下的配置\n\n基本没什么区别，配置php.ini，下载到对应版本的xdebug.dll，php.validate.executablePath配置正确就完事。\n\n其他参考链接：\n\n1. [ 如何使用XDebug调试php](http://blog.csdn.net/ruihanchen/article/details/7705842)\n\n2. [XAMPP环境下用phpStorm+XDebug进行断点调试的配置](http://www.chenxuanyi.cn/xampp-phpstorm-xdebug.html)\n\n3. [PHPStorm下XDebug配置](http://blog.csdn.net/dc_726/article/details/9905517)\n\n\n#### PS:果然是世界上最好的语言...(逃\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"visualstudiocode_for_php_debug","published":1,"updated":"2017-03-17T15:16:12.408Z","_id":"cj0dyumxi00226kunwslpact8","comments":1,"photos":[],"link":"","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>这阵子因缘巧合接手了一个辣鸡项目，是用世界上最好的拍黄片写的，项目基本是另一个小伙伴在撸码，我就兼职打杂和发布做点运维的工作。</p>\n<p>然后昨天项目上了测试版之后，一用起来Error满天飞了。让小伙伴查了很久都没有头绪，实在尴尬，只好自己动手了…</p>\n<p>作为一个后端狗，虽然知道PHP大体原理和框架，看着项目的业务逻辑也大体知道个所以然，在此之前还是没撸过代码的。</p>\n<p>看代码基本是Visual Studio Code或者HBuilder工具，本地跑代码很白痴的在用phpStudy。</p>\n<p>Error出来了，第一反应就是debug咯…然后问了下小伙伴他以前怎么玩的，答曰：echo。</p>\n<p>一口老血都…</p>\n<p>查了下谷歌发现，Visual Studio Code + 插件是完全可以用来调试PHP的，所以就撸起了。</p>\n<h4 id=\"Visual-Studio-Code-php-debug插件-phpStudy-xdebug\"><a href=\"#Visual-Studio-Code-php-debug插件-phpStudy-xdebug\" class=\"headerlink\" title=\"Visual Studio Code + php-debug插件 + phpStudy + xdebug\"></a>Visual Studio Code + php-debug插件 + phpStudy + xdebug</h4><h4 id=\"安装Visual-Studio-Code\"><a href=\"#安装Visual-Studio-Code\" class=\"headerlink\" title=\"安装Visual Studio Code\"></a>安装Visual Studio Code</h4><p>首先肯定是先下载<a href=\"http://code.visualstudio.com/\" target=\"_blank\" rel=\"external\">Visual Studio Code</a> 咯。</p>\n<p>安装好之后，随便在一个文件夹内鼠标“右键”，都能看到Open with code，打开之后如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/b1cee12e-6215-4f04-9dea-3721400e238b\" alt=\"Open with code\"></p>\n<h4 id=\"安装Visual-Studio-Code-php-debug插件\"><a href=\"#安装Visual-Studio-Code-php-debug插件\" class=\"headerlink\" title=\"安装Visual Studio Code php-debug插件\"></a>安装Visual Studio Code php-debug插件</h4><p>装好VS Code之后，接下来是安装一下PHP-Debug插件了。我们在插件商城搜索一下php，排名第二的PHP Debug就是我们要的插件了。<br>如下图：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/3f798ea9-bba9-4768-9f58-14257ddc1999\" alt=\"PHP-Debug\"></p>\n<p>装好了之后重启一下vs code即可。</p>\n<h4 id=\"phpStudy\"><a href=\"#phpStudy\" class=\"headerlink\" title=\"phpStudy\"></a>phpStudy</h4><p>对于我这种懒人来说，去配置什么PHP运行环境肯定是不愿意的，那么类似的集成环境有么？</p>\n<p>小伙伴和我说，你下个<a href=\"http://www.phpstudy.net/\" target=\"_blank\" rel=\"external\">phpStudy</a>撸就算了，别去倒腾什么版本了。</p>\n<p>然后…</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/6c8ea274-9da5-4168-ba80-f6a0f6e173c3\" alt=\"phpStudy\"></p>\n<p>下载好了安装完了，打开程序如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/7d2d12e2-783f-4402-8900-0315905c6948\" alt=\"phpStudy\"></p>\n<p>看了下功能，其实这个软件就是集成了各种版本的PHP，可以方便切换PHP版本；同时自带一个Apache和MySQL，各种配置管理起来也挺方便的。<br>（感觉dalao们应该不怎么会用这么白痴的东西，233…</p>\n<p>装好之后，启动一下服务，点击一下phpMyAdmin，看看它打开的网站是否能登录到本地的MySQL数据库。</p>\n<p>如果可以，说明PHP环境应该是正常的了；如果有问题，请自行谷歌了…</p>\n<p>接着切换PHP版本到意向版本，点击一下运行模式旁边的“切换版本”就可以选择版本了。</p>\n<h4 id=\"xdebug设置\"><a href=\"#xdebug设置\" class=\"headerlink\" title=\"xdebug设置\"></a>xdebug设置</h4><p><a href=\"https://xdebug.org/\" target=\"_blank\" rel=\"external\">xdebug</a>是什么呢？<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Xdebug作为PHP调试工具，提供了丰富的调试函数，</div><div class=\"line\">也可将Xdebug安装配置为zend studio、editplus调试PHP的第三方插件，</div><div class=\"line\"></div><div class=\"line\">通过开启自动跟踪(auto_trace)和分析器功能，可以直观的看到PHP源代码的性能数据，</div><div class=\"line\">以便优化PHP代码。</div><div class=\"line\"></div><div class=\"line\">引用自：[PHP调试工具Xdebug安装配置教程]</div><div class=\"line\">(http:<span class=\"regexp\">//</span>www.cnblogs.com<span class=\"regexp\">/qiantuwuliang/</span>archive<span class=\"regexp\">/2011/</span><span class=\"number\">01</span><span class=\"regexp\">/23/</span><span class=\"number\">1942382</span>.html)</div></pre></td></tr></table></figure></p>\n<p>我们可以在<a href=\"https://xdebug.org/\" target=\"_blank\" rel=\"external\">xdebug.org</a>（自备梯子）上面下载到PHP各个版本的xdebug dll使用。</p>\n<p>不过当我打开phpStudy的php-ini打算手动开启debug的时候，非常高兴得发现已经phpStudy已自带了对应版本的xdebug，而且路径都配好了。</p>\n<p>phpStudy的php.ini在“其他选项-打开配置文件-php-ini”，如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/76b103cd-399c-4bce-a716-098adbd4d212\" alt=\"php.ini\"></p>\n<p>把文档拉到最后，看得到xdebug的配置如下：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/00285d82-f76f-4fd8-8ba6-f429de194809\" alt=\"xdebug\"></p>\n<p>phpStudy已经帮我们配置好xdebug dll的路径了，我们只需要手动在zend_extension上面添加远程调试和自动启动配置即可，代码如下：</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">xdebug.remote_enable = <span class=\"number\">1</span></div><div class=\"line\">xdebug.remote_autostart= <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>完整配置如下：<br><figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">[XDebug]</div><div class=\"line\">;xdebug.profiler_output_dir=\"C:<span class=\"symbol\">\\p</span>hpStudy<span class=\"symbol\">\\t</span>mp<span class=\"symbol\">\\x</span>debug\"</div><div class=\"line\">;xdebug.trace_output_dir=\"C:<span class=\"symbol\">\\p</span>hpStudy<span class=\"symbol\">\\t</span>mp<span class=\"symbol\">\\x</span>debug\"</div><div class=\"line\">xdebug.remote_enable = 1</div><div class=\"line\">xdebug.remote_autostart= 1</div><div class=\"line\">;你的PHP版本的php_xdebug.dll，phpStudy自动设置的</div><div class=\"line\">zend_extension=\"C:<span class=\"symbol\">\\p</span>hpStudy<span class=\"symbol\">\\p</span>hp<span class=\"symbol\">\\p</span>hp-5.5.38<span class=\"symbol\">\\e</span>xt<span class=\"symbol\">\\p</span>hp_xdebug.dll\"</div></pre></td></tr></table></figure></p>\n<p>保存文件，重启一下phpStudy服务。</p>\n<h4 id=\"Visual-Studio-Code-设置用户配置和调试配置\"><a href=\"#Visual-Studio-Code-设置用户配置和调试配置\" class=\"headerlink\" title=\"Visual Studio Code 设置用户配置和调试配置\"></a>Visual Studio Code 设置用户配置和调试配置</h4><p>这个时候，我们随便在PHP文件夹中打开vs code，vs code会自动提示我们：Cannot validate since no PHP executable is set. Use the setting ‘php.validate.executablePath’ to configure the PHP executable.</p>\n<p>嗯，没有设置PHP执行文件，可以通过设置php.validate.executablePath属性来配置它。</p>\n<p>这个在哪配置呢？在“文件-首选项-设置”，打开之后如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/df4428e9-9ef2-435a-a5f5-ae8bade00a39\" alt=\"php.validate.executablePath\"></p>\n<p>这个php.validate.executablePath对应就是当前phpStudy中运行的php.exe的路径，可以在phpStudy-其他选项菜单-打开文件位置-PHP中找到此路径。</p>\n<p>保存好了之后，回到Visual Studio Code界面，转到Debug，选择添加配置，之后选择PHP，生成如下图的launch.json：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/e1b74467-9142-4a2f-bf5e-89aa2c2e0127\" alt=\"Listen for XDebug\"></p>\n<p>不用改任何东西，直接开撸…</p>\n<h4 id=\"开启Debug\"><a href=\"#开启Debug\" class=\"headerlink\" title=\"开启Debug\"></a>开启Debug</h4><p>确保phpStudy启动了，网站也正常运行起来了,然后在Visual Studio Code中启动调试，打上要的断点，接着启动调试。</p>\n<p>如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/7ac86cce-edc6-49a6-abb6-44f74c55a027\" alt=\"图片描述\"></p>\n<p>接着访问你要调试的页面对应的PHP代码，打上你的断点，华丽丽的Debug出来了…</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/7f7739df-02d4-47e5-8e42-67b9bd9f75ee\" alt=\"异常\"></p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/41913030-362c-45cb-a187-08eed7728e8c\" alt=\"命中断点\"></p>\n<p>F10单步调试，F11跳入函数，F5直接运行之类的快捷键自己玩吧。</p>\n<h4 id=\"其他运行环境下的配置\"><a href=\"#其他运行环境下的配置\" class=\"headerlink\" title=\"其他运行环境下的配置\"></a>其他运行环境下的配置</h4><p>基本没什么区别，配置php.ini，下载到对应版本的xdebug.dll，php.validate.executablePath配置正确就完事。</p>\n<p>其他参考链接：</p>\n<ol>\n<li><p><a href=\"http://blog.csdn.net/ruihanchen/article/details/7705842\" target=\"_blank\" rel=\"external\"> 如何使用XDebug调试php</a></p>\n</li>\n<li><p><a href=\"http://www.chenxuanyi.cn/xampp-phpstorm-xdebug.html\" target=\"_blank\" rel=\"external\">XAMPP环境下用phpStorm+XDebug进行断点调试的配置</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/dc_726/article/details/9905517\" target=\"_blank\" rel=\"external\">PHPStorm下XDebug配置</a></p>\n</li>\n</ol>\n<h4 id=\"PS-果然是世界上最好的语言…-逃\"><a href=\"#PS-果然是世界上最好的语言…-逃\" class=\"headerlink\" title=\"PS:果然是世界上最好的语言…(逃\"></a>PS:果然是世界上最好的语言…(逃</h4>","excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>这阵子因缘巧合接手了一个辣鸡项目，是用世界上最好的拍黄片写的，项目基本是另一个小伙伴在撸码，我就兼职打杂和发布做点运维的工作。</p>\n<p>然后昨天项目上了测试版之后，一用起来Error满天飞了。让小伙伴查了很久都没有头绪，实在尴尬，只好自己动手了…</p>\n<p>作为一个后端狗，虽然知道PHP大体原理和框架，看着项目的业务逻辑也大体知道个所以然，在此之前还是没撸过代码的。</p>\n<p>看代码基本是Visual Studio Code或者HBuilder工具，本地跑代码很白痴的在用phpStudy。</p>\n<p>Error出来了，第一反应就是debug咯…然后问了下小伙伴他以前怎么玩的，答曰：echo。</p>\n<p>一口老血都…</p>\n<p>查了下谷歌发现，Visual Studio Code + 插件是完全可以用来调试PHP的，所以就撸起了。</p>\n<h4 id=\"Visual-Studio-Code-php-debug插件-phpStudy-xdebug\"><a href=\"#Visual-Studio-Code-php-debug插件-phpStudy-xdebug\" class=\"headerlink\" title=\"Visual Studio Code + php-debug插件 + phpStudy + xdebug\"></a>Visual Studio Code + php-debug插件 + phpStudy + xdebug</h4><h4 id=\"安装Visual-Studio-Code\"><a href=\"#安装Visual-Studio-Code\" class=\"headerlink\" title=\"安装Visual Studio Code\"></a>安装Visual Studio Code</h4><p>首先肯定是先下载<a href=\"http://code.visualstudio.com/\">Visual Studio Code</a> 咯。</p>\n<p>安装好之后，随便在一个文件夹内鼠标“右键”，都能看到Open with code，打开之后如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/b1cee12e-6215-4f04-9dea-3721400e238b\" alt=\"Open with code\"></p>\n<h4 id=\"安装Visual-Studio-Code-php-debug插件\"><a href=\"#安装Visual-Studio-Code-php-debug插件\" class=\"headerlink\" title=\"安装Visual Studio Code php-debug插件\"></a>安装Visual Studio Code php-debug插件</h4><p>装好VS Code之后，接下来是安装一下PHP-Debug插件了。我们在插件商城搜索一下php，排名第二的PHP Debug就是我们要的插件了。<br>如下图：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/3f798ea9-bba9-4768-9f58-14257ddc1999\" alt=\"PHP-Debug\"></p>\n<p>装好了之后重启一下vs code即可。</p>\n<h4 id=\"phpStudy\"><a href=\"#phpStudy\" class=\"headerlink\" title=\"phpStudy\"></a>phpStudy</h4><p>对于我这种懒人来说，去配置什么PHP运行环境肯定是不愿意的，那么类似的集成环境有么？</p>\n<p>小伙伴和我说，你下个<a href=\"http://www.phpstudy.net/\">phpStudy</a>撸就算了，别去倒腾什么版本了。</p>\n<p>然后…</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/6c8ea274-9da5-4168-ba80-f6a0f6e173c3\" alt=\"phpStudy\"></p>\n<p>下载好了安装完了，打开程序如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/7d2d12e2-783f-4402-8900-0315905c6948\" alt=\"phpStudy\"></p>\n<p>看了下功能，其实这个软件就是集成了各种版本的PHP，可以方便切换PHP版本；同时自带一个Apache和MySQL，各种配置管理起来也挺方便的。<br>（感觉dalao们应该不怎么会用这么白痴的东西，233…</p>\n<p>装好之后，启动一下服务，点击一下phpMyAdmin，看看它打开的网站是否能登录到本地的MySQL数据库。</p>\n<p>如果可以，说明PHP环境应该是正常的了；如果有问题，请自行谷歌了…</p>\n<p>接着切换PHP版本到意向版本，点击一下运行模式旁边的“切换版本”就可以选择版本了。</p>\n<h4 id=\"xdebug设置\"><a href=\"#xdebug设置\" class=\"headerlink\" title=\"xdebug设置\"></a>xdebug设置</h4><p><a href=\"https://xdebug.org/\">xdebug</a>是什么呢？<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Xdebug作为PHP调试工具，提供了丰富的调试函数，</div><div class=\"line\">也可将Xdebug安装配置为zend studio、editplus调试PHP的第三方插件，</div><div class=\"line\"></div><div class=\"line\">通过开启自动跟踪(auto_trace)和分析器功能，可以直观的看到PHP源代码的性能数据，</div><div class=\"line\">以便优化PHP代码。</div><div class=\"line\"></div><div class=\"line\">引用自：[PHP调试工具Xdebug安装配置教程]</div><div class=\"line\">(http:<span class=\"regexp\">//</span>www.cnblogs.com<span class=\"regexp\">/qiantuwuliang/</span>archive<span class=\"regexp\">/2011/</span><span class=\"number\">01</span><span class=\"regexp\">/23/</span><span class=\"number\">1942382</span>.html)</div></pre></td></tr></table></figure></p>\n<p>我们可以在<a href=\"https://xdebug.org/\">xdebug.org</a>（自备梯子）上面下载到PHP各个版本的xdebug dll使用。</p>\n<p>不过当我打开phpStudy的php-ini打算手动开启debug的时候，非常高兴得发现已经phpStudy已自带了对应版本的xdebug，而且路径都配好了。</p>\n<p>phpStudy的php.ini在“其他选项-打开配置文件-php-ini”，如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/76b103cd-399c-4bce-a716-098adbd4d212\" alt=\"php.ini\"></p>\n<p>把文档拉到最后，看得到xdebug的配置如下：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/00285d82-f76f-4fd8-8ba6-f429de194809\" alt=\"xdebug\"></p>\n<p>phpStudy已经帮我们配置好xdebug dll的路径了，我们只需要手动在zend_extension上面添加远程调试和自动启动配置即可，代码如下：</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">xdebug.remote_enable = <span class=\"number\">1</span></div><div class=\"line\">xdebug.remote_autostart= <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>完整配置如下：<br><figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">[XDebug]</div><div class=\"line\">;xdebug.profiler_output_dir=\"C:<span class=\"symbol\">\\p</span>hpStudy<span class=\"symbol\">\\t</span>mp<span class=\"symbol\">\\x</span>debug\"</div><div class=\"line\">;xdebug.trace_output_dir=\"C:<span class=\"symbol\">\\p</span>hpStudy<span class=\"symbol\">\\t</span>mp<span class=\"symbol\">\\x</span>debug\"</div><div class=\"line\">xdebug.remote_enable = 1</div><div class=\"line\">xdebug.remote_autostart= 1</div><div class=\"line\">;你的PHP版本的php_xdebug.dll，phpStudy自动设置的</div><div class=\"line\">zend_extension=\"C:<span class=\"symbol\">\\p</span>hpStudy<span class=\"symbol\">\\p</span>hp<span class=\"symbol\">\\p</span>hp-5.5.38<span class=\"symbol\">\\e</span>xt<span class=\"symbol\">\\p</span>hp_xdebug.dll\"</div></pre></td></tr></table></figure></p>\n<p>保存文件，重启一下phpStudy服务。</p>\n<h4 id=\"Visual-Studio-Code-设置用户配置和调试配置\"><a href=\"#Visual-Studio-Code-设置用户配置和调试配置\" class=\"headerlink\" title=\"Visual Studio Code 设置用户配置和调试配置\"></a>Visual Studio Code 设置用户配置和调试配置</h4><p>这个时候，我们随便在PHP文件夹中打开vs code，vs code会自动提示我们：Cannot validate since no PHP executable is set. Use the setting ‘php.validate.executablePath’ to configure the PHP executable.</p>\n<p>嗯，没有设置PHP执行文件，可以通过设置php.validate.executablePath属性来配置它。</p>\n<p>这个在哪配置呢？在“文件-首选项-设置”，打开之后如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/df4428e9-9ef2-435a-a5f5-ae8bade00a39\" alt=\"php.validate.executablePath\"></p>\n<p>这个php.validate.executablePath对应就是当前phpStudy中运行的php.exe的路径，可以在phpStudy-其他选项菜单-打开文件位置-PHP中找到此路径。</p>\n<p>保存好了之后，回到Visual Studio Code界面，转到Debug，选择添加配置，之后选择PHP，生成如下图的launch.json：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/e1b74467-9142-4a2f-bf5e-89aa2c2e0127\" alt=\"Listen for XDebug\"></p>\n<p>不用改任何东西，直接开撸…</p>\n<h4 id=\"开启Debug\"><a href=\"#开启Debug\" class=\"headerlink\" title=\"开启Debug\"></a>开启Debug</h4><p>确保phpStudy启动了，网站也正常运行起来了,然后在Visual Studio Code中启动调试，打上要的断点，接着启动调试。</p>\n<p>如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/7ac86cce-edc6-49a6-abb6-44f74c55a027\" alt=\"图片描述\"></p>\n<p>接着访问你要调试的页面对应的PHP代码，打上你的断点，华丽丽的Debug出来了…</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/7f7739df-02d4-47e5-8e42-67b9bd9f75ee\" alt=\"异常\"></p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/41913030-362c-45cb-a187-08eed7728e8c\" alt=\"命中断点\"></p>\n<p>F10单步调试，F11跳入函数，F5直接运行之类的快捷键自己玩吧。</p>\n<h4 id=\"其他运行环境下的配置\"><a href=\"#其他运行环境下的配置\" class=\"headerlink\" title=\"其他运行环境下的配置\"></a>其他运行环境下的配置</h4><p>基本没什么区别，配置php.ini，下载到对应版本的xdebug.dll，php.validate.executablePath配置正确就完事。</p>\n<p>其他参考链接：</p>\n<ol>\n<li><p><a href=\"http://blog.csdn.net/ruihanchen/article/details/7705842\"> 如何使用XDebug调试php</a></p>\n</li>\n<li><p><a href=\"http://www.chenxuanyi.cn/xampp-phpstorm-xdebug.html\">XAMPP环境下用phpStorm+XDebug进行断点调试的配置</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/dc_726/article/details/9905517\">PHPStorm下XDebug配置</a></p>\n</li>\n</ol>\n<h4 id=\"PS-果然是世界上最好的语言…-逃\"><a href=\"#PS-果然是世界上最好的语言…-逃\" class=\"headerlink\" title=\"PS:果然是世界上最好的语言…(逃\"></a>PS:果然是世界上最好的语言…(逃</h4>"},{"layout":"post","title":"ASP.NET MVC 微信JS-SDK认证","date":"2016-10-31T16:00:00.000Z","_content":"\n### 写在前面\n前阵子因为有个项目需要做微信自定义分享功能，因而去研究了下微信JS-SDK相关知识。\n\n此文做个简单的记(tu)录(cao)...\n\n### 开始\n所有的东西都从文档开始:[微信JSSDK说明文档](http://mp.weixin.qq.com/wiki/11/74ad127cc054f6b80759c40f77ec03db.html)\n\n![分享接口](http://7xread.com1.z0.glb.clouddn.com/44b1232e-9311-4abb-9200-6dd4936d7c47)\n\n\n项目需要用到的是[分享接口](http://mp.weixin.qq.com/wiki/11/74ad127cc054f6b80759c40f77ec03db.html#.E5.88.86.E4.BA.AB.E6.8E.A5.E5.8F.A3) 不过使用微信JS-SDK之前，需要做JS接口认证。\n\n认证如下：\n\n步骤一：绑定域名\n\n步骤二：引入JS文件\n\n步骤三：通过config接口注入权限验证配置\n\n步骤四：通过ready接口处理成功验证\n\n步骤五：通过error接口处理失败验证\n\n步骤一中允许使用域名/子域名，只要xx.com/xxx.txt或者xx.com/mp/xxx.txt能访问就好。域名认证通过之后，此域名下的所有端口的网站都可以使用JS-SDK。\n\n步骤二没什么问题，略过。\n\n步骤三最磨人，下面单独讲解。\n\n\n### config接口注入权限验证配置\n\n先来一段说明：\n```\n所有需要使用JS-SDK的页面必须先注入配置信息，否则将无法调用\n（同一个url仅需调用一次，对于变化url的SPA的web app可在每次url变化时进行调用,\n目前Android微信客户端不支持pushState的H5新特性，\n所以使用pushState来实现web app的页面会导致签名失败，此问题会在Android6.2中修复）。\n```\n\n```javascript\nwx.config({\n    debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，\n    //若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。\n    appId: '', // 必填，公众号的唯一标识\n    timestamp: , // 必填，生成签名的时间戳\n    nonceStr: '', // 必填，生成签名的随机串\n    signature: '',// 必填，签名，见附录1\n    jsApiList: [] // 必填，需要使用的JS接口列表，所有JS接口列表见附录2\n});\n```\n\n看到这里肯定懵逼了，这是都什么鬼...怎么玩啊。\n\n提示我们去看附录1...看完之后总结如下：\n\n1. 使用config接口注入权限验证配置，重点是生成合法的signatrue\n2. 生成signature需要通过appid和secret获取token\n3. 时间戳和调用接口URL必不可少\n4. 此操作需要服务端完成，不能使用客户端实现\n\n整个过程变成：\n\n1. 通过appid和secret获取access_token，接着使用token获取jsapi_ticket；\n\n2. 拿到jsapi_ticket之后，把jsapi_ticket、时间戳、随机字符串、接口调用页面URL 拼接成完整字符串，使用sha1算法加密得到signature。\n\n3. 最后返回至页面，在wx.config里面填入appid，上一步的时间戳timestamp，上一部的随机字符串、sha1拿到的signature，想要使用的JS接口。\n\n\n废话少说，直接上代码吧。\n\n### 代码时间\n\n```csharp\n    public class WeiXinController : Controller\n    {\n        public static readonly string appid =\n        System.Web.Configuration.WebConfigurationManager.AppSettings[\"wxappid\"];\n\n        public static readonly string secret =\n        System.Web.Configuration.WebConfigurationManager.AppSettings[\"wxsecret\"];\n\n        public static readonly bool isDedug =\n        System.Web.Configuration.WebConfigurationManager.AppSettings[\"IsDebug\"] ==\"true\";\n\n\n        public static string _ticket = \"\";\n\n        public static DateTime _lastTimestamp;\n\n\n        public ActionResult Info(string url,string noncestr)\n        {\n            if (string.IsNullOrEmpty(_ticket) || \n            _lastTimestamp == null || (_lastTimestamp - DateTime.Now).Milliseconds > 7200)\n            {\n                var resultString = HTTPHelper.GetHTMLByURL\n                (\"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=\"\n                    + appid + \"&secret=\" + secret);\n                dynamic resultValue = JsonConvert.DeserializeObject<dynamic>(resultString);\n                if (resultValue == null || resultValue.access_token == null \n                || resultValue.access_token.Value == null)\n                {\n                    return Json(new { issuccess = false, \n                    error = \"获取token失败\" });\n                }\n                var token = resultValue.access_token.Value;\n\n                resultString = HTTPHelper.GetHTMLByURL\n                (\"https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=\" + \n                token + \"&type=jsapi\");\n                dynamic ticketValue = JsonConvert.DeserializeObject<dynamic>(resultString);\n                if (ticketValue == null || ticketValue.errcode == null\n                || ticketValue.errcode.Value != 0 || ticketValue.ticket == null)\n                    return Json(new { issuccess = false,\n                    error = \"获取ticketValue失败\" });\n                _ticket = ticketValue.ticket.Value;\n                _lastTimestamp = DateTime.Now;\n                var timestamp = GetTimeStamp();\n                var hexString = string.Format(\"jsapi_ticket={0}&noncestr={3}&timestamp={1}&url={2}\",\n                _ticket, timestamp, url,noncestr);\n\n                return Json(new {\n                    issuccess = true, \n                    sha1value = GetSHA1Value(hexString), \n                    timestamp = timestamp, \n                    url = url, \n                    appid = appid, \n                    debug=isDedug,\n                    tiket=_ticket\n                });\n                \n            }\n            else\n            {\n                var timestamp = GetTimeStamp();\n                var hexString = string.Format(\"jsapi_ticket={0}&noncestr=1234567890123456&timestamp={1}&url={2}\",\n                   _ticket, timestamp, url);\n                return Json(new { \n                    issuccess = true, sha1value = GetSHA1Value(hexString),\n                    timestamp = timestamp, url = url,\n                    appid = appid, debug = isDedug,tiket = _ticket\n                });\n            }\n        }\n\n\n        private string GetSHA1Value(string sourceString)\n        {\n            var hash = SHA1.Create().ComputeHash(Encoding.UTF8.GetBytes(sourceString));\n            return string.Join(\"\", \n            hash.Select(b => b.ToString(\"x2\")).ToArray());\n        }\n\n        private static string GetTimeStamp()\n        {\n\n            TimeSpan ts = DateTime.Now - new DateTime(1970, 1, 1, 0, 0, 0, 0);\n\n            return Convert.ToInt64(ts.TotalSeconds).ToString();\n\n        }\n\n    }\n    \n    \n    \n    \n    public class HTTPHelper\n    {\n        public static string GetHTMLByURL(string url)\n        {\n            string htmlCode = string.Empty;\n            try\n            {\n                HttpWebRequest webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(url);\n                webRequest.Timeout = 30000;\n                webRequest.Method = \"GET\";\n                webRequest.UserAgent = \"Mozilla/4.0\";\n                webRequest.Headers.Add(\"Accept-Encoding\", \"gzip, deflate\");\n                HttpWebResponse webResponse = (System.Net.HttpWebResponse)webRequest.GetResponse();\n                //获取目标网站的编码格式\n                string contentype = webResponse.Headers[\"Content-Type\"];\n                Regex regex = new Regex(\"charset\\\\s*=\\\\s*[\\\\W]?\\\\s*([\\\\w-]+)\", RegexOptions.IgnoreCase);\n                if (webResponse.ContentEncoding.ToLower() == \"gzip\")//如果使用了GZip则先解压\n                {\n                    using (System.IO.Stream streamReceive = webResponse.GetResponseStream())\n                    {\n                        using (var zipStream = new System.IO.Compression.GZipStream(streamReceive, \n                        System.IO.Compression.CompressionMode.Decompress))\n                        {\n                            //匹配编码格式\n                            if (regex.IsMatch(contentype))\n                            {\n                                Encoding ending = Encoding.GetEncoding\n                                (regex.Match(contentype).Groups[1].Value.Trim());\n                                using (StreamReader sr = new System.IO.StreamReader(zipStream, ending))\n                                {\n                                    htmlCode = sr.ReadToEnd();\n                                }\n                            }\n                            else\n                            {\n                                using (StreamReader sr = new System.IO.StreamReader(zipStream, Encoding.UTF8))\n                                {\n                                    htmlCode = sr.ReadToEnd();\n                                }\n                            }\n                        }\n                    }\n                }\n                else\n                {\n                    using (System.IO.Stream streamReceive = webResponse.GetResponseStream())\n                    {\n                        var encoding = Encoding.Default;\n                        if (contentype.Contains(\"utf\"))\n                            encoding = Encoding.UTF8;\n                        using (System.IO.StreamReader sr = new System.IO.StreamReader(streamReceive, encoding))\n                        {\n                            htmlCode = sr.ReadToEnd();\n                        }\n\n                    }\n                }\n                return htmlCode;\n            }\n            catch (Exception ex)\n            {\n                return \"\";\n            }\n        }\n    }\n\n```\n\nPS：这里要注意缓存一下_ticket（即access_token），照微信文档说的，access_token两个小时内有效，不需要频繁调用。而且获取access_token的接口有调用次数的限制，如果超过了次数，就不允许调用了。\n\nPPS:建议noncestr和URL由前台传入比较适合，使用 var theWebUrl = window.location.href.split('#')[0] 获取URL，noncestr就随意了。\n\nPPPS:遇到诡异的invalid signature的时候，首先检查url参数，然后检查noncestr，再不行重启一下程序获取一个新的token回来继续玩。\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/webchat_JS_SDK.md","raw":"---\nlayout: post\ntitle: ASP.NET MVC 微信JS-SDK认证\ncategory: .net\ndate: 2016-11-01 00:00:00\ntags:\n- .net\n- javascript\n- \n---\n\n### 写在前面\n前阵子因为有个项目需要做微信自定义分享功能，因而去研究了下微信JS-SDK相关知识。\n\n此文做个简单的记(tu)录(cao)...\n\n### 开始\n所有的东西都从文档开始:[微信JSSDK说明文档](http://mp.weixin.qq.com/wiki/11/74ad127cc054f6b80759c40f77ec03db.html)\n\n![分享接口](http://7xread.com1.z0.glb.clouddn.com/44b1232e-9311-4abb-9200-6dd4936d7c47)\n\n\n项目需要用到的是[分享接口](http://mp.weixin.qq.com/wiki/11/74ad127cc054f6b80759c40f77ec03db.html#.E5.88.86.E4.BA.AB.E6.8E.A5.E5.8F.A3) 不过使用微信JS-SDK之前，需要做JS接口认证。\n\n认证如下：\n\n步骤一：绑定域名\n\n步骤二：引入JS文件\n\n步骤三：通过config接口注入权限验证配置\n\n步骤四：通过ready接口处理成功验证\n\n步骤五：通过error接口处理失败验证\n\n步骤一中允许使用域名/子域名，只要xx.com/xxx.txt或者xx.com/mp/xxx.txt能访问就好。域名认证通过之后，此域名下的所有端口的网站都可以使用JS-SDK。\n\n步骤二没什么问题，略过。\n\n步骤三最磨人，下面单独讲解。\n\n\n### config接口注入权限验证配置\n\n先来一段说明：\n```\n所有需要使用JS-SDK的页面必须先注入配置信息，否则将无法调用\n（同一个url仅需调用一次，对于变化url的SPA的web app可在每次url变化时进行调用,\n目前Android微信客户端不支持pushState的H5新特性，\n所以使用pushState来实现web app的页面会导致签名失败，此问题会在Android6.2中修复）。\n```\n\n```javascript\nwx.config({\n    debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，\n    //若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。\n    appId: '', // 必填，公众号的唯一标识\n    timestamp: , // 必填，生成签名的时间戳\n    nonceStr: '', // 必填，生成签名的随机串\n    signature: '',// 必填，签名，见附录1\n    jsApiList: [] // 必填，需要使用的JS接口列表，所有JS接口列表见附录2\n});\n```\n\n看到这里肯定懵逼了，这是都什么鬼...怎么玩啊。\n\n提示我们去看附录1...看完之后总结如下：\n\n1. 使用config接口注入权限验证配置，重点是生成合法的signatrue\n2. 生成signature需要通过appid和secret获取token\n3. 时间戳和调用接口URL必不可少\n4. 此操作需要服务端完成，不能使用客户端实现\n\n整个过程变成：\n\n1. 通过appid和secret获取access_token，接着使用token获取jsapi_ticket；\n\n2. 拿到jsapi_ticket之后，把jsapi_ticket、时间戳、随机字符串、接口调用页面URL 拼接成完整字符串，使用sha1算法加密得到signature。\n\n3. 最后返回至页面，在wx.config里面填入appid，上一步的时间戳timestamp，上一部的随机字符串、sha1拿到的signature，想要使用的JS接口。\n\n\n废话少说，直接上代码吧。\n\n### 代码时间\n\n```csharp\n    public class WeiXinController : Controller\n    {\n        public static readonly string appid =\n        System.Web.Configuration.WebConfigurationManager.AppSettings[\"wxappid\"];\n\n        public static readonly string secret =\n        System.Web.Configuration.WebConfigurationManager.AppSettings[\"wxsecret\"];\n\n        public static readonly bool isDedug =\n        System.Web.Configuration.WebConfigurationManager.AppSettings[\"IsDebug\"] ==\"true\";\n\n\n        public static string _ticket = \"\";\n\n        public static DateTime _lastTimestamp;\n\n\n        public ActionResult Info(string url,string noncestr)\n        {\n            if (string.IsNullOrEmpty(_ticket) || \n            _lastTimestamp == null || (_lastTimestamp - DateTime.Now).Milliseconds > 7200)\n            {\n                var resultString = HTTPHelper.GetHTMLByURL\n                (\"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=\"\n                    + appid + \"&secret=\" + secret);\n                dynamic resultValue = JsonConvert.DeserializeObject<dynamic>(resultString);\n                if (resultValue == null || resultValue.access_token == null \n                || resultValue.access_token.Value == null)\n                {\n                    return Json(new { issuccess = false, \n                    error = \"获取token失败\" });\n                }\n                var token = resultValue.access_token.Value;\n\n                resultString = HTTPHelper.GetHTMLByURL\n                (\"https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=\" + \n                token + \"&type=jsapi\");\n                dynamic ticketValue = JsonConvert.DeserializeObject<dynamic>(resultString);\n                if (ticketValue == null || ticketValue.errcode == null\n                || ticketValue.errcode.Value != 0 || ticketValue.ticket == null)\n                    return Json(new { issuccess = false,\n                    error = \"获取ticketValue失败\" });\n                _ticket = ticketValue.ticket.Value;\n                _lastTimestamp = DateTime.Now;\n                var timestamp = GetTimeStamp();\n                var hexString = string.Format(\"jsapi_ticket={0}&noncestr={3}&timestamp={1}&url={2}\",\n                _ticket, timestamp, url,noncestr);\n\n                return Json(new {\n                    issuccess = true, \n                    sha1value = GetSHA1Value(hexString), \n                    timestamp = timestamp, \n                    url = url, \n                    appid = appid, \n                    debug=isDedug,\n                    tiket=_ticket\n                });\n                \n            }\n            else\n            {\n                var timestamp = GetTimeStamp();\n                var hexString = string.Format(\"jsapi_ticket={0}&noncestr=1234567890123456&timestamp={1}&url={2}\",\n                   _ticket, timestamp, url);\n                return Json(new { \n                    issuccess = true, sha1value = GetSHA1Value(hexString),\n                    timestamp = timestamp, url = url,\n                    appid = appid, debug = isDedug,tiket = _ticket\n                });\n            }\n        }\n\n\n        private string GetSHA1Value(string sourceString)\n        {\n            var hash = SHA1.Create().ComputeHash(Encoding.UTF8.GetBytes(sourceString));\n            return string.Join(\"\", \n            hash.Select(b => b.ToString(\"x2\")).ToArray());\n        }\n\n        private static string GetTimeStamp()\n        {\n\n            TimeSpan ts = DateTime.Now - new DateTime(1970, 1, 1, 0, 0, 0, 0);\n\n            return Convert.ToInt64(ts.TotalSeconds).ToString();\n\n        }\n\n    }\n    \n    \n    \n    \n    public class HTTPHelper\n    {\n        public static string GetHTMLByURL(string url)\n        {\n            string htmlCode = string.Empty;\n            try\n            {\n                HttpWebRequest webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(url);\n                webRequest.Timeout = 30000;\n                webRequest.Method = \"GET\";\n                webRequest.UserAgent = \"Mozilla/4.0\";\n                webRequest.Headers.Add(\"Accept-Encoding\", \"gzip, deflate\");\n                HttpWebResponse webResponse = (System.Net.HttpWebResponse)webRequest.GetResponse();\n                //获取目标网站的编码格式\n                string contentype = webResponse.Headers[\"Content-Type\"];\n                Regex regex = new Regex(\"charset\\\\s*=\\\\s*[\\\\W]?\\\\s*([\\\\w-]+)\", RegexOptions.IgnoreCase);\n                if (webResponse.ContentEncoding.ToLower() == \"gzip\")//如果使用了GZip则先解压\n                {\n                    using (System.IO.Stream streamReceive = webResponse.GetResponseStream())\n                    {\n                        using (var zipStream = new System.IO.Compression.GZipStream(streamReceive, \n                        System.IO.Compression.CompressionMode.Decompress))\n                        {\n                            //匹配编码格式\n                            if (regex.IsMatch(contentype))\n                            {\n                                Encoding ending = Encoding.GetEncoding\n                                (regex.Match(contentype).Groups[1].Value.Trim());\n                                using (StreamReader sr = new System.IO.StreamReader(zipStream, ending))\n                                {\n                                    htmlCode = sr.ReadToEnd();\n                                }\n                            }\n                            else\n                            {\n                                using (StreamReader sr = new System.IO.StreamReader(zipStream, Encoding.UTF8))\n                                {\n                                    htmlCode = sr.ReadToEnd();\n                                }\n                            }\n                        }\n                    }\n                }\n                else\n                {\n                    using (System.IO.Stream streamReceive = webResponse.GetResponseStream())\n                    {\n                        var encoding = Encoding.Default;\n                        if (contentype.Contains(\"utf\"))\n                            encoding = Encoding.UTF8;\n                        using (System.IO.StreamReader sr = new System.IO.StreamReader(streamReceive, encoding))\n                        {\n                            htmlCode = sr.ReadToEnd();\n                        }\n\n                    }\n                }\n                return htmlCode;\n            }\n            catch (Exception ex)\n            {\n                return \"\";\n            }\n        }\n    }\n\n```\n\nPS：这里要注意缓存一下_ticket（即access_token），照微信文档说的，access_token两个小时内有效，不需要频繁调用。而且获取access_token的接口有调用次数的限制，如果超过了次数，就不允许调用了。\n\nPPS:建议noncestr和URL由前台传入比较适合，使用 var theWebUrl = window.location.href.split('#')[0] 获取URL，noncestr就随意了。\n\nPPPS:遇到诡异的invalid signature的时候，首先检查url参数，然后检查noncestr，再不行重启一下程序获取一个新的token回来继续玩。\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"webchat_JS_SDK","published":1,"updated":"2016-11-07T15:46:59.941Z","comments":1,"photos":[],"link":"","_id":"cj0dyumxk00256kunbdfqzg6e","content":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>前阵子因为有个项目需要做微信自定义分享功能，因而去研究了下微信JS-SDK相关知识。</p>\n<p>此文做个简单的记(tu)录(cao)…</p>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><p>所有的东西都从文档开始:<a href=\"http://mp.weixin.qq.com/wiki/11/74ad127cc054f6b80759c40f77ec03db.html\" target=\"_blank\" rel=\"external\">微信JSSDK说明文档</a></p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/44b1232e-9311-4abb-9200-6dd4936d7c47\" alt=\"分享接口\"></p>\n<p>项目需要用到的是<a href=\"http://mp.weixin.qq.com/wiki/11/74ad127cc054f6b80759c40f77ec03db.html#.E5.88.86.E4.BA.AB.E6.8E.A5.E5.8F.A3\" target=\"_blank\" rel=\"external\">分享接口</a> 不过使用微信JS-SDK之前，需要做JS接口认证。</p>\n<p>认证如下：</p>\n<p>步骤一：绑定域名</p>\n<p>步骤二：引入JS文件</p>\n<p>步骤三：通过config接口注入权限验证配置</p>\n<p>步骤四：通过ready接口处理成功验证</p>\n<p>步骤五：通过error接口处理失败验证</p>\n<p>步骤一中允许使用域名/子域名，只要xx.com/xxx.txt或者xx.com/mp/xxx.txt能访问就好。域名认证通过之后，此域名下的所有端口的网站都可以使用JS-SDK。</p>\n<p>步骤二没什么问题，略过。</p>\n<p>步骤三最磨人，下面单独讲解。</p>\n<h3 id=\"config接口注入权限验证配置\"><a href=\"#config接口注入权限验证配置\" class=\"headerlink\" title=\"config接口注入权限验证配置\"></a>config接口注入权限验证配置</h3><p>先来一段说明：<br><figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">所有需要使用JS-SDK的页面必须先注入配置信息，否则将无法调用</div><div class=\"line\">（同一个<span class=\"built_in\">url</span>仅需调用一次，对于变化<span class=\"built_in\">url</span>的SPA的web app可在每次<span class=\"built_in\">url</span>变化时进行调用,</div><div class=\"line\">目前Android微信客户端不支持pushState的H5新特性，</div><div class=\"line\">所以使用pushState来实现web app的页面会导致签名失败，此问题会在Android6<span class=\"number\">.2</span>中修复）。</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">wx.config(&#123;</div><div class=\"line\">    debug: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，</span></div><div class=\"line\">    <span class=\"comment\">//若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></div><div class=\"line\">    appId: <span class=\"string\">''</span>, <span class=\"comment\">// 必填，公众号的唯一标识</span></div><div class=\"line\">    timestamp: , <span class=\"comment\">// 必填，生成签名的时间戳</span></div><div class=\"line\">    nonceStr: <span class=\"string\">''</span>, <span class=\"comment\">// 必填，生成签名的随机串</span></div><div class=\"line\">    signature: <span class=\"string\">''</span>,<span class=\"comment\">// 必填，签名，见附录1</span></div><div class=\"line\">    jsApiList: [] <span class=\"comment\">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>看到这里肯定懵逼了，这是都什么鬼…怎么玩啊。</p>\n<p>提示我们去看附录1…看完之后总结如下：</p>\n<ol>\n<li>使用config接口注入权限验证配置，重点是生成合法的signatrue</li>\n<li>生成signature需要通过appid和secret获取token</li>\n<li>时间戳和调用接口URL必不可少</li>\n<li>此操作需要服务端完成，不能使用客户端实现</li>\n</ol>\n<p>整个过程变成：</p>\n<ol>\n<li><p>通过appid和secret获取access_token，接着使用token获取jsapi_ticket；</p>\n</li>\n<li><p>拿到jsapi_ticket之后，把jsapi_ticket、时间戳、随机字符串、接口调用页面URL 拼接成完整字符串，使用sha1算法加密得到signature。</p>\n</li>\n<li><p>最后返回至页面，在wx.config里面填入appid，上一步的时间戳timestamp，上一部的随机字符串、sha1拿到的signature，想要使用的JS接口。</p>\n</li>\n</ol>\n<p>废话少说，直接上代码吧。</p>\n<h3 id=\"代码时间\"><a href=\"#代码时间\" class=\"headerlink\" title=\"代码时间\"></a>代码时间</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">WeiXinController</span> : <span class=\"title\">Controller</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">string</span> appid =</div><div class=\"line\">    System.Web.Configuration.WebConfigurationManager.AppSettings[<span class=\"string\">\"wxappid\"</span>];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">string</span> secret =</div><div class=\"line\">    System.Web.Configuration.WebConfigurationManager.AppSettings[<span class=\"string\">\"wxsecret\"</span>];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">bool</span> isDedug =</div><div class=\"line\">    System.Web.Configuration.WebConfigurationManager.AppSettings[<span class=\"string\">\"IsDebug\"</span>] ==<span class=\"string\">\"true\"</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> _ticket = <span class=\"string\">\"\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DateTime _lastTimestamp;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">Info</span>(<span class=\"params\"><span class=\"keyword\">string</span> url,<span class=\"keyword\">string</span> noncestr</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(_ticket) || </div><div class=\"line\">        _lastTimestamp == <span class=\"literal\">null</span> || (_lastTimestamp - DateTime.Now).Milliseconds &gt; <span class=\"number\">7200</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> resultString = HTTPHelper.GetHTMLByURL</div><div class=\"line\">            (<span class=\"string\">\"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=\"</span></div><div class=\"line\">                + appid + <span class=\"string\">\"&amp;secret=\"</span> + secret);</div><div class=\"line\">            <span class=\"keyword\">dynamic</span> resultValue = JsonConvert.DeserializeObject&lt;<span class=\"keyword\">dynamic</span>&gt;(resultString);</div><div class=\"line\">            <span class=\"keyword\">if</span> (resultValue == <span class=\"literal\">null</span> || resultValue.access_token == <span class=\"literal\">null</span> </div><div class=\"line\">            || resultValue.access_token.Value == <span class=\"literal\">null</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; issuccess = <span class=\"literal\">false</span>, </div><div class=\"line\">                error = <span class=\"string\">\"获取token失败\"</span> &#125;);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">var</span> token = resultValue.access_token.Value;</div><div class=\"line\"></div><div class=\"line\">            resultString = HTTPHelper.GetHTMLByURL</div><div class=\"line\">            (<span class=\"string\">\"https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=\"</span> + </div><div class=\"line\">            token + <span class=\"string\">\"&amp;type=jsapi\"</span>);</div><div class=\"line\">            <span class=\"keyword\">dynamic</span> ticketValue = JsonConvert.DeserializeObject&lt;<span class=\"keyword\">dynamic</span>&gt;(resultString);</div><div class=\"line\">            <span class=\"keyword\">if</span> (ticketValue == <span class=\"literal\">null</span> || ticketValue.errcode == <span class=\"literal\">null</span></div><div class=\"line\">            || ticketValue.errcode.Value != <span class=\"number\">0</span> || ticketValue.ticket == <span class=\"literal\">null</span>)</div><div class=\"line\">                <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; issuccess = <span class=\"literal\">false</span>,</div><div class=\"line\">                error = <span class=\"string\">\"获取ticketValue失败\"</span> &#125;);</div><div class=\"line\">            _ticket = ticketValue.ticket.Value;</div><div class=\"line\">            _lastTimestamp = DateTime.Now;</div><div class=\"line\">            <span class=\"keyword\">var</span> timestamp = GetTimeStamp();</div><div class=\"line\">            <span class=\"keyword\">var</span> hexString = <span class=\"keyword\">string</span>.Format(<span class=\"string\">\"jsapi_ticket=&#123;0&#125;&amp;noncestr=&#123;3&#125;&amp;timestamp=&#123;1&#125;&amp;url=&#123;2&#125;\"</span>,</div><div class=\"line\">            _ticket, timestamp, url,noncestr);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123;</div><div class=\"line\">                issuccess = <span class=\"literal\">true</span>, </div><div class=\"line\">                sha1value = GetSHA1Value(hexString), </div><div class=\"line\">                timestamp = timestamp, </div><div class=\"line\">                url = url, </div><div class=\"line\">                appid = appid, </div><div class=\"line\">                debug=isDedug,</div><div class=\"line\">                tiket=_ticket</div><div class=\"line\">            &#125;);</div><div class=\"line\">            </div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> timestamp = GetTimeStamp();</div><div class=\"line\">            <span class=\"keyword\">var</span> hexString = <span class=\"keyword\">string</span>.Format(<span class=\"string\">\"jsapi_ticket=&#123;0&#125;&amp;noncestr=1234567890123456&amp;timestamp=&#123;1&#125;&amp;url=&#123;2&#125;\"</span>,</div><div class=\"line\">               _ticket, timestamp, url);</div><div class=\"line\">            <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; </div><div class=\"line\">                issuccess = <span class=\"literal\">true</span>, sha1value = GetSHA1Value(hexString),</div><div class=\"line\">                timestamp = timestamp, url = url,</div><div class=\"line\">                appid = appid, debug = isDedug,tiket = _ticket</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">string</span> <span class=\"title\">GetSHA1Value</span>(<span class=\"params\"><span class=\"keyword\">string</span> sourceString</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> hash = SHA1.Create().ComputeHash(Encoding.UTF8.GetBytes(sourceString));</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>.Join(<span class=\"string\">\"\"</span>, </div><div class=\"line\">        hash.Select(b =&gt; b.ToString(<span class=\"string\">\"x2\"</span>)).ToArray());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetTimeStamp</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">        TimeSpan ts = DateTime.Now - <span class=\"keyword\">new</span> DateTime(<span class=\"number\">1970</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> Convert.ToInt64(ts.TotalSeconds).ToString();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HTTPHelper</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetHTMLByURL</span>(<span class=\"params\"><span class=\"keyword\">string</span> url</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">string</span> htmlCode = <span class=\"keyword\">string</span>.Empty;</div><div class=\"line\">        <span class=\"keyword\">try</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            HttpWebRequest webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(url);</div><div class=\"line\">            webRequest.Timeout = <span class=\"number\">30000</span>;</div><div class=\"line\">            webRequest.Method = <span class=\"string\">\"GET\"</span>;</div><div class=\"line\">            webRequest.UserAgent = <span class=\"string\">\"Mozilla/4.0\"</span>;</div><div class=\"line\">            webRequest.Headers.Add(<span class=\"string\">\"Accept-Encoding\"</span>, <span class=\"string\">\"gzip, deflate\"</span>);</div><div class=\"line\">            HttpWebResponse webResponse = (System.Net.HttpWebResponse)webRequest.GetResponse();</div><div class=\"line\">            <span class=\"comment\">//获取目标网站的编码格式</span></div><div class=\"line\">            <span class=\"keyword\">string</span> contentype = webResponse.Headers[<span class=\"string\">\"Content-Type\"</span>];</div><div class=\"line\">            Regex regex = <span class=\"keyword\">new</span> Regex(<span class=\"string\">\"charset\\\\s*=\\\\s*[\\\\W]?\\\\s*([\\\\w-]+)\"</span>, RegexOptions.IgnoreCase);</div><div class=\"line\">            <span class=\"keyword\">if</span> (webResponse.ContentEncoding.ToLower() == <span class=\"string\">\"gzip\"</span>)<span class=\"comment\">//如果使用了GZip则先解压</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">using</span> (System.IO.Stream streamReceive = webResponse.GetResponseStream())</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> zipStream = <span class=\"keyword\">new</span> System.IO.Compression.GZipStream(streamReceive, </div><div class=\"line\">                    System.IO.Compression.CompressionMode.Decompress))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        <span class=\"comment\">//匹配编码格式</span></div><div class=\"line\">                        <span class=\"keyword\">if</span> (regex.IsMatch(contentype))</div><div class=\"line\">                        &#123;</div><div class=\"line\">                            Encoding ending = Encoding.GetEncoding</div><div class=\"line\">                            (regex.Match(contentype).Groups[<span class=\"number\">1</span>].Value.Trim());</div><div class=\"line\">                            <span class=\"keyword\">using</span> (StreamReader sr = <span class=\"keyword\">new</span> System.IO.StreamReader(zipStream, ending))</div><div class=\"line\">                            &#123;</div><div class=\"line\">                                htmlCode = sr.ReadToEnd();</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        <span class=\"keyword\">else</span></div><div class=\"line\">                        &#123;</div><div class=\"line\">                            <span class=\"keyword\">using</span> (StreamReader sr = <span class=\"keyword\">new</span> System.IO.StreamReader(zipStream, Encoding.UTF8))</div><div class=\"line\">                            &#123;</div><div class=\"line\">                                htmlCode = sr.ReadToEnd();</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">using</span> (System.IO.Stream streamReceive = webResponse.GetResponseStream())</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">var</span> encoding = Encoding.Default;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (contentype.Contains(<span class=\"string\">\"utf\"</span>))</div><div class=\"line\">                        encoding = Encoding.UTF8;</div><div class=\"line\">                    <span class=\"keyword\">using</span> (System.IO.StreamReader sr = <span class=\"keyword\">new</span> System.IO.StreamReader(streamReceive, encoding))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        htmlCode = sr.ReadToEnd();</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> htmlCode;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">catch</span> (Exception ex)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>PS：这里要注意缓存一下_ticket（即access_token），照微信文档说的，access_token两个小时内有效，不需要频繁调用。而且获取access_token的接口有调用次数的限制，如果超过了次数，就不允许调用了。</p>\n<p>PPS:建议noncestr和URL由前台传入比较适合，使用 var theWebUrl = window.location.href.split(‘#’)[0] 获取URL，noncestr就随意了。</p>\n<p>PPPS:遇到诡异的invalid signature的时候，首先检查url参数，然后检查noncestr，再不行重启一下程序获取一个新的token回来继续玩。</p>\n","excerpt":"","more":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>前阵子因为有个项目需要做微信自定义分享功能，因而去研究了下微信JS-SDK相关知识。</p>\n<p>此文做个简单的记(tu)录(cao)…</p>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><p>所有的东西都从文档开始:<a href=\"http://mp.weixin.qq.com/wiki/11/74ad127cc054f6b80759c40f77ec03db.html\">微信JSSDK说明文档</a></p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/44b1232e-9311-4abb-9200-6dd4936d7c47\" alt=\"分享接口\"></p>\n<p>项目需要用到的是<a href=\"http://mp.weixin.qq.com/wiki/11/74ad127cc054f6b80759c40f77ec03db.html#.E5.88.86.E4.BA.AB.E6.8E.A5.E5.8F.A3\">分享接口</a> 不过使用微信JS-SDK之前，需要做JS接口认证。</p>\n<p>认证如下：</p>\n<p>步骤一：绑定域名</p>\n<p>步骤二：引入JS文件</p>\n<p>步骤三：通过config接口注入权限验证配置</p>\n<p>步骤四：通过ready接口处理成功验证</p>\n<p>步骤五：通过error接口处理失败验证</p>\n<p>步骤一中允许使用域名/子域名，只要xx.com/xxx.txt或者xx.com/mp/xxx.txt能访问就好。域名认证通过之后，此域名下的所有端口的网站都可以使用JS-SDK。</p>\n<p>步骤二没什么问题，略过。</p>\n<p>步骤三最磨人，下面单独讲解。</p>\n<h3 id=\"config接口注入权限验证配置\"><a href=\"#config接口注入权限验证配置\" class=\"headerlink\" title=\"config接口注入权限验证配置\"></a>config接口注入权限验证配置</h3><p>先来一段说明：<br><figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">所有需要使用JS-SDK的页面必须先注入配置信息，否则将无法调用</div><div class=\"line\">（同一个<span class=\"built_in\">url</span>仅需调用一次，对于变化<span class=\"built_in\">url</span>的SPA的web app可在每次<span class=\"built_in\">url</span>变化时进行调用,</div><div class=\"line\">目前Android微信客户端不支持pushState的H5新特性，</div><div class=\"line\">所以使用pushState来实现web app的页面会导致签名失败，此问题会在Android6<span class=\"number\">.2</span>中修复）。</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">wx.config(&#123;</div><div class=\"line\">    debug: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，</span></div><div class=\"line\">    <span class=\"comment\">//若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></div><div class=\"line\">    appId: <span class=\"string\">''</span>, <span class=\"comment\">// 必填，公众号的唯一标识</span></div><div class=\"line\">    timestamp: , <span class=\"comment\">// 必填，生成签名的时间戳</span></div><div class=\"line\">    nonceStr: <span class=\"string\">''</span>, <span class=\"comment\">// 必填，生成签名的随机串</span></div><div class=\"line\">    signature: <span class=\"string\">''</span>,<span class=\"comment\">// 必填，签名，见附录1</span></div><div class=\"line\">    jsApiList: [] <span class=\"comment\">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>看到这里肯定懵逼了，这是都什么鬼…怎么玩啊。</p>\n<p>提示我们去看附录1…看完之后总结如下：</p>\n<ol>\n<li>使用config接口注入权限验证配置，重点是生成合法的signatrue</li>\n<li>生成signature需要通过appid和secret获取token</li>\n<li>时间戳和调用接口URL必不可少</li>\n<li>此操作需要服务端完成，不能使用客户端实现</li>\n</ol>\n<p>整个过程变成：</p>\n<ol>\n<li><p>通过appid和secret获取access_token，接着使用token获取jsapi_ticket；</p>\n</li>\n<li><p>拿到jsapi_ticket之后，把jsapi_ticket、时间戳、随机字符串、接口调用页面URL 拼接成完整字符串，使用sha1算法加密得到signature。</p>\n</li>\n<li><p>最后返回至页面，在wx.config里面填入appid，上一步的时间戳timestamp，上一部的随机字符串、sha1拿到的signature，想要使用的JS接口。</p>\n</li>\n</ol>\n<p>废话少说，直接上代码吧。</p>\n<h3 id=\"代码时间\"><a href=\"#代码时间\" class=\"headerlink\" title=\"代码时间\"></a>代码时间</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">WeiXinController</span> : <span class=\"title\">Controller</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">string</span> appid =</div><div class=\"line\">    System.Web.Configuration.WebConfigurationManager.AppSettings[<span class=\"string\">\"wxappid\"</span>];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">string</span> secret =</div><div class=\"line\">    System.Web.Configuration.WebConfigurationManager.AppSettings[<span class=\"string\">\"wxsecret\"</span>];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">bool</span> isDedug =</div><div class=\"line\">    System.Web.Configuration.WebConfigurationManager.AppSettings[<span class=\"string\">\"IsDebug\"</span>] ==<span class=\"string\">\"true\"</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> _ticket = <span class=\"string\">\"\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DateTime _lastTimestamp;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">Info</span>(<span class=\"params\"><span class=\"keyword\">string</span> url,<span class=\"keyword\">string</span> noncestr</span>)</div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(_ticket) || </div><div class=\"line\">        _lastTimestamp == <span class=\"literal\">null</span> || (_lastTimestamp - DateTime.Now).Milliseconds &gt; <span class=\"number\">7200</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> resultString = HTTPHelper.GetHTMLByURL</div><div class=\"line\">            (<span class=\"string\">\"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=\"</span></div><div class=\"line\">                + appid + <span class=\"string\">\"&amp;secret=\"</span> + secret);</div><div class=\"line\">            <span class=\"keyword\">dynamic</span> resultValue = JsonConvert.DeserializeObject&lt;<span class=\"keyword\">dynamic</span>&gt;(resultString);</div><div class=\"line\">            <span class=\"keyword\">if</span> (resultValue == <span class=\"literal\">null</span> || resultValue.access_token == <span class=\"literal\">null</span> </div><div class=\"line\">            || resultValue.access_token.Value == <span class=\"literal\">null</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; issuccess = <span class=\"literal\">false</span>, </div><div class=\"line\">                error = <span class=\"string\">\"获取token失败\"</span> &#125;);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">var</span> token = resultValue.access_token.Value;</div><div class=\"line\"></div><div class=\"line\">            resultString = HTTPHelper.GetHTMLByURL</div><div class=\"line\">            (<span class=\"string\">\"https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=\"</span> + </div><div class=\"line\">            token + <span class=\"string\">\"&amp;type=jsapi\"</span>);</div><div class=\"line\">            <span class=\"keyword\">dynamic</span> ticketValue = JsonConvert.DeserializeObject&lt;<span class=\"keyword\">dynamic</span>&gt;(resultString);</div><div class=\"line\">            <span class=\"keyword\">if</span> (ticketValue == <span class=\"literal\">null</span> || ticketValue.errcode == <span class=\"literal\">null</span></div><div class=\"line\">            || ticketValue.errcode.Value != <span class=\"number\">0</span> || ticketValue.ticket == <span class=\"literal\">null</span>)</div><div class=\"line\">                <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; issuccess = <span class=\"literal\">false</span>,</div><div class=\"line\">                error = <span class=\"string\">\"获取ticketValue失败\"</span> &#125;);</div><div class=\"line\">            _ticket = ticketValue.ticket.Value;</div><div class=\"line\">            _lastTimestamp = DateTime.Now;</div><div class=\"line\">            <span class=\"keyword\">var</span> timestamp = GetTimeStamp();</div><div class=\"line\">            <span class=\"keyword\">var</span> hexString = <span class=\"keyword\">string</span>.Format(<span class=\"string\">\"jsapi_ticket=&#123;0&#125;&amp;noncestr=&#123;3&#125;&amp;timestamp=&#123;1&#125;&amp;url=&#123;2&#125;\"</span>,</div><div class=\"line\">            _ticket, timestamp, url,noncestr);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123;</div><div class=\"line\">                issuccess = <span class=\"literal\">true</span>, </div><div class=\"line\">                sha1value = GetSHA1Value(hexString), </div><div class=\"line\">                timestamp = timestamp, </div><div class=\"line\">                url = url, </div><div class=\"line\">                appid = appid, </div><div class=\"line\">                debug=isDedug,</div><div class=\"line\">                tiket=_ticket</div><div class=\"line\">            &#125;);</div><div class=\"line\">            </div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> timestamp = GetTimeStamp();</div><div class=\"line\">            <span class=\"keyword\">var</span> hexString = <span class=\"keyword\">string</span>.Format(<span class=\"string\">\"jsapi_ticket=&#123;0&#125;&amp;noncestr=1234567890123456&amp;timestamp=&#123;1&#125;&amp;url=&#123;2&#125;\"</span>,</div><div class=\"line\">               _ticket, timestamp, url);</div><div class=\"line\">            <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; </div><div class=\"line\">                issuccess = <span class=\"literal\">true</span>, sha1value = GetSHA1Value(hexString),</div><div class=\"line\">                timestamp = timestamp, url = url,</div><div class=\"line\">                appid = appid, debug = isDedug,tiket = _ticket</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">string</span> <span class=\"title\">GetSHA1Value</span>(<span class=\"params\"><span class=\"keyword\">string</span> sourceString</span>)</div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> hash = SHA1.Create().ComputeHash(Encoding.UTF8.GetBytes(sourceString));</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>.Join(<span class=\"string\">\"\"</span>, </div><div class=\"line\">        hash.Select(b =&gt; b.ToString(<span class=\"string\">\"x2\"</span>)).ToArray());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetTimeStamp</span>(<span class=\"params\"></span>)</div><div class=\"line\">    </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        TimeSpan ts = DateTime.Now - <span class=\"keyword\">new</span> DateTime(<span class=\"number\">1970</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> Convert.ToInt64(ts.TotalSeconds).ToString();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HTTPHelper</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetHTMLByURL</span>(<span class=\"params\"><span class=\"keyword\">string</span> url</span>)</div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">string</span> htmlCode = <span class=\"keyword\">string</span>.Empty;</div><div class=\"line\">        <span class=\"keyword\">try</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            HttpWebRequest webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(url);</div><div class=\"line\">            webRequest.Timeout = <span class=\"number\">30000</span>;</div><div class=\"line\">            webRequest.Method = <span class=\"string\">\"GET\"</span>;</div><div class=\"line\">            webRequest.UserAgent = <span class=\"string\">\"Mozilla/4.0\"</span>;</div><div class=\"line\">            webRequest.Headers.Add(<span class=\"string\">\"Accept-Encoding\"</span>, <span class=\"string\">\"gzip, deflate\"</span>);</div><div class=\"line\">            HttpWebResponse webResponse = (System.Net.HttpWebResponse)webRequest.GetResponse();</div><div class=\"line\">            <span class=\"comment\">//获取目标网站的编码格式</span></div><div class=\"line\">            <span class=\"keyword\">string</span> contentype = webResponse.Headers[<span class=\"string\">\"Content-Type\"</span>];</div><div class=\"line\">            Regex regex = <span class=\"keyword\">new</span> Regex(<span class=\"string\">\"charset\\\\s*=\\\\s*[\\\\W]?\\\\s*([\\\\w-]+)\"</span>, RegexOptions.IgnoreCase);</div><div class=\"line\">            <span class=\"keyword\">if</span> (webResponse.ContentEncoding.ToLower() == <span class=\"string\">\"gzip\"</span>)<span class=\"comment\">//如果使用了GZip则先解压</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">using</span> (System.IO.Stream streamReceive = webResponse.GetResponseStream())</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> zipStream = <span class=\"keyword\">new</span> System.IO.Compression.GZipStream(streamReceive, </div><div class=\"line\">                    System.IO.Compression.CompressionMode.Decompress))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        <span class=\"comment\">//匹配编码格式</span></div><div class=\"line\">                        <span class=\"keyword\">if</span> (regex.IsMatch(contentype))</div><div class=\"line\">                        &#123;</div><div class=\"line\">                            Encoding ending = Encoding.GetEncoding</div><div class=\"line\">                            (regex.Match(contentype).Groups[<span class=\"number\">1</span>].Value.Trim());</div><div class=\"line\">                            <span class=\"keyword\">using</span> (StreamReader sr = <span class=\"keyword\">new</span> System.IO.StreamReader(zipStream, ending))</div><div class=\"line\">                            &#123;</div><div class=\"line\">                                htmlCode = sr.ReadToEnd();</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        <span class=\"keyword\">else</span></div><div class=\"line\">                        &#123;</div><div class=\"line\">                            <span class=\"keyword\">using</span> (StreamReader sr = <span class=\"keyword\">new</span> System.IO.StreamReader(zipStream, Encoding.UTF8))</div><div class=\"line\">                            &#123;</div><div class=\"line\">                                htmlCode = sr.ReadToEnd();</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">using</span> (System.IO.Stream streamReceive = webResponse.GetResponseStream())</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">var</span> encoding = Encoding.Default;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (contentype.Contains(<span class=\"string\">\"utf\"</span>))</div><div class=\"line\">                        encoding = Encoding.UTF8;</div><div class=\"line\">                    <span class=\"keyword\">using</span> (System.IO.StreamReader sr = <span class=\"keyword\">new</span> System.IO.StreamReader(streamReceive, encoding))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        htmlCode = sr.ReadToEnd();</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> htmlCode;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">catch</span> (Exception ex)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>PS：这里要注意缓存一下_ticket（即access_token），照微信文档说的，access_token两个小时内有效，不需要频繁调用。而且获取access_token的接口有调用次数的限制，如果超过了次数，就不允许调用了。</p>\n<p>PPS:建议noncestr和URL由前台传入比较适合，使用 var theWebUrl = window.location.href.split(‘#’)[0] 获取URL，noncestr就随意了。</p>\n<p>PPPS:遇到诡异的invalid signature的时候，首先检查url参数，然后检查noncestr，再不行重启一下程序获取一个新的token回来继续玩。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj0dyumuu00006kune5kir3zq","category_id":"cj0dyumv600046kunx5pqzkei","_id":"cj0dyumvx000d6kunkc7tttif"},{"post_id":"cj0dyumv200026kunea50esi5","category_id":"cj0dyumvq000a6kunofgopruy","_id":"cj0dyumw4000k6kunj1wdrol9"},{"post_id":"cj0dyumvf00056kunkypmvnm5","category_id":"cj0dyumvz000f6kunpphmt68c","_id":"cj0dyumwb000q6kunzdre79hi"},{"post_id":"cj0dyumvk00086kunt8xc9dib","category_id":"cj0dyumw5000l6kunqqj9ox6b","_id":"cj0dyumwk000w6kunathdeyqx"},{"post_id":"cj0dyumw9000p6kunhnl1861r","category_id":"cj0dyumvq000a6kunofgopruy","_id":"cj0dyumwm00106kunpdj94xhf"},{"post_id":"cj0dyumwc000s6kundsnimt5q","category_id":"cj0dyumvq000a6kunofgopruy","_id":"cj0dyumwo00146kun5osirrwt"},{"post_id":"cj0dyumvp00096kuneulr0vm5","category_id":"cj0dyumvq000a6kunofgopruy","_id":"cj0dyumwr00176kunmaq215k8"},{"post_id":"cj0dyumwi000u6kun1gvt52dt","category_id":"cj0dyumw5000l6kunqqj9ox6b","_id":"cj0dyumwt00196kunbi5dpf3q"},{"post_id":"cj0dyumwl000y6kunp7ff40ed","category_id":"cj0dyumvq000a6kunofgopruy","_id":"cj0dyumww001d6kunn056r1y8"},{"post_id":"cj0dyumwn00126kunndxbxsfj","category_id":"cj0dyumvq000a6kunofgopruy","_id":"cj0dyumx2001g6kun154h5pf5"},{"post_id":"cj0dyumvr000b6kunbzd7qga4","category_id":"cj0dyumwk000x6kun7u74moqt","_id":"cj0dyumx5001j6kunrkkn0dr3"},{"post_id":"cj0dyumwp00156kunvl8u16ht","category_id":"cj0dyumvq000a6kunofgopruy","_id":"cj0dyumx9001m6kun6wad9add"},{"post_id":"cj0dyumvx000e6kunl9r3gphh","category_id":"cj0dyumwk000x6kun7u74moqt","_id":"cj0dyumxb001q6kunwqw8gzgq"},{"post_id":"cj0dyumwt001b6kunwreknn2i","category_id":"cj0dyumvz000f6kunpphmt68c","_id":"cj0dyumxd001t6kunbmsez4qr"},{"post_id":"cj0dyumx1001f6kunqgpr34q9","category_id":"cj0dyumw5000l6kunqqj9ox6b","_id":"cj0dyumxg001x6kunl3udhyop"},{"post_id":"cj0dyumvz000g6kunk897t59o","category_id":"cj0dyumwv001c6kunvbhw2qzi","_id":"cj0dyumxh00216kuneiygx5v2"},{"post_id":"cj0dyumw3000i6kun2lpx4lom","category_id":"cj0dyumwv001c6kunvbhw2qzi","_id":"cj0dyumxj00236kun5noshk18"},{"post_id":"cj0dyumxa001o6kunkticvhaz","category_id":"cj0dyumvq000a6kunofgopruy","_id":"cj0dyumxn00266kunhz91uqnd"},{"post_id":"cj0dyumxc001r6kunlijhhunq","category_id":"cj0dyumw5000l6kunqqj9ox6b","_id":"cj0dyumxp00296kunm1tmkx9s"},{"post_id":"cj0dyumw5000m6kundw934ksw","category_id":"cj0dyumxb001p6kun96acbawx","_id":"cj0dyumxs002c6kunll3f0sg8"},{"post_id":"cj0dyumxg001y6kunb5hwp4gr","category_id":"cj0dyumxf001w6kunb3exurin","_id":"cj0dyumxt002e6kundiw30xx1"},{"post_id":"cj0dyumws00186kuns5pzdqzx","category_id":"cj0dyumxf001w6kunb3exurin","_id":"cj0dyumxt002h6kunt0fsx926"},{"post_id":"cj0dyumxk00256kunbdfqzg6e","category_id":"cj0dyumvq000a6kunofgopruy","_id":"cj0dyumxu002j6kun4m75x5g8"},{"post_id":"cj0dyumx3001h6kunoksb224x","category_id":"cj0dyumxj00246kungjl6tuae","_id":"cj0dyumxu002l6kunuskf2d4g"},{"post_id":"cj0dyumx6001k6kun40eiq0o1","category_id":"cj0dyumxf001w6kunb3exurin","_id":"cj0dyumxv002n6kunuygnvojr"},{"post_id":"cj0dyumxe001u6kunhot851vr","category_id":"cj0dyumxt002g6kunoboyea6n","_id":"cj0dyumxv002p6kunrf3wpkbn"},{"post_id":"cj0dyumxi00226kunwslpact8","category_id":"cj0dyumxu002k6kunug62l8a5","_id":"cj0dyumxw002s6kuncs1vd4dc"}],"PostTag":[{"post_id":"cj0dyumv200026kunea50esi5","tag_id":"cj0dyumvj00076kung03xx1mo","_id":"cj0dyumw4000j6kun1868o1qd"},{"post_id":"cj0dyumv200026kunea50esi5","tag_id":"cj0dyumvt000c6kunx6ds3a5u","_id":"cj0dyumw7000n6kunsmog1bl0"},{"post_id":"cj0dyumvf00056kunkypmvnm5","tag_id":"cj0dyumw2000h6kunepeneuq1","_id":"cj0dyumwk000v6kunbe49g6do"},{"post_id":"cj0dyumvf00056kunkypmvnm5","tag_id":"cj0dyumvj00076kung03xx1mo","_id":"cj0dyumwm000z6kun3wavsuxu"},{"post_id":"cj0dyumvp00096kuneulr0vm5","tag_id":"cj0dyumwi000t6kunhyv54wco","_id":"cj0dyumwo00136kunjvmbq6eg"},{"post_id":"cj0dyumvx000e6kunl9r3gphh","tag_id":"cj0dyumwn00116kun03ctispj","_id":"cj0dyumwt001a6kuno3gq8gl9"},{"post_id":"cj0dyumws00186kuns5pzdqzx","tag_id":"cj0dyumwz001e6kunda0yh3og","_id":"cj0dyumx9001n6kun7k7oqir5"},{"post_id":"cj0dyumwt001b6kunwreknn2i","tag_id":"cj0dyumw2000h6kunepeneuq1","_id":"cj0dyumxf001v6kun6ja5alwr"},{"post_id":"cj0dyumwt001b6kunwreknn2i","tag_id":"cj0dyumx7001l6kun66u8ohm8","_id":"cj0dyumxh001z6kun2kz97jzs"},{"post_id":"cj0dyumx3001h6kunoksb224x","tag_id":"cj0dyumxd001s6kunjv80siqn","_id":"cj0dyumxp00286kuncnd1exgt"},{"post_id":"cj0dyumx3001h6kunoksb224x","tag_id":"cj0dyumxh00206kun7hnudtj3","_id":"cj0dyumxr002b6kunw28wj5ko"},{"post_id":"cj0dyumx6001k6kun40eiq0o1","tag_id":"cj0dyumxo00276kungdjrvpuo","_id":"cj0dyumxt002f6kungouszf0r"},{"post_id":"cj0dyumxa001o6kunkticvhaz","tag_id":"cj0dyumxs002d6kunt6x64l35","_id":"cj0dyumxv002o6kuntw9e8fol"},{"post_id":"cj0dyumxa001o6kunkticvhaz","tag_id":"cj0dyumxu002i6kunhksvg31q","_id":"cj0dyumxv002q6kunen7cddr0"},{"post_id":"cj0dyumxg001y6kunb5hwp4gr","tag_id":"cj0dyumxu002m6kunn8yv5o53","_id":"cj0dyumxw002t6kunjbcxgi5z"},{"post_id":"cj0dyumxi00226kunwslpact8","tag_id":"cj0dyumxw002r6kunwb0qc9lg","_id":"cj0dyumxy002x6kunto4bp35g"},{"post_id":"cj0dyumxi00226kunwslpact8","tag_id":"cj0dyumxw002u6kun4arh0v4h","_id":"cj0dyumxy002y6kun0rol1f8f"},{"post_id":"cj0dyumxi00226kunwslpact8","tag_id":"cj0dyumxw002v6kung6ekzr1a","_id":"cj0dyumxy002z6kun5q95jj45"},{"post_id":"cj0dyumxk00256kunbdfqzg6e","tag_id":"cj0dyumxx002w6kun1dz9ywx8","_id":"cj0dyumxy00306kunvnlvuk4g"},{"post_id":"cj0dyumxk00256kunbdfqzg6e","tag_id":"cj0dyumxd001s6kunjv80siqn","_id":"cj0dyumxy00316kunnkx0zv2q"}],"Tag":[{"name":"58City","_id":"cj0dyumvj00076kung03xx1mo"},{"name":"Crawler","_id":"cj0dyumvt000c6kunx6ds3a5u"},{"name":"asp.net core","_id":"cj0dyumw2000h6kunepeneuq1"},{"name":"加密编码","_id":"cj0dyumwi000t6kunhyv54wco"},{"name":"codesmith","_id":"cj0dyumwn00116kun03ctispj"},{"name":"hexo","_id":"cj0dyumwz001e6kunda0yh3og"},{"name":"crawler","_id":"cj0dyumx7001l6kun66u8ohm8"},{"name":"javascript","_id":"cj0dyumxd001s6kunjv80siqn"},{"name":"requirejs","_id":"cj0dyumxh00206kun7hnudtj3"},{"name":"memorandum","_id":"cj0dyumxo00276kungdjrvpuo"},{"name":"mono","_id":"cj0dyumxs002d6kunt6x64l35"},{"name":"webreques exception","_id":"cj0dyumxu002i6kunhksvg31q"},{"name":"Visual Studio","_id":"cj0dyumxu002m6kunn8yv5o53"},{"name":"VisualStudio","_id":"cj0dyumxw002r6kunwb0qc9lg"},{"name":"PHP","_id":"cj0dyumxw002u6kun4arh0v4h"},{"name":"Debug","_id":"cj0dyumxw002v6kung6ekzr1a"},{"name":".net","_id":"cj0dyumxx002w6kun1dz9ywx8"}]}}